##, -*- python -*-
# ex: set syntax=python:

#-------------------------------------------------------------------------------
# To reload buildbot:
#  1) check that this file does not have any syntax errors with:
#       sudo -u buildbot PYTHONPATH=/usr/local/buildbot/lib/python python -c 'exec open("maria-master.cfg", "r")'
#     (no output = no syntax errors)
#  2) reload with:
#       sudo /etc/init.d/buildmaster reload
#  3) check the reload process:
#       sudo less /var/lib/buildbot/maria/twistd.log
#     - or -
#       sudo tail -f /var/lib/buildbot/maria/twistd.log
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
#  Notice: Once per day this file is auto-commited into the mariadb.org-tools
#          project on GitHub if it has been modified. As a safety feature,
#          in case someone is currently making changes to the file, commits
#          will _not_ take place if the file was modified less than two hours
#          before the cron job runs.
#
#          The cron job runs every morning at 0300
#
#          The auto-commit script does a "git pull" prior to checking if there
#          are uncommited changes that need to be commited; but because of the
#          way the script works, the version of this file currently in
#          production trumps all other versions when it comes to deciding what
#          to auto-commit and push, even if the changes on GitHub are more
#          recent.
#
#          With that in mind, if you are modifing this file, you are encouraged
#          follow the following procedure:
#
#              First:  Branch the mariadb.org-tools project from GitHub, if you
#                      haven't already, and prototype and stage your changes
#                      there first. You can commit your changes locally, but
#                      don't push your changes yet.
#
#              Second: When your changes are ready, do a last pull from
#                      GitHub and a diff of the production file, just to
#                      make sure there are no conflicts with your changes or
#                      that you are not overwriting someone else's more recent
#                      production changes.
#
#              Third:  Assuming you are not erasing someone else's changes,
#                      copy your version of the file to the production
#                      location and reload buildbot.
#
#              Fourth: Test and verify that all is well with your changes after
#                      they are in production.
#
#              Fifth:  Commit your changes in your local branch of
#                      mariadb.org-tools, if you haven't already, with a meaningful
#                      commit message; and push your changes up to GitHub.
#-------------------------------------------------------------------------------

# Master configuration file for MariaDB buildbot.
# Copyright (C) 2017  MariaDB
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# On our Ubuntu/Debian VMs we use debconf-set-selections with a seed file
# to auto-populate the answers to the questions that the .deb packages ask.
# 'rootpass' - the default password for root user is set during the same
# process.

min_version=2  # for 10.2
max_version=10 # for 10.10
main_branches=["10.{}".format(i) for i in range(min_version,max_version+1)]
release_branches=["bb-"+s+"-release" for s in main_branches]

DEVELOPMENT_BRANCH=main_branches[-1]
# "Releasable" branches are those from which a public release may be done.
# Some tests may have stricter checks for such branches
RELEASABLE_BRANCHES=" ".join(main_branches+release_branches)

from buildbot.changes.filter import ChangeFilter

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# We load the slave and database passwords from an external file, so
# that the rest of the configuration can be public.
configDict= { "cfg": { } }
execfile("/etc/buildbot/maria-master-private.cfg", configDict, { })

c['db_url'] = configDict["cfg"]["db_url"]

#-------------------------------------------------------------------------------
# Default Memory for KVM builders
#-------------------------------------------------------------------------------
memory_def="8192"
#-------------------------------------------------------------------------------

####### BUILDSLAVES

def mkSlave(name, **kwargs):
    return BuildSlave(name, configDict["cfg"]["slavePasswords"][name], **kwargs)

from buildbot.buildslave import BuildSlave
c['slaves'] = [
# have been off for a long time
#               mkSlave("work-opensuse-amd64", max_builds=1)
#              ,mkSlave("knielsen-kvm-x86", max_builds=2)
               mkSlave("bbwin3", max_builds=3)
              ,mkSlave("bb-win-azure", max_builds=1)
              ,mkSlave("bb-win-azure-2", max_builds=4)
              ,mkSlave("win-connectors", max_builds=4)
# have been down for a long time
#              ,mkSlave("starfsmenn1", max_builds=1)
#              ,mkSlave("starfsmenn2", max_builds=1)
              ,mkSlave("bb01", max_builds=4)
              ,mkSlave("bb02", max_builds=4)
              ,mkSlave("bb03", max_builds=1)
              ,mkSlave("bb04", max_builds=1)
# Re-purposed for something else
#              ,mkSlave("bb05", max_builds=8)
              ,mkSlave("bb07", max_builds=4)
              ,mkSlave("aidi", max_builds=30)
# Re-purposed for non-buildbot testing
#              ,mkSlave("eng03", max_builds=25)
              ,mkSlave("eng04", max_builds=40)
              ,mkSlave("rasmis-1", max_builds=40)
              ,mkSlave("rasmis-2", max_builds=40)
              ,mkSlave("rasmus-3", max_builds=40)
              ,mkSlave("rasmus-4", max_builds=40)
              ,mkSlave("rasmus-5", max_builds=40)
              ,mkSlave("p801", max_builds=6)
# has been off for a long time
#              ,mkSlave("p901", max_builds=10)
              ,mkSlave("bc01", max_builds=4)
# has been off for a long time
#              ,mkSlave("power8-vlp05", max_builds=1)
# donated slave was decommissioned
#              ,mkSlave("arm64-xenial", max_builds=4)
              ,mkSlave("bbm1", max_builds=2)
              ,mkSlave("bbm2", max_builds=2)
              ,mkSlave("bbm3", max_builds=2)
              ,mkSlave("bbm4", max_builds=2)
              ,mkSlave("bbm5", max_builds=1)
              ,mkSlave("bbm6", max_builds=2)
# Has been down for a long time or never up
#              ,mkSlave("power9-docker", max_builds=2)
              ,mkSlave("conn-macincloud", max_builds=2)
               ]

# Build slaves that have a kvm new enough to understand compat:1.1 qemu images.
# "bb05" was repurposed long time ago
kvm11_slaves=["bb01", "bb07", "aidi", "eng04", "rasmis-1", "rasmis-2", "rasmus-3"]

# aarch64/arm64 slaves
arm64_slaves=["rasmus-4", "rasmus-5"]

# Power 8 and Power 9 slaves
# p901 has been off for a long time
power_slaves=["p801"]

# All kvm slaves
# Has been offline for years
# + ["knielsen-kvm-x86"]
kvm_slaves=kvm11_slaves

# Build slaves which run without virtual machiens
non_kvm_slaves=["bb03", "bb04"]

# Build slaves for connectors
connector_slaves=["bc01", "bb02"]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

gitBranches = {
    "https://github.com/MariaDB/server" :
      tuple(main_branches + [
        "bb-[1-9][0-9].[0-9]-*", # yes, wildcards are ok
        "bb-[1-9][0-9].[0-9][0-9]-*",
        "hf-[1-9][0-9].[0-9]-*", # hotfix branches
        "preview-[1-9][0-9].[0-9][0-9]-MDEV-[0-9]*"
      ]),
    "https://github.com/Buggynours/MariaDB" : # this is Olivier Bertrand
      (
        "ob-*",
      ),
    "https://github.com/Kentoku/MariaDB" : # this is Kentoku Shiba
      (
        "ks-*",
      ),
    "https://github.com/mroonga/mariadb-server" : # Mroonga developers
      (
        "mrn-*",
      ),
    "https://github.com/ottok/mariadb" : # Otto, new debian packaging
      (
        "ok-*",
      ),
     "https://github.com/MariaDB/mariadb-connector-c":
      (
        "master",
        "connector_c_2.3",
        "connector_c_3.0",
        "bb-*",
        "3.0",
        "3.1"
        "3.2"
      ),
     "https://github.com/MariaDB/mariadb-connector-j":
      (
        "master",
      ),
     "https://github.com/mariadb-corporation/mariadb-connector-odbc":
      (
        "odbc-2.0",
        "master"
      ),
     "https://github.com/mariadb-corporation/mariadb-connector-cpp":
      (
        "master"
      ),
     "https://github.com/MariaDB/galera": # Nirbhay: mariadb-3.x-* is for specific galera bugs/features.
      (
        "mariadb-3.x",
        "mariadb-3.x-*",
        "mariadb-4.x",
        "mariadb-4.x-*",
        "bb-3x-*",
        "bb-4x-*",
      ),
    }

# git branch filter
import fnmatch
def fnmatch_any(s, list_of_patterns):
    return any(fnmatch.fnmatch(s, p) for p in list_of_patterns)

class BranchFilter(ChangeFilter):
    def __init__(self, on_github = {}):
        self.git_branches = on_github

    def filter_change(self, change):
        repo = getattr(change, 'repository', '?')
        branch = getattr(change, 'branch', '?')
        return fnmatch_any(branch, self.git_branches.get(repo, ()))

    def __repr__(self):
        return "<%s>" % (self.__class__.__name__,)

# Some branches are more important than others...
def myNextBuild(bldr, requests):
  best_r= None
  best_prio= None
  for r in requests:
    if r.source is not None:
      b= r.source.branch
    else:
      b= r.properties.get("branch")
    # Put here the name of the tree you want to temporarily prioritize over everything
    if b in ["current-hottest-tree"]:
        prio= 2
    elif fnmatch.fnmatch(b, 'bb-*-release'):
        prio= 2
    elif b in main_branches + ["mariadb-3.x", "mariadb-4.x"]:
        prio= 1
    elif fnmatch.fnmatch(b, 'hf-*'): # HotFix branches
        prio= 2
    else:
        prio= 0
    if best_r is None or prio > best_prio:
        best_r= r
        best_prio= prio
  return best_r

# Some builders only run in main trees.
mainTreesList10_6Plus = ["10.6", "bb-10.6-release", "bb-10.6-monty", "bb-10.6-MDEV-28583",
                         "10.7", "bb-10.7-release",
                         "10.8", "bb-10.8-release",
                         "10.9", "bb-10.9-release", "bb-10.9-mcs",
                         "10.10", "bb-10.10-release"
                        ]
mainTreesList10_5Plus = ["10.5", "bb-10.5-release", "bb-10.5-galera",
                         "bb-10.5-wlad",
                        ] + mainTreesList10_6Plus
mainTreesList10_4Plus = ["10.4", "bb-10.4-release", "bb-10.4-galera",
                        ] + mainTreesList10_5Plus
mainTreesList10_3Plus = ["10.3", "bb-10.3-release",
                         "bb-10.3-galera", "bb-10.3-MDEV-26009", "bb-10.3-MDEV-28583",
                         ] + mainTreesList10_4Plus
mainTreesList10_2Plus = ["10.2", "bb-10.2-release", "bb-10.2-galera",
                         ] + mainTreesList10_3Plus
mainTreesList = mainTreesList10_2Plus

def isMainTree(step):
  return step.getProperty("branch") in mainTreesList

def isMainTree10_6Plus(step):
  return step.getProperty("branch") in mainTreesList10_6Plus

def isMainTree10_5Plus(step):
  return step.getProperty("branch") in mainTreesList10_5Plus

def isMainTree10_4Plus(step):
  return step.getProperty("branch") in mainTreesList10_4Plus

def isMainTree10_3Plus(step):
  return step.getProperty("branch") in mainTreesList10_3Plus

def isMainTree10_2Plus(step):
  return step.getProperty("branch") in mainTreesList10_2Plus

def branch_is_10_x(step):
  return re.search("(10\\.[0-9])|jessie", step.getProperty("branch"))

def branch_is_10_3_or_later(step):
  return re.search("10\\.[3-9]|10\\.[1-9][0-9]", step.getProperty("branch"))

def branch_is_10_4_or_later(step):
  return re.search("10\\.[4-9]|10\\.[1-9][0-9]", step.getProperty("branch"))

def branch_is_10_5_or_later(step):
  return re.search("10\\.[5-9]|10\\.[1-9][0-9]", step.getProperty("branch"))

def branch_is_10_6_or_later(step):
  return re.search("10\\.[6-9]|10\\.[1-9][0-9]", step.getProperty("branch"))

def branch_is_10_8_or_later(step):
  return re.search("10\\.[8-9]|10\\.[1-9][0-9]", step.getProperty("branch"))

def branch_is_10_9_or_later(step):
  return re.search("10\\.9|10\\.[1-9][0-9]", step.getProperty("branch"))

def branch_is_not_galera(step):
  return "galera" not in step.getProperty("branch")

def branch_is_not_connector(step):
  return "mariadb-connector" not in step.getProperty("branch")

# Trees for Debian Packaging quality assurance
debpkgBranches= ["ok-*", "jessie", "jessie-*"]

def debpkg_branch(step):
  return fnmatch_any(step.getProperty("branch"), debpkgBranches)

def rpm_test_branch(step):
  return "-rpm-" in step.getProperty("branch")

# Some additional new images are maintained to build Galera package.
def getGaleraBuildImage(kvm_image) :
  imagelist = ("vm-sid-amd64",
               "vm-sid-i386",
               "vm-trusty-amd64",
               "vm-trusty-i386",
               "vm-centos5-amd64",
               "vm-centos5-i386",
               "vm-sles11sp1-amd64",)
  found = any(kvm_image in image for image in imagelist)
  if found:
      kvm_build_image=kvm_image + "-galera"
  else:
      kvm_build_image=kvm_image + "-build"
  return kvm_build_image


####### SCHEDULERS

myMainBuilders = [
#    "win32-debug",
#    "winx64-debug",
    ]

# has been down for a long time
#myPower8Builders = [
#     "p8-suse12-rpm"
#    ]

myNonSystemdBuilders = [
    "kvm-zyp-sles11-amd64"
    ,"kvm-zyp-sles11-x86"
    ,"kvm-zyp-sles114-amd64"
    ,"kvm-zyp-sles114-x86"
    ]

default_branch_filter = BranchFilter(on_github=gitBranches)
from buildbot.scheduler import AnyBranchScheduler, Triggerable
c['schedulers'] = []
c['schedulers'].append(AnyBranchScheduler(
    name="mariadb",
    change_filter=default_branch_filter,
    treeStableTimer=60,
    builderNames=myMainBuilders))

c['schedulers'].append(AnyBranchScheduler(
    name="connector_odbc_current",
    change_filter=BranchFilter(on_github={"https://github.com/mariadb-corporation/mariadb-connector-odbc" : ("master", "develop")}),
    treeStableTimer=60,
    builderNames=[
                  "codbc-centos7-x86", "codbc-centos7-amd64",
                  "codbc-centos8-amd64", "codbc-centos8-amd64-rpm", "codbc-centos8-x86",
                  "codbc-rhel9-amd64",
                  "codbc-stretch-amd64", "codbc-bionic-amd64", "codbc-focal-amd64", "codbc-focal-amd64-deb",
                  "codbc-impish-amd64", "codbc-jammy-amd64", "codbc-buster-amd64", 
                  "codbc-sles15-amd64", "codbc-sles12-amd64", "codbc-macos",
                  "codbc-fedora34-amd64", "codbc-fedora35-amd64", "codbc-fedora36-amd64",
                  "codbc-source-package", "codbc-windows",
                  ]))
#c['schedulers'].append(AnyBranchScheduler(
#    name="connector_odbc_maintenance",
#    change_filter=BranchFilter(on_github={"https://github.com/MariaDB-Corporation/mariadb-connector-odbc" : ("odbc-2.0")}),
#    treeStableTimer=60,
#    builderNames=[
#                  #"linux_x64-connector-odbc",
#                  "codbc-source-package",
#                  ]))
c['schedulers'].append(AnyBranchScheduler(
    name="connector_cpp",
    change_filter=BranchFilter(on_github={"https://github.com/mariadb-corporation/mariadb-connector-cpp" : ("master", "develop")}),
    treeStableTimer=60,
    builderNames=[
      "ccpp-centos7-amd64",
      "ccpp-centos8-amd64",
      "ccpp-rhel9-amd64",
      "ccpp-stretch-amd64", "ccpp-bionic-amd64", "ccpp-focal-amd64",
      "ccpp-impish-amd64", "ccpp-jammy-amd64", "ccpp-buster-amd64",
      "ccpp-sles15-amd64", "ccpp-sles12-amd64", 
      "ccpp-fedora34-amd64", "ccpp-fedora35-amd64", "ccpp-fedora36-amd64",
      "ccpp-source-package", "ccpp-windows"
                  ]))

c['schedulers'].append(AnyBranchScheduler(
    name="connector-c",
    change_filter=BranchFilter(on_github={"https://github.com/mariadb-corporation/mariadb-connector-c" : ("connector_c_2.3")}),
    treeStableTimer=60,
    builderNames=[
                  "win-connector_c"
                  ,"freebsd_x64-connector_c"
                  ,"freebsd11_x64-connector_c"
                  ,"freebsd11_x86-connector_c"
                  ]))

c['schedulers'].append(AnyBranchScheduler(
    name="connector-c-3",
    change_filter=BranchFilter(on_github={"https://github.com/mariadb-corporation/mariadb-connector-c" : ("master", "connector_c_3.0", "3.0", "3.1", "3.2", "bb-*")}),
    treeStableTimer=60,
    builderNames=[
                  "win-connector_c_3"
                  ,"freebsd11_x64-connector_c"
                  ,"freebsd11_x86-connector_c"
                  ,"cc-centos7-amd64"
                  ,"cc-centos8-amd64"
                  ,"cc-rhel9-amd64"
                  ,"cc-bionic-amd64"
                  ,"cc-focal-amd64"
                  ,"cc-impish-amd64"
                  ,"cc-jammy-amd64"
                  ,"cc-stretch-amd64"
                  ,"cc-buster-amd64"
                  ,"cc-fedora34-amd64"
                  ,"cc-fedora35-amd64"
                  ,"cc-fedora36-amd64"
                  ,"cc-sles12-amd64"
                  ,"cc-sles15-amd64"
                  ]))

# A scheduler for creating tarballs
c['schedulers'].append(AnyBranchScheduler(
    name="tarbake",
    change_filter=default_branch_filter,
    treeStableTimer=60,
    builderNames=["kvm-tarbake-jaunty-x86"]))

# A scheduler for running those of the kvm-based builders that are run in
# all trees.
c['schedulers'].append(Triggerable(
        name="kvm-sched-alltrees",
        builderNames=[
#                      "vm-amd64-valgrind",
                      "kvm-fulltest",
                      "kvm-fulltest2",
                      "fulltest-debug-big-only",
                      "winx64-packages",
                      "winx64-debug",
                      "kvm-rpm-centos73-ppc64",
                      "kvm-rpm-centos74-aarch64",
                      "kvm-rpm-centos74-amd64",
                      ]))
# A scheduler for running those of the kvm-based builders that are run only
# in main trees.
c['schedulers'].append(Triggerable(
        name="kvm-sched-mainonly",
        builderNames=[
# has been off for a long time
#                      "work-amd64-valgrind",
# have been off for a long time
#                      "bld-starfs-debug", "bld-starfs-release",
#                      "bld-starfs-minimal",
                      "kvm-bld-nopart-debug", "kvm-bld-noperfschema",
                      "kvm-bld-minimal",
                      "kvm-rpm-centos73-ppc64le",
# Replaced with sles125
#                      "kvm-zyp-sles123-amd64",
                      "kvm-zyp-sles125-amd64",
# has been offline for years
#                      "kvm-fulltest2-big",
#                      "win32-debug",
#                      "win32-packages",
                      ]))

c['schedulers'].append(Triggerable(
        name="kvm-sched-not-10.3+",
        builderNames=[
                      "kvm-bintar-centos5-amd64",
                      "kvm-bintar-centos5-x86",
                      ]))

c['schedulers'].append(Triggerable(
        name="kvm-sched-not-10.5+",
        builderNames=[
                      "kvm-bintar-quantal-x86",
                      "kvm-bintar-quantal-amd64",
                      ]))

c['schedulers'].append(Triggerable(
        name="kvm-sched-not-10.6+",
        builderNames=[
                      "kvm-bintar-centos6-amd64",
                      "kvm-bintar-centos6-x86",
                      "kvm-bintar-trusty-x86",
                      "kvm-bintar-trusty-amd64",
                      ]))

# A scheduler for running kvm-based builders that are run only in 10.8 or later.
c['schedulers'].append(Triggerable(
        name="kvm-sched-10.8+",
        builderNames=[
                      "openssl3-fips-debug",
                      "openssl3-nofips-debug",
                      "kvm-rpm-fedora666-amd64",
                      ]))

# A scheduler for running kvm-based builders that are run only in 10.6 or later.
c['schedulers'].append(Triggerable(
        name="kvm-sched-10.6+",
        builderNames=[
                      "kvm-bintar-centos74-amd64",
                      "kvm-deb-sid-amd64", "kvm-deb-sid-x86",
                      "kvm-ubsan",
                      ]))

# A scheduler for running kvm-based builders that are run only in 10.3 or later.
c['schedulers'].append(Triggerable(
        name="kvm-sched-10.3+",
        builderNames=[
                      "kvm-ports-freebsd130-amd64",
                      "kvm-deb-focal-amd64",
                      ]))

# A scheduler for running kvm-based builders that are run only in main trees,
# and only in 10.6 or later.
c['schedulers'].append(Triggerable(
        name="kvm-sched-mainonly-10.6+",
        builderNames=[
                      "kvm-deb-jammy-amd64",
                      "kvm-rpm-fedora36-amd64",
                      "kvm-rpm-rhel9-amd64",
                      ]))

# A scheduler for running kvm-based builders that are run only in main trees,
# and only in 10.5 or later.
c['schedulers'].append(Triggerable(
        name="kvm-sched-mainonly-10.5+",
        builderNames=[
                      "kvm-deb-bullseye-amd64",
                      "kvm-deb-impish-amd64",
                      "kvm-rpm-fedora34-amd64",
                      "kvm-rpm-fedora35-amd64",
#                      "kvm-rpm-fedora-rawhide-amd64",
                      ]))

# A scheduler for running kvm-based builders that are run only in main trees,
# and only in 10.4 or later.
c['schedulers'].append(Triggerable(
        name="kvm-sched-mainonly-10.4+",
        builderNames=[
                      ]))

# A scheduler for running kvm-based builders that are run only in main trees,
# and only in 10.3 or later.
c['schedulers'].append(Triggerable(
        name="kvm-sched-mainonly-10.3+",
        builderNames=[
                      "kvm-rpm-rhel8-amd64",
                      "kvm-rpm-rhel8-ppc64le",
#                      "kvm-rpm-centos8-amd64",
                      "kvm-rpm-rocky84-amd64",
                      "kvm-rpm-alma84-amd64",
                      "kvm-deb-buster-amd64",
                      "kvm-deb-buster-ppc64le",
                      "kvm-deb-buster-aarch64",
# Moved to kvm-sched-10.3+ (all trees, not just main)
#                      "kvm-deb-focal-amd64",
                      "kvm-deb-focal-ppc64le",
                      "kvm-ports-freebsd123-amd64",
                      "kvm-deb-focal-aarch64",
                      ]))

# A scheduler for running those of the kvm-based builders that are run only
# in main trees, and only in 10.3
c['schedulers'].append(Triggerable(
        name="kvm-sched-mainonly-10.3",
        builderNames=[
                      "kvm-bintar-centos6-amd64-openssl",
                      "kvm-bintar-centos7-amd64-openssl",
                      ]))

# A scheduler for running those of the kvm-based builders that are run only
# in main trees, and only in 10.2 or later.
c['schedulers'].append(Triggerable(
        name="kvm-sched-mainonly-10.2+",
        builderNames=[
                      "kvm-asan",
                      "kvm-deb-bionic-aarch64",
                      "kvm-deb-bionic-amd64",
                      "kvm-deb-bionic-ppc64le",
                      "kvm-deb-stretch-aarch64",
                      "kvm-deb-stretch-amd64",
                      "kvm-deb-stretch-ppc64le",
                      "kvm-deb-stretch-x86",
# has been offline for years
#                      "kvm-fulltest-big",
                      "kvm-rpm-centos74-amd64-debug",
                      "kvm-zyp-opensuse150-amd64",
                      "kvm-zyp-sles150-amd64",
                      ]))

# A scheduler for running those of the kvm-based builders that are run only
# in main trees, and only in 10.2
c['schedulers'].append(Triggerable(
        name="kvm-sched-mainonly-10.2",
        builderNames=[
                      "kvm-bintar-centos6-amd64-debug",
                      "kvm-bintar-centos7-amd64-openssl",
                      ]))

# Created on 2017-11-18 by Elena
# to have stretch built for non-main 10.2+ trees instead of sid,
# which does not build for 5.5/10.0, and is experimental anyway
c['schedulers'].append(Triggerable(
        name="kvm-sched-devtrees-10.2+",
        builderNames=[
                      "kvm-deb-stretch-amd64",
                      ]))

# execfile("/etc/buildbot/builders/qa/qa_schedulers.py");

#
# A scheduler for building Galera packages
#
myGaleraBuilders = [
                    "kvm-rpm-centos73-ppc64-gal",
                    "kvm-rpm-centos73-ppc64le-gal",
                    "kvm-rpm-centos74-aarch64-gal",
                    "kvm-rpm-centos74-amd64-gal",
#                    "kvm-rpm-fedora-rawhide-amd64-gal",
                    "kvm-rpm-fedora666-amd64-gal",
                    "kvm-rpm-fedora36-amd64-gal",
                    "kvm-rpm-fedora35-amd64-gal",
                    "kvm-rpm-fedora34-amd64-gal",
                    "kvm-rpm-rhel9-amd64-gal",
                    "kvm-rpm-rhel8-amd64-gal",
                    "kvm-rpm-rhel8-ppc64le-gal",
#                    "kvm-rpm-centos8-amd64-gal",
#                    "kvm-src-centos8-amd64-gal",
                    "kvm-rpm-rocky84-amd64-gal",
                    "kvm-rpm-alma84-amd64-gal",

                    "kvm-deb-trusty-amd64-gal", "kvm-deb-trusty-x86-gal",
                    "kvm-deb-bionic-amd64-gal",
                    "kvm-deb-bionic-ppc64le-gal",
                    "kvm-deb-bionic-aarch64-gal",
                    "kvm-deb-focal-amd64-gal",
                    "kvm-deb-focal-ppc64le-gal",
                    "kvm-deb-focal-aarch64-gal",
                    "kvm-deb-impish-amd64-gal",
                    "kvm-deb-jammy-amd64-gal",
                    "kvm-deb-stretch-amd64-gal", "kvm-deb-stretch-x86-gal",
                    "kvm-deb-stretch-ppc64le-gal",
                    "kvm-deb-stretch-aarch64-gal",
                    "kvm-deb-bullseye-amd64-gal",
                    "kvm-deb-buster-amd64-gal",
                    "kvm-deb-buster-ppc64le-gal",
                    "kvm-deb-buster-aarch64-gal",
                    "kvm-deb-sid-amd64-gal", "kvm-deb-sid-x86-gal",

                    "kvm-zyp-opensuse150-amd64-gal",
# Replaced with sles125
#                    "kvm-zyp-sles123-amd64-gal",
                    "kvm-zyp-sles125-amd64-gal",
                    "kvm-zyp-sles150-amd64-gal",

# has been down for a long time
#                    # Power8
#                    "p8-suse12-rpm-gal",

                   ]


c['schedulers'].append(AnyBranchScheduler(
    name="galera",
    treeStableTimer=60,
    change_filter=BranchFilter(on_github=
      {
        "https://github.com/MariaDB/galera":
        (
          "mariadb-3.x",
          "mariadb-3.x-*",
          "mariadb-4.x",
          "mariadb-4.x-*",
          "bb-3x-*",
          "bb-4x-*",
        ),
        "git@github.com:mariadb-corporation/es-galera":
        (
          "es-mariadb-4.x",
          "es-mariadb-3.x",
        )
      }),
    builderNames=myGaleraBuilders))

#
# a scheduler for testing debian packaging: all deb builders, nothing else
#

c['schedulers'].append(Triggerable(
        name="kvm-sched-debpkg-trees",
        builderNames=[
                      "kvm-deb-stretch-amd64", "kvm-deb-stretch-x86",
                      "kvm-deb-stretch-ppc64le",
                      "kvm-deb-stretch-aarch64",
                      "kvm-deb-sid-amd64",     "kvm-deb-sid-x86",
                      "kvm-deb-bullseye-amd64",
                      "kvm-deb-buster-amd64",
                      "kvm-deb-buster-ppc64le",
                      "kvm-deb-buster-aarch64",
                      "kvm-deb-bionic-amd64",
                      "kvm-deb-bionic-ppc64le",
                      "kvm-deb-bionic-aarch64",
                      "kvm-deb-focal-amd64",
                      "kvm-deb-focal-ppc64le",
                      "kvm-deb-focal-aarch64",
                      "kvm-deb-impish-amd64",
                      "kvm-deb-jammy-amd64",
                      ]))

c['schedulers'].append(Triggerable(
        name="kvm-sched-rpm-test-trees",
        builderNames=[
                      "kvm-rpm-centos73-ppc64",
                      "kvm-rpm-centos73-ppc64le",
                      "kvm-rpm-centos74-aarch64",
                      "kvm-rpm-centos74-amd64",
#                      "kvm-rpm-fedora-rawhide-amd64",
                      "kvm-rpm-fedora666-amd64",
                      "kvm-rpm-fedora36-amd64",
                      "kvm-rpm-fedora35-amd64",
                      "kvm-rpm-fedora34-amd64",
                      "kvm-rpm-rhel9-amd64",
                      "kvm-rpm-rhel8-amd64",
                      "kvm-rpm-rhel8-ppc64le",
#                      "kvm-rpm-centos8-amd64",
                      "kvm-rpm-rocky84-amd64",
                      "kvm-rpm-alma84-amd64",
                      "kvm-zyp-opensuse150-amd64",
                      "kvm-zyp-sles11-amd64",
                      "kvm-zyp-sles11-x86",
                      "kvm-zyp-sles114-amd64",
                      "kvm-zyp-sles114-x86",
# Replaced with sles125
#                      "kvm-zyp-sles123-amd64",
                      "kvm-zyp-sles125-amd64",
                      "kvm-zyp-sles150-amd64",
                      ]))


# setup the force scheduler (added for buildbot 0.8.8)
from buildbot.schedulers.forcesched import ForceScheduler

c['schedulers'].append(ForceScheduler(
                        name="force",
                        builderNames=[
# have been down for a long time
#                          "bld-starfs-debug"
#                          ,"bld-starfs-release"
#                          ,"bld-starfs-minimal"
                           "kvm-bld-nopart-debug"
                          ,"kvm-bld-noperfschema"
                          ,"kvm-bld-minimal"
                          ,"kvm-bintar-centos5-amd64"
                          ,"kvm-bintar-centos5-x86"
                          ,"kvm-bintar-centos6-amd64"
                          ,"kvm-bintar-centos6-x86"
                          ,"kvm-bintar-centos74-amd64"
                          ,"kvm-bintar-centos7-amd64-openssl"
                          ,"kvm-bintar-centos6-amd64-openssl"
                          ,"kvm-bintar-centos6-amd64-debug"
                          ,"kvm-bintar-quantal-amd64"
                          ,"kvm-bintar-quantal-x86"
                          ,"kvm-bintar-trusty-amd64"
                          ,"kvm-bintar-trusty-x86"
                          ,"kvm-deb-sid-amd64"
                          ,"kvm-deb-sid-amd64-gal"
                          ,"kvm-deb-sid-x86"
                          ,"kvm-deb-sid-x86-gal"
                          ,"kvm-deb-stretch-amd64"
                          ,"kvm-deb-stretch-amd64-gal"
                          ,"kvm-deb-stretch-x86"
                          ,"kvm-deb-stretch-x86-gal"
                          ,"kvm-deb-stretch-ppc64le"
                          ,"kvm-deb-stretch-ppc64le-gal"
                          ,"kvm-deb-stretch-aarch64"
                          ,"kvm-deb-stretch-aarch64-gal"
                          ,"kvm-deb-trusty-amd64-gal"
                          ,"kvm-deb-trusty-x86-gal"
                          ,"kvm-deb-bionic-amd64"
                          ,"kvm-deb-bionic-amd64-gal"
                          ,"kvm-deb-bionic-ppc64le"
                          ,"kvm-deb-bionic-ppc64le-gal"
                          ,"kvm-deb-bionic-aarch64"
                          ,"kvm-deb-bionic-aarch64-gal"
                          ,"kvm-deb-focal-amd64"
                          ,"kvm-deb-focal-amd64-gal"
                          ,"kvm-deb-focal-ppc64le"
                          ,"kvm-deb-focal-ppc64le-gal"
                          ,"kvm-deb-focal-aarch64"
                          ,"kvm-deb-focal-aarch64-gal"
                          ,"kvm-deb-impish-amd64"
                          ,"kvm-deb-impish-amd64-gal"
                          ,"kvm-deb-jammy-amd64"
                          ,"kvm-deb-jammy-amd64-gal"
                          ,"kvm-deb-bullseye-amd64"
                          ,"kvm-deb-bullseye-amd64-gal"
                          ,"kvm-deb-buster-amd64"
                          ,"kvm-deb-buster-amd64-gal"
                          ,"kvm-deb-buster-ppc64le"
                          ,"kvm-deb-buster-ppc64le-gal"
                          ,"kvm-ports-freebsd123-amd64"
                          ,"kvm-ports-freebsd130-amd64"
                          ,"kvm-deb-buster-aarch64"
                          ,"kvm-deb-buster-aarch64-gal"
                          ,"kvm-fulltest"
# has been offline for years
#                          ,"kvm-fulltest-big"
                          ,"kvm-fulltest2"
# has been offline for years
#                          ,"kvm-fulltest2-big"
                          ,"fulltest-debug-big-only"
                          ,"kvm-asan"
                          ,"kvm-ubsan"
                          ,"kvm-rpm-centos73-ppc64"
                          ,"kvm-rpm-centos73-ppc64-gal"
                          ,"kvm-rpm-centos73-ppc64le"
                          ,"kvm-rpm-centos73-ppc64le-gal"
                          ,"kvm-rpm-centos74-aarch64"
                          ,"kvm-rpm-centos74-aarch64-gal"
                          ,"kvm-rpm-centos74-amd64"
                          ,"kvm-rpm-centos74-amd64-debug"
                          ,"kvm-rpm-centos74-amd64-gal"
#                          ,"kvm-rpm-fedora-rawhide-amd64"
#                          ,"kvm-rpm-fedora-rawhide-amd64-gal"
                          ,"kvm-rpm-fedora666-amd64"
                          ,"kvm-rpm-fedora666-amd64-gal"
                          ,"kvm-rpm-fedora36-amd64"
                          ,"kvm-rpm-fedora36-amd64-gal"
                          ,"kvm-rpm-fedora35-amd64"
                          ,"kvm-rpm-fedora35-amd64-gal"
                          ,"kvm-rpm-fedora34-amd64"
                          ,"kvm-rpm-fedora34-amd64-gal"
                          ,"kvm-rpm-rhel9-amd64"
                          ,"kvm-rpm-rhel9-amd64-gal"
                          ,"kvm-rpm-rhel8-amd64"
                          ,"kvm-rpm-rhel8-amd64-gal"
                          ,"kvm-rpm-rhel8-ppc64le"
                          ,"kvm-rpm-rhel8-ppc64le-gal"
                          ,"kvm-rpm-centos8-amd64"
                          ,"kvm-rpm-centos8-amd64-gal"
                          ,"kvm-src-centos8-amd64-gal"
                          ,"kvm-rpm-rocky84-amd64"
                          ,"kvm-rpm-rocky84-amd64-gal"
                          ,"kvm-rpm-alma84-amd64"
                          ,"kvm-rpm-alma84-amd64-gal"
                          ,"kvm-tarbake-jaunty-x86"
                          ,"kvm-zyp-opensuse150-amd64"
                          ,"kvm-zyp-opensuse150-amd64-gal"
# As of 2017-01-12, we've decided to stop building SLES11 packages
# but let's keep it for the "force" scheduler
                          ,"kvm-zyp-sles11-amd64"
                          ,"kvm-zyp-sles11sp1-amd64"
                          ,"kvm-zyp-sles11-x86"
                          ,"kvm-zyp-sles114-x86"
                          ,"kvm-zyp-sles114-amd64"
# Replaced with sles125
#                          ,"kvm-zyp-sles123-amd64"
                          ,"kvm-zyp-sles125-amd64"
                          ,"kvm-zyp-sles150-amd64"
                          ,"freebsd_x64-connector_c"
                          ,"freebsd11_x64-connector_c"
                          ,"freebsd11_x86-connector_c"
                          ,"cc-centos7-amd64"
                          ,"cc-centos8-amd64"
                          ,"cc-rhel9-amd64"
                          ,"cc-bionic-amd64"
                          ,"cc-focal-amd64"
                          ,"cc-impish-amd64"
                          ,"cc-jammy-amd64"
                          ,"cc-stretch-amd64"
                          ,"cc-buster-amd64"
                          ,"cc-fedora34-amd64"
                          ,"cc-fedora35-amd64"
                          ,"cc-fedora36-amd64"
                          ,"cc-sles12-amd64"
                          ,"cc-sles15-amd64"
                          #,"linux_x64-connector-odbc"
                          ,"codbc-source-package"
                          ,"codbc-centos7-x86"
                          ,"codbc-centos7-amd64"
                          ,"codbc-centos8-amd64"
                          ,"codbc-centos8-amd64-rpm"
                          ,"codbc-centos8-x86"
                          ,"codbc-rhel9-amd64"
                          ,"codbc-stretch-amd64"
                          ,"codbc-sles15-amd64"
                          ,"codbc-sles15-amd64-notest"
                          ,"codbc-bionic-amd64"
                          ,"codbc-focal-amd64"
                          ,"codbc-focal-amd64-deb"
                          ,"codbc-impish-amd64"
                          ,"codbc-jammy-amd64"
                          ,"codbc-macos"
                          ,"codbc-buster-amd64"
                          ,"codbc-fedora34-amd64"
                          ,"codbc-fedora35-amd64"
                          ,"codbc-fedora36-amd64"
                          ,"codbc-sles12-amd64"
                          ,"codbc-windows"
                          ,"codbc-windows-gnutls"
# has been down for a long time
#                          ,"p8-suse12-rpm"
#                          ,"p8-suse12-rpm-gal"
                          ,"winx64-debug"
                          ,"winx64-packages"
#                          ,"win32-debug"
#                          ,"win32-packages"
                          ,"win-connector_c"
                          ,"win-connector_c_3"
                          ,"ccpp-centos8-amd64"
                          ,"ccpp-rhel9-amd64"
                          ,"ccpp-stretch-amd64"
                          ,"ccpp-sles15-amd64"
                          ,"ccpp-bionic-amd64"
                          ,"ccpp-focal-amd64"
                          ,"ccpp-impish-amd64"
                          ,"ccpp-jammy-amd64"
                          ,"ccpp-buster-amd64"
                          ,"ccpp-fedora34-amd64"
                          ,"ccpp-fedora35-amd64"
                          ,"ccpp-fedora36-amd64"
                          ,"ccpp-sles12-amd64"
                          ,"ccpp-centos7-amd64"
                          ,"ccpp-windows"
                          ,"ccpp-source-package"
# has been off for a long time
#                          ,"work-amd64-valgrind"
#                          ,"vm-amd64-valgrind"
                          ]))

# Has been down for a long time or never up
#docker_test_branches = {
#    "https://github.com/MariaDB/server" :
#      (
#        "vic*",
#      ),
#}

## A scheduler for creating tarballs
#c['schedulers'].append(AnyBranchScheduler(
#    name="docker",
#    change_filter=default_branch_filter,
#    treeStableTimer=15,
#    builderNames=["bld-p9-rhel7"]))


# Prioritize the builders that trigger other builds.
# This avoids getting into a situation where we have free slave resources
# waiting for a triggering build to finish.
# We don't do much else, as we want to avoid starving some builders;
# it is usually more important to prioritize by branch than by builder.
# Note that this relies on Python sort being a stable sort, so default
# order from Buildbot is kept. This is guaranteed from Python 2.2.

from twisted.python import log
from twisted.internet import defer
@defer.inlineCallbacks
def prioritizeBuilders(buildmaster, builders):

    # For tarbake priority is 0, which will be the highest.
    # For the rest priority is the oldest request time,
    # the earlier time, the higher priority.
    # Builders which don't have requests will return None
    # which will go last
    def builder_prio_sort_key(b):
        if b.name == "kvm-tarbake-jaunty-x86":
            return 0
        else:
            return b.getOldestRequestTime()

    def xform(bldr):
        d = defer.maybeDeferred(lambda: builder_prio_sort_key(bldr))
        d.addCallback(lambda prio: (prio, bldr))
        return d

    xformed = yield defer.gatherResults(
       [xform(bldr) for bldr in builders])

    # The value is 0 if it is a tarbake, we put it first.
    # None goes last, as it does in the default sorter.
    # Real values are compared
    def tweakedcmp(a, b):
        if a[0] == 0 or b[0] is None:
            return -1
        if b[0] == 0 or a[0] is None:
            return 1
        return cmp(a, b)
    xformed.sort(cmp=tweakedcmp)

    rv = [xf[1] for xf in xformed]
    log.msg("Prioritized builders", rv)
    defer.returnValue(rv)


c['prioritizeBuilders'] = prioritizeBuilders

####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

import re
from buildbot.process import factory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand, Compile, Test, SetPropertyFromCommand
from buildbot.process.mtrlogobserver import MTR, MtrLogObserver, EqConnectionPool
from buildbot.steps.transfer import FileUpload, FileDownload, DirectoryUpload
from buildbot.process.properties import WithProperties, Property
from buildbot.steps.trigger import Trigger

gccWarningPattern= "^(.*?):([0-9]+):(?:[0-9]+:)? [Ww]arning: (.*)$"
vsWarningPattern= "^(?:\s*>[0-9]+)?\s*([^)]*?)\\(([0-9]+)\\)\s*:\s*warning\s*[-_a-zA-Z0-9]+\s*:\s*(.*)$"
testWarningPattern= "^Test warning: (.*)$"

def getCompileStep(cmd, subdir="", **kwargs):
    return Compile(command=cmd,
                   warningPattern=gccWarningPattern,
                   warningExtractor=Compile.warnExtractFromRegexpGroups,
                   suppressionFile=WithProperties(subdir + "support-files/compiler_warnings.supp"),
                   **kwargs
                   )

# The private config file instantiates an instance of EqConnectionPool("MySQLdb", ...)
# with the correct database account password etc.
connection_pool = configDict["cfg"]["connectionPool"]

def getMTR(**kwargs):
    return MTR(
        dbpool=connection_pool,
        warningPattern="MTR's internal check of the test case '.*' failed|Failing test\(s\):.*|\*\*\*Warnings generated in error logs.*|Test warning:.*",
        **kwargs)

git_checkout = Git(repourl=Property('repository'),
                   mode="copy",
                   retry=(10,3),
                   timeout = 6*3600,
                   )

def getport():
    getport.port = getport.port + getport.inc
    getport.inc = 0
    return str(getport.port)

def BuildFactory():
    getport.inc = 1
    return factory.BuildFactory()

# start allocating ports from this one:
getport.port = 2222

# has been off for a long time
#valgf = BuildFactory()
#valgf.addStep(git_checkout)
#valgf.addStep(ShellCommand(
#        description=["cleanup"],
#        descriptionDone=["cleanup"],
#        command=["sh", "-c", WithProperties("""
#rm -rf /dev/shm/var_auto_*
##PATH=/mnt/data/buildot/valgrind-3.12/bin:$PATH
#valgrind --version
#""")]))
#
## Removed -DWITH_SSL=bundled from the line below to allow 10.2 to build
#valgf.addStep(getCompileStep(["sh", "-c", "cmake . -DCMAKE_BUILD_TYPE=Debug -DWITH_VALGRIND=1 &&  make -j8"],
#                          env={"EXTRA_FLAGS": "-O3 -fno-omit-frame-pointer -Wno-uninitialized -fno-strict-aliasing",
#                               "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
#
## To keep execution time reasonable, only run all default suites for the main trees.
## For development trees, let's run only main now (can add something else later)
#
#valgf.addStep(getMTR(
#        doStepIf=isMainTree,
#        test_type="nm",
#        test_info="Valgrind run, no --ps-protocol, default suites",
#        timeout=9600,  # Longer than mtr timeout, which defaults to 9000 for Valgrind.
#        env={"NO_FEEDBACK_PLUGIN": "1"},
#        command=["sh", "-c", WithProperties("""
##export PATH=/mnt/data/buildot/valgrind-3.12/bin:$PATH
#cd mysql-test
## ,rpl,innodb,parts,maria,compat/oracle,vcol,plugins
#perl mysql-test-run.pl --verbose-restart --mem --parallel=8 --suite=main --valgrind="--show-reachable=yes --gen-suppressions=all" --force --max-test-fail=10 --max-save-core=0 --max-save-datadir=1
#""")],
#        parallel=8))
#
#bld_work_valgrind = {'name': "work-amd64-valgrind",
#                'slavename': "work-opensuse-amd64",
#                'builddir': "work-amd64-valgrind",
#                'factory': valgf,
#                "nextBuild": myNextBuild,
#                "category": "experimental",
#                }

# mac mini 2GB, 10.5

test_mac = getMTR(
    test_type="nm",
    test_info="Normal run, no --ps-protocol",
    env={"NO_FEEDBACK_PLUGIN": "1"},
    command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3  --max-save-core=0 --max-save-datadir=1"],
    )

# The trees for which we save binary packages.
savedPackageBranches= main_branches + [
                       "connector_c_2.3", "connector_c_3.0", "3.0", "3.1", "3.2", "3.3",
                       "connector_c_2.2", "2.1",
                       "odbc-2.0", "odbc-3.1", "master", "develop",
                       "hf-*", "bb-*-release", "preview-*",
                       "bb-10.5-wlad", "bb-10.5-elenst", "bb-10.3-MDEV-26009",
                       "bb-10.9-mcs", "bb-10.6-MDEV-28583", "bb-10.3-MDEV-28583",
                       # Nirbhay : Galera branches
                       "mariadb-3.x", "mariadb-3.x-*", "mariadb-4.x", "mariadb-4.x-*", "es-mariadb-4.x", "es-mariadb-3.x", "bb-3x-*", "bb-4x-*",]

def in_savedPackageBranches(step):
    return fnmatch_any(step.getProperty("branch"), savedPackageBranches)

def do_step_always(step):
    return True

def do_step_never(step):
    return False

def in_systemdBuilders(step):
    return not fnmatch_any(step.getProperty("buildername"), myNonSystemdBuilders)

# Add build steps that will archive binary packages (or source tarball).
# Relies on external cron job to periodically remove old files.
# The packages are saved under the build number of the tarbake step, so it is
# easy to locate all packages for a given release.
#
# The `sources' argument can contain multiple file names separated by spaces
# (it is interpolated directly into a shell `mv' command); and WithProperties
# expansion is performed.
def addPackageArchiveStep(f, sources, tarbuildnum, do_step_if=do_step_never):
    f.addStep(ShellCommand(
        name="archive",
        description=["archiving"],
        descriptionDone=["archive"],
        doStepIf=(lambda(step): in_savedPackageBranches(step) or do_step_if(step)),
        command=["sh", "-c", WithProperties("""
set -ex
rm -Rf "./%(buildername)s"
mkdir -p "%(buildername)s"
""" + 'cp -rp ' + sources + ' "%(buildername)s/"\n' + """
cd "%(buildername)s"
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))
    f.addStep(DirectoryUpload(
        doStepIf=(lambda(step): in_savedPackageBranches(step) or do_step_if(step)),
        slavesrc=WithProperties("%(buildername)s"),
        masterdest=WithProperties("/ds1819/archive/pack/%(branch)s/build-" +
          tarbuildnum + "/%(buildername)s"),
        blocksize=524288,
        compress="gz"))

# A similar funtion to addPackageArchiveStep, but for use with uploading builds
# from builders that are not building from tarbake tarballs
# Places builds under /ds1819/archive/builds/
def addPackageUploadStep(f, sources, do_step_if=do_step_never):
    f.addStep(ShellCommand(
        description=["archiving"],
        descriptionDone=["archive"],
        doStepIf=(lambda(step): in_savedPackageBranches(step) or do_step_if(step)),
        command=["sh", "-c", WithProperties("""
set -ex
rm -Rf "./%(revision)s"
mkdir -vp "%(revision)s"
chmod -v 755 "%(revision)s"
""" + 'mv -vi ' + sources + ' "%(revision)s/"\n' + """
cd "%(revision)s"
if [ -e "`which md5sum`" ];then find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt;fi
find . -type f|xargs chmod 644
""")]))
    f.addStep(DirectoryUpload(
        doStepIf=(lambda(step): in_savedPackageBranches(step) or do_step_if(step)),
        slavesrc=WithProperties("%(revision)s"),
        masterdest=WithProperties("/ds1819/archive/builds/%(branch)s/%(revision)s/%(buildername)s"),
        blocksize=524288,
        compress="gz"))

def addPackageUploadStepWin(f, sources, do_step_if=do_step_never):
    f.addStep(DirectoryUpload(
        doStepIf=(lambda(step): in_savedPackageBranches(step) or do_step_if(step)),
        slavesrc=WithProperties("%(revision)s"),
        masterdest=WithProperties("/ds1819/archive/builds/%(branch)s/%(revision)s/%(buildername)s"),
        blocksize=524288,
        compress="gz"))

# scp options to work-around ssh warnings as we ssh into many different
# VMs with different host keys.
kvm_scpopt = "-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

f_kvm_tarbake_jaunty_x86= BuildFactory()

f_kvm_tarbake_jaunty_x86.addStep(SetPropertyFromCommand(
        property="server_branch_for_connector_c",
        command="echo 10.2",
    ))

f_kvm_tarbake_jaunty_x86.addStep(Compile(
        description=["making", "dist"],
        descriptionDone=["make", "dist"],
        timeout = 3600,
        logfiles={"kernel": "kernel_" + getport() + ".log"},
        env={"TERM": "vt102"},
        command=["runvm", "--port=" + getport(), "--memory="+memory_def,
                 "--user=buildbot", "-cpu=qemu64", "--smp=4",
                 "--logfile=kernel_" + getport() + ".log",
                 "/kvm/vms/vm-lucid-amd64-tarbake.qcow2",
        WithProperties("""
set -ex

rm -fv distdirname.txt mariadb-*.tar.gz
git init git
URL="%(repository)s"

cd ~/git
REMOTE=`git remote -v|grep "$URL.*fetch"|head -n 1|cut -f1`
if [ -z "$REMOTE" ]; then
  REPO=${URL#*github.com[:/]}
  REMOTE=${REPO/\//-}
  git remote add $REMOTE $URL
fi

git fetch --prune $REMOTE

# MDEV-17688 - buildbot to test latest C/C 3.0 branch with the latest server 10.2 branch
if [[ "$REMOTE" == "MariaDB-mariadb-connector-c" ]] && [[ "%(branch)s" == "3.0" ]]; then
  echo "MDEV-17688 - buildbot to test latest C/C 3.0 branch with the latest server 10.2 branch"
  echo "Clone the server instead of the connector"
  git remote add MariaDB-server https://github.com/MariaDB/server || true
  git fetch --prune MariaDB-server
  git checkout --force MariaDB-server/%(server_branch_for_connector_c)s
elif [ "$REMOTE" == "MariaDB-mariadb-connector-c" ]; then
  echo "Tarbake is not configured for $REMOTE branch %(branch)s"
  exit 1
else
  git checkout --force "%(revision)s"
  echo "Another attempt to solve the problem with the polluted submodule"
  ls -la libmariadb/ || true
  if [ -e extra/wolfssl/wolfssl ] ; then
    cd extra/wolfssl/wolfssl
    git fetch --tags || true
    cd ../../..
  fi
  git submodule deinit -f . || true
  ls -la libmariadb/ || true
  echo "... and since git on our tarbake machine is so old, it might not have deinit, so removing contents manually"
  rm -rf libmariadb
  mkdir libmariadb
fi
git clean -d -f -f -q -x
git reset --hard
ls -la libmariadb/ || true
mkdir mkdist
cd mkdist
cmake ..

if [ "$REMOTE" == "MariaDB-mariadb-connector-c" ]; then
  echo "MDEV-17688 - buildbot to test latest C/C 3.0 branch with the latest server 10.2 branch"
  echo "Replace libmariadb with the version under test"
  cd ..
  rm -rf libmariadb
  git clone $URL --branch "%(branch)s" libmariadb
  cd libmariadb
  git checkout --force "%(revision)s"
  cd ../mkdist
  cmake .. -DUPDATE_SUBMODULES=0
fi

echo "Connector/C version:"
find . -name mariadb_version.h | xargs grep -n MARIADB_PACKAGE_VERSION || true
make dist
basename mariadb-*.tar.gz .tar.gz > ~/distdirname.txt
mv -v "$(cat ~/distdirname.txt).tar.gz" ~/
"""),
        "= scp -v -P " + getport() + " " + kvm_scpopt + "  buildbot@localhost:distdirname.txt .",
        "= scp -v -P " + getport() + " " + kvm_scpopt + " 'buildbot@localhost:mariadb-*.tar.gz' .",
        ],
        ))
f_kvm_tarbake_jaunty_x86.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["cat", "distdirname.txt"],
        ))
addPackageArchiveStep(f_kvm_tarbake_jaunty_x86, '"%(distdirname)s.tar.gz"', "%(buildnumber)s")
f_kvm_tarbake_jaunty_x86.addStep(FileUpload(slavesrc=WithProperties("%(distdirname)s.tar.gz"),
                              masterdest=WithProperties("/var/lib/buildbot/OQ-tarballs/%(buildnumber)s:%(distdirname)s.tar.gz"),
                              blocksize=524288,
                              ))
myTriggerProperties= {
    "tarballpath": WithProperties("/var/lib/buildbot/OQ-tarballs/%(buildnumber)s:%(distdirname)s.tar.gz"),
    "distname": WithProperties("%(distdirname)s.tar.gz"),
    "tarbuildnum": WithProperties("%(buildnumber)s"),
    }

def makeTrigger(what, doif):
        return Trigger(schedulerNames=what,
                       doStepIf=doif,
                       waitForFinish=False,
                       updateSourceStamp=True,
                       set_properties=myTriggerProperties,
                       copy_properties=[ "distdirname" ])

f_kvm_tarbake_jaunty_x86.addStep(makeTrigger(["kvm-sched-mainonly"],
        isMainTree))
f_kvm_tarbake_jaunty_x86.addStep(makeTrigger(["kvm-sched-mainonly-10.6+"],
        isMainTree10_6Plus))
f_kvm_tarbake_jaunty_x86.addStep(makeTrigger(["kvm-sched-mainonly-10.5+"],
        isMainTree10_5Plus))
f_kvm_tarbake_jaunty_x86.addStep(makeTrigger(["kvm-sched-mainonly-10.4+"],
        isMainTree10_4Plus))
f_kvm_tarbake_jaunty_x86.addStep(makeTrigger(["kvm-sched-mainonly-10.3+"],
        isMainTree10_3Plus))
f_kvm_tarbake_jaunty_x86.addStep(makeTrigger(["kvm-sched-mainonly-10.3"],
        lambda(step): isMainTree10_3Plus(step) and "10.3" in step.getProperty("branch")))
f_kvm_tarbake_jaunty_x86.addStep(makeTrigger(["kvm-sched-mainonly-10.2+"],
        isMainTree10_2Plus))
f_kvm_tarbake_jaunty_x86.addStep(makeTrigger(["kvm-sched-mainonly-10.2"],
        lambda(step): isMainTree10_2Plus(step) and "10.2" in step.getProperty("branch")))
f_kvm_tarbake_jaunty_x86.addStep(makeTrigger(["kvm-sched-not-10.3+"],
        lambda(step): not branch_is_10_3_or_later(step)))
f_kvm_tarbake_jaunty_x86.addStep(makeTrigger(["kvm-sched-not-10.5+"],
        lambda(step): not branch_is_10_5_or_later(step)))
f_kvm_tarbake_jaunty_x86.addStep(makeTrigger(["kvm-sched-not-10.6+"],
        lambda(step): not branch_is_10_6_or_later(step)))
f_kvm_tarbake_jaunty_x86.addStep(makeTrigger(["kvm-sched-10.3+"],
        branch_is_10_3_or_later))
f_kvm_tarbake_jaunty_x86.addStep(makeTrigger(["kvm-sched-10.6+"],
        branch_is_10_6_or_later))
f_kvm_tarbake_jaunty_x86.addStep(makeTrigger(["kvm-sched-10.8+"],
        branch_is_10_8_or_later))
# Added by Elena on 2017-11-18, see comments in scheduler definition
f_kvm_tarbake_jaunty_x86.addStep(makeTrigger(["kvm-sched-devtrees-10.2+"],
        lambda(step): not isMainTree(step)))
f_kvm_tarbake_jaunty_x86.addStep(makeTrigger(["kvm-sched-alltrees"],
        lambda(step): not debpkg_branch(step) and not rpm_test_branch(step)))
f_kvm_tarbake_jaunty_x86.addStep(makeTrigger(["kvm-sched-debpkg-trees"],
        debpkg_branch))
f_kvm_tarbake_jaunty_x86.addStep(makeTrigger(["kvm-sched-rpm-test-trees"],
        rpm_test_branch))

# kvm-sched-qa-trees and isTargetQA are defined in qa_schedulers.py
#f_kvm_tarbake_jaunty_x86.addStep(makeTrigger(["kvm-sched-qa-trees"],
#        isTargetQA))

bld_kvm_tarbake_jaunty_x86 = {"name": "kvm-tarbake-jaunty-x86",
                              "slavenames": kvm11_slaves,
                              "builddir": "kvm-tarbake-jaunty-x86",
                              "factory": f_kvm_tarbake_jaunty_x86,
                              "nextBuild": myNextBuild,
                              "category": "main",
                             }

def DownloadSourceTarball():
    return ShellCommand(
             name="rsync_src",
             description=["rsyncing source tarball"],
             descriptionDone=["rsynced source tarball"],
             haltOnFailure=True,
             command=["sh", "-xc", WithProperties("""
  d=/tmp/buildcache
  f="%(tarbuildnum)s:%(distname)s"
  mkdir -p $d
  find $d -type f -mtime +2 | xargs -r rm -v
  #flock "$d/$f" rsync -v -c --stats "hasky.askmonty.org::OQ-tarballs/$f" "$d/$f"
  flock "$d/$f" rsync -v -c --stats "194.136.193.154::OQ-tarballs/$f" "$d/$f"
""")])

def ScpSourceIntoVM():
  return WithProperties("= scp -P " + getport() + " " + kvm_scpopt +
                        " /tmp/buildcache/%(tarbuildnum)s:%(distname)s buildbot@localhost:buildbot/%(distname)s")

# kvm_image, args, kvm_scpopt, distro, dist_name, dist_num, dist_arch come from the caller as is
# upgrade_from: text description of the "old" installation.
#               For MariaDB, Galera, Percona, and (Oracle) MySQL it should take the form "MySQL X.Y".
#               For packages provided by the distro it can be anything, as long as it understandable
#               ( it will show in the test description)
# old_packages: space-separated list of packages from the "old" version to be explicitly installed
# new_packages: space-separated list of packages under test to be installed or upgraded


# The builder requires DownloadSourceTarball, so we have to put it here
# rather than with another valgrind bulder
execfile("/etc/buildbot/builders/bld_xenial_valgrind.py");


from buildbot.status.builder import SKIPPED

def getPamStep(args, **kwargs):

    return Test(
        name="pam",
        haltOnFailure=False,
        description=["testing", "PAM", "authentication"],
        descriptionDone=["PAM", "authentication"],
        logfiles={"kernel": "kernel_"+getport()+".log"},
        env={"TERM": "vt102"},
#        doStepIf=(lambda(step): branch_is_10_4_or_later(step) and not branch_is_10_5_or_later(step)),
        doStepIf=branch_is_10_4_or_later,
        command=["runvm"] + args + ["--logfile=kernel_"+getport()+".log", "--base-image=vm-tmp-"+getport()+".qcow2", "vm-tmp2-"+getport()+".qcow2",
        WithProperties("""
set -xe

if ! which mysql ; then
  echo "ERROR: This step assumes that MariaDB has already been installed"
  exit 1
fi

if [ -e /etc/init.d/mysql ] ; then
  restart_cmd="/etc/init.d/mysql restart"
else
  systemctl --version
  sudo systemctl show mariadb | grep Capa || true
  restart_cmd="systemctl restart mariadb"
fi

restart_server()
{
  if ! sudo $restart_cmd ; then
    echo "ERROR: Server failed to restart"
    sudo journalctl -lxn 500 --no-pager
    exit 1
  fi
}

restart_server

plugindir=`sudo mysql -s -s -e 'select @@plugin_dir'`

set +e

res=0
echo > /tmp/result_text

#----------------
# Basic pam_unix
#----------------

set -e

sudo useradd bombalurina
sudo passwd bombalurina <<EOF
an1rul@bm0b
an1rul@bm0b
EOF

sudo tee /etc/pam.d/mariadb <<EOF
auth required pam_unix.so audit
account required pam_unix.so audit
EOF

# PAM v2

sudo mysql -e "INSTALL SONAME 'auth_pam'; CREATE USER 'bombalurina'@'localhost' IDENTIFIED VIA pam USING 'mariadb'"
if ! mysql -ubombalurina -pan1rul@bm0b -e "SHOW GRANTS" ; then
  res=1
  echo "Authentication with PAM v2 (pam_unix) failed" >> /tmp/result_text
fi
sudo mysql -e "UNINSTALL SONAME 'auth_pam'"
if mysql -ubombalurina -pan1rul@bm0b -e "SHOW GRANTS" > /dev/null 2>&1 ; then
  res=1
  echo "User authenticated via PAM v2 (pam_unix) could still connect after uninstalling plugin" >> /tmp/result_text
fi

# PAM v1

sudo mysql -e "INSTALL SONAME 'auth_pam_v1'"

set +e
sudo groupadd shadow
sudo usermod -a -G shadow mysql
sudo chown root:shadow /etc/shadow
sudo chmod g+r /etc/shadow
set -e

restart_server

if ! mysql -ubombalurina -pan1rul@bm0b -e "SHOW GRANTS" ; then
  res=1
  echo "Authentication with PAM v1 (pam_unix) failed" >> /tmp/result_text
fi
sudo mysql -e "UNINSTALL SONAME 'auth_pam_v1'"
if mysql -ubombalurina -pan1rul@bm0b -e "SHOW GRANTS" > /dev/null 2>&1 ; then
  res=1
  echo "User authenticated via PAM v1 (pam_unix) could still connect after uninstalling plugin" >> /tmp/result_text
fi

#----------------
# MTR
#----------------

cd /usr/share
cd `find . -name mysql-test`

if test -f suite/plugins/pam/pam_mariadb_mtr.so; then
  for p in /lib*/security /lib*/*/security ; do
    test -f $p/pam_unix.so && sudo cp -v suite/plugins/pam/pam_mariadb_mtr.so $p/
  done
  sudo cp -v suite/plugins/pam/mariadb_mtr /etc/pam.d/
fi

if ! sudo su -s /bin/sh -c "perl mysql-test-run.pl --verbose-restart --force --vardir=/dev/shm/var_pam --suite=plugins --do-test=pam" mysql ; then
  res=1
  echo "MTR PAM tests failed" >> /tmp/result_text
fi

set +e

if [ "$res" != "0" ] ; then
  cat /tmp/result_text
  exit $res
fi

""")],
        **kwargs)


def getRpmInstallStep(kvm_image, args, kvm_scpopt, distro, arch,
                    test_name, **kwargs):

    return Test(
        name=test_name,
        description=["testing", test_name],
        descriptionDone=["test", test_name],
        logfiles={"kernel": "kernel_"+getport()+".log"},
        warningPattern=testWarningPattern,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["vm-tmp-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+getport()+" "+kvm_scpopt+" rpms buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
df -kT
cd buildbot
case "%(branch)s" in
*mdev10416*)
  sudo cat /etc/sysconfig/selinux | grep SELINUX || true
  sudo sh -c \"PATH=$PATH:/usr/sbin getenforce || true\"
  sudo sh -c \"PATH=$PATH:/usr/sbin setenforce Enforcing || true\"
  sudo sh -c \"PATH=$PATH:/usr/sbin getenforce || true\"
  ;;
esac

arch=""" + arch + """
distro=""" + distro + """
distro=`echo $distro | sed -e 's/rhel7/centos7/'`
distro=`echo $distro | sed -e 's/centos8|rocky84/rhel8/'`

rpm -qa | { grep -iE 'maria|mysql|galera' || true; }
# Try several times, to avoid sporadic "The requested URL returned error: 404"
made_cache=0
for i in 1 2 3 4 5 ; do
  sudo rm -rf /var/cache/yum/*
  sudo yum clean all
  case $HOSTNAME in
    rhel8-amd64|rhel9-amd64) sudo subscription-manager refresh ;;
  esac
  if sudo yum makecache ; then
    made_cache=1
    break
  else
    sleep 5
  fi
done

if [ "$made_cache" != "1" ] ; then
  echo "Failed to make cache"
  exit 1
fi

sudo yum search mysql | { grep "^mysql" || true; }
sudo yum search maria | { grep "^maria" || true; }
sudo yum search percona | { grep percona || true; }

case "%(branch)s" in
# 3.x for 10.2-10.3 and for MDEV-17688, 10.2 with 3.x connector
*10.[2-3]*|*3.[0-9]*)
  GALERA_VERSION=3
  ;;
*)
  GALERA_VERSION=4
  ;;
esac

if [ -e /usr/bin/zypper ] ; then
  galera_location=zyp
  sudo zypper -n install wget || true
else
  galera_location=rpm
  sudo yum -y install wget || true
fi

cd rpms
if ! wget https://hasky.askmonty.org/builds/mariadb-${GALERA_VERSION}.x/latest/kvm-${galera_location}-${distro}-${arch}-gal/rpms/ --recursive -np -R "index.html*" -nH --cut-dirs=5 --no-check-certificate ; then
  echo "Test warning"": wget exited with a non-zero code, but it may be bogus"
  if ! `ls galera*.rpm` ; then
    echo "ERROR: Could not download the Galera library"
    exit 1
  fi
fi
cd ..

sudo yum -y --nogpgcheck install rpms/*.rpm

galera_path=`echo /usr/lib*/galera*/libgalera_smm.so`

sudo sh -c "echo '
[galera]
wsrep_provider=$galera_path
' > /etc/my.cnf.d/galera.cnf"

cat /etc/my.cnf.d/galera.cnf

case "%(systemdCapability)s" in
yes)
  if ! sudo systemctl start mariadb ; then
    sudo journalctl -lxn 500 --no-pager | grep -iE 'mysqld|mariadb'
    sudo systemctl -l status mariadb.service --no-pager
    exit 1
  fi
  ;;
no)
  sudo /etc/init.d/mysql restart
  ;;
*)
  echo "It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
  ;;
esac

if [[ "%(branch)s" != *"10."[23]* ]] ; then
  echo "Uninstallation of Cracklib plugin may fail if it wasn't installed, it's quite all right"
  if sudo mysql -e "uninstall soname 'cracklib_password_check.so'" ; then
    reinstall_cracklib_plugin="YES"
  fi
  sudo mysql -e "set password=''"
fi

mysql -uroot -e 'drop database if exists test; create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t;'

if ls rpms/*.rpm | grep -i columnstore > /dev/null 2>&1 ; then
  if sudo mysql -e 'select @@debug' ; then
    echo "Test warning"": ColumnStore viability check is disabled due to MCOL-5018 (doesn't work on debug build)"
  else
    if ! mysql --verbose -uroot -e "create database cs; use cs; create table cs.t_columnstore (a int, b char(8)) engine=ColumnStore; insert into cs.t_columnstore select seq, concat('val',seq) from seq_1_to_10; select * from cs.t_columnstore" ; then
      sudo systemctl -l status mariadb
      sudo journalctl -lxn 500 --no-pager | grep -iE 'mysqld|mariadb|columnstore|DDLProc'
      exit 1
    fi
    sudo systemctl restart mariadb
    mysql --verbose -uroot -e "select * from cs.t_columnstore; update cs.t_columnstore set b = 'updated'"
    sudo systemctl restart mariadb-columnstore
    mysql --verbose -uroot -e "update cs.t_columnstore set a = a + 10; select * from cs.t_columnstore"
  fi
fi

echo "Test for MDEV-18563, MDEV-18526"

set +e
case "%(systemdCapability)s" in
yes)
  sudo systemctl stop mariadb
  ;;
no)
  sudo /etc/init.d/mysql stop
  ;;
esac
sleep 1
sudo pkill -9 mysqld

sudo ls -l /usr/lib64/mysql/plugin/auth_pam_tool_dir/auth_pam_tool || true
#for p in /bin /sbin /usr/bin /usr/sbin /usr/local/bin /usr/local/sbin ; do
#  if test -x $p/mysql_install_db ; then
#    sudo $p/mysql_install_db --no-defaults --user=mysql --plugin-maturity=unknown
#  else
#    echo "$p/mysql_install_db does not exist"
#  fi
#done
#sudo mysql_install_db --no-defaults --user=mysql --plugin-maturity=unknown
set +e

echo "All done"
""")],
        **kwargs)

def addRpmSrpmTestStep(fact, kvm_image, args, kvm_scpopt, dist_arch, **kwargs):

    arch='x86_64' if dist_arch == 'amd64' else dist_arch

    def needToTestSrpm(step):
        if step.getProperty("have_srpm") != "yes":
            return False
        for f in step.build.allFiles():
            if not re.search("[^/]+\.(test|result|inc|cc|h|opt|c|cnf|rdiff|cpp|hpp|yy)$", f):
                return True
        return False

    fact.addStep(SetPropertyFromCommand(
        name="have_srpm",
        property="have_srpm",
        command=WithProperties("find '%(builddir)s/build/srpms' -name '*.rpm' |grep -q . && echo yes || echo no"),
    ))

    fact.addStep(Test(
        name="rebuild from srpm",
        description=["testing", "rebuild", "from", "srpm"],
        descriptionDone=["test", "rebuild", "from", "srpm"],
        timeout=7200,
        logfiles={"kernel": "kernel_"+getport()+".log"},
        env={"TERM": "dumb"},
        doStepIf=needToTestSrpm,
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["vm-tmp-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+getport()+" "+kvm_scpopt+" rpms srpms buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
df -kT
cd buildbot
. /etc/os-release

if command -v zypper > /dev/null; then
    rpm -q --requires -p srpms/*.src.rpm | xargs sudo zypper install -y -l rpm-build
elif [ "$ID" == "almalinux" ] && [[ "$VERSION" =~ ^8 ]] ; then
    sudo dnf clean all --refresh -y
    sudo dnf install dnf-plugins-core -y
    sudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm -y
    sudo dnf config-manager --enable epel
    sudo dnf config-manager --set-enabled powertools
    sudo dnf module -y enable mariadb-devel || true
    sudo dnf --setopt=install_weak_deps=False install -y rpm-build perl-generators
    sudo dnf --setopt=install_weak_deps=False builddep -y srpms/*.src.rpm
elif command -v dnf > /dev/null; then
    if [ -f /usr/bin/subscription-manager ] ; then
      sudo subscription-manager refresh
      sudo dnf config-manager --enable codeready-builder-for-rhel-8-""" + arch + """-rpms || true
    else
      sudo dnf config-manager --enable PowerTools || true
    fi
    ## See MDEV-27364 (jemalloc discrepancy)
    ## Let's keep it here but commented until the decision is made what to do about it
    # if [[ "%(branch)s" =~ 10.[234] ]] && ! rpm -qa | grep jemalloc ; then
    #   sudo dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm || true
    #   sudo dnf -y install jemalloc jemalloc-devel || true
    # fi
    sudo dnf module -y enable mariadb-devel || true
    sudo dnf --setopt=install_weak_deps=False install -y rpm-build perl-generators
    sudo dnf --setopt=install_weak_deps=False builddep -y srpms/*.src.rpm
else # yum
    sudo yum install -y rpm-build yum-utils
    sudo yum-builddep -y srpms/*.src.rpm
fi

rpmbuild --rebuild srpms/*.src.rpm

### compare rpms
# MariaDB-compat cannot be built from srpm, so remove it and all
# dependencies on it.
rm -fv rpms/*-compat-*rpm

case "%(buildername)s/%(branch)s" in
  kvm-zyp-sles123-amd64/*|kvm-zyp-sles125-amd64/*)
    # There's no libjudy in sles123 repositories
    rm -fv rpms/*-oqgraph-*rpm
    ;;
esac

# compare requirements to ensure rebuilt rpms got all libraries right
echo rpms/*.rpm           |xargs -n1 rpm -q --requires -p|sed -e 's/>=.*/>=/; s/([A-Z0-9._]*)([0-9]*bit)$//; /MariaDB-compat/d'|sort -u>requires-vendor.txt
echo ~/rpmbuild/RPMS/*.rpm|xargs -n1 rpm -q --requires -p|sed -e 's/>=.*/>=/; s/([A-Z0-9._]*)([0-9]*bit)$//                   '|sort -u>requires-rebuilt.txt
diff -u requires-*.txt

# check if rpm filenames match (won't be true on centos7)
# and if they do, compare more, e.g. file lists and scriptlets

echo "All done"
""")],
        **kwargs))

#-------------------------------
# Upgrade for RPM packages
#-------------------------------
# test_type:
# - 'minor'  -- [default] upgrade from the previous release of the same major version
# - 'major'  -- upgrade from the latest release of the previous major version
#
# test_mode:
# - 'server' -- [default] only mariadb-server is installed (with whatever dependencies it pulls) and upgraded.
# - 'all'    -- all provided packages are installed and upgraded
# - 'deps'   -- only a limited set of main packages is installed and upgraded,


def getRpmUpgradeStep(kvm_image, args, kvm_scpopt, distro, arch,
    test_mode="server", test_type="minor", **kwargs):

    return Test(
        name=""+test_type+"-upgrade-"+test_mode,
        warningPattern=testWarningPattern,
        description=["testing", test_type, "upgrade"],
        descriptionDone=[test_type, "upgrade", "for", test_mode],
        logfiles={"kernel": "kernel_"+getport()+".log", "ldd.old": "ldd.old", "ldd.new": "ldd.new"},
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["vm-tmp-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+getport()+" "+kvm_scpopt+" rpms buildbot@localhost:buildbot/",
        WithProperties("""
set -xv

test_mode="""+test_mode+"""
test_type="""+test_type+"""

case %(branch)s in
*"""+DEVELOPMENT_BRANCH+"""*)
  if [[ "$test_mode" != "server" ]] ; then
    echo "Test warning"": the test in 'all' or 'deps' mode is not executed for non-stable branches"
    exit
  fi
  ;;
esac

if [ "$test_type" == "minor" ] ; then
  if sudo getenforce ; then
    sudo setenforce Enforcing
    sudo getenforce
  fi
fi

cd buildbot

package_version=`ls rpms/MariaDB-server-[0-9]* | head -n 1 | sed -e 's/.*MariaDB-server-\([0-9]*\.[0-9]*\.[0-9]*\).*/\\1/'`
major_version=%(majorVersion)s
prev_major_version=$major_version

# For now we rely on major_version being 10.1 or higher, can add a check later
if [[ "$test_type" == "major" ]] ; then
    minor_version_num=`echo $major_version | sed -e 's/10\.\([0-9]*\)/\\1/'`
    ((prev_minor_version_num = minor_version_num - 1))
    prev_major_version=10.$prev_minor_version_num
fi

arch=""" + arch + """
distro=""" + distro + """
galera_distro=$distro

if [[ "$distro" == "sles123" ]] || [[ "$distro" == "sles125" ]] ; then
    distro="sles12"
fi

galera_distro=`echo $galera_distro | sed -e 's/rhel7/centos7/'`
galera_distro=`echo $galera_distro | sed -e 's/centos8/rhel8/'`

repo_dist_arch=$distro-$arch
echo "Architecture and distribution based on VM name: $repo_dist_arch"

echo "Test properties"
echo "  Systemd capability     %(systemdCapability)s"
echo "  Test type              $test_type"
echo "  Test mode              $test_mode"
echo "  Major version          $major_version"
echo "  Previous major version $prev_major_version"

#===============
# This test can be performed in four modes:
# - 'server' -- only mariadb-server is installed (with whatever dependencies it pulls) and upgraded.
# - 'all'    -- all provided packages are installed and upgraded, except for Columnstore
# - 'deps'   -- only a limited set of main packages is installed and upgraded,
#               to make sure upgrade does not require new dependencies
# - 'columnstore' -- mariadb-server and mariadb-plugin-columnstore are installed
#===============

echo "Current test mode: $test_mode"

#============
# Environment
#============

rpm -qa | grep -iE 'maria|mysql|galera'
cat /etc/*release
uname -a
df -kT

#========================================
# Check whether a previous version exists
#========================================

if ! wget http://bb02.mariadb.org/$prev_major_version/$repo_dist_arch/repodata -O repodata.list
then
  echo "Test warning"": could not find the 'repodata' folder for a previous version in MariaDB repo, skipping the test"
  exit
fi

#===============================================
# Define the list of packages to install/upgrade
#===============================================

case $test_mode in
all|deps|columnstore)
  primary_xml=`grep 'primary.xml.gz' repodata.list | sed -e 's/.*href="\(.*-primary.xml\)\.gz\".*/\\1/'`
  wget http://bb02.mariadb.org/$prev_major_version/$repo_dist_arch/repodata/$primary_xml.gz
  if [[ $? != 0 ]] ; then
    echo "ERROR: Couldn't download primary.xml.gz from the repository"
    exit 1
  fi
  gunzip $primary_xml.gz

  if [[ "$test_mode" == "all" ]] ; then
    if grep -i columnstore $primary_xml > /dev/null ; then
      echo "Test warning"": Due to MCOL-4120 and other issues, Columnstore upgrade will be tested separately"
    fi
    if [[ "%(buildername)s" == "kvm-rpm-centos74-aarch64" ]] && [[ "$major_version" =~ 10.[34] ]] ; then
      echo "Test warning"": Workaround for MDEV-28811: Cassandra will be skipped"
      package_list=`grep -A 1 '<package type="rpm"' $primary_xml | grep MariaDB | grep -viE 'galera|columnstore|cassandra' | sed -e 's/<name>//' | sed -e 's/<\/name>//' | sort | uniq | xargs`
    elif [[ "%(buildername)s" == "kvm-rpm-centos74-aarch64" ]] && [[ "$major_version" =~ 10.[789] ]] ; then
      echo "Test warning"": Workaround for MDEV-28813: lzo and bzip providers will be skipped"
      package_list=`grep -A 1 '<package type="rpm"' $primary_xml | grep MariaDB | grep -viE 'galera|columnstore|lzo|bzip2' | sed -e 's/<name>//' | sed -e 's/<\/name>//' | sort | uniq | xargs`
    else
      package_list=`grep -A 1 '<package type="rpm"' $primary_xml | grep MariaDB | grep -viE 'galera|columnstore' | sed -e 's/<name>//' | sed -e 's/<\/name>//' | sort | uniq | xargs`
    fi
  elif [[ "$test_mode" == "deps" ]] ; then
    package_list=`grep -A 1 '<package type="rpm"' $primary_xml | grep -iE 'MariaDB-server|MariaDB-test|MariaDB-client|MariaDB-common|MariaDB-compat' | sed -e 's/<name>//' | sed -e 's/<\/name>//' | sort | uniq | xargs`
  elif [[ "$test_mode" == "columnstore" ]] ; then
    if ! grep columnstore $primary_xml > /dev/null ; then
      echo "Test warning"": Columnstore was not found in the released packages, the test will not be run"
      exit
    fi
    package_list="MariaDB-server MariaDB-columnstore-engine"
  fi
  if [[ $arch == ppc* ]] ; then
    package_list=`echo $package_list | xargs -n1 | sed -e 's/MariaDB-compat//gi' | xargs`
  fi
  ;;
server)
  package_list="MariaDB-server MariaDB-client"
  ;;
*)
  echo "ERROR: unknown test mode: $test_mode"
  exit 1
esac

echo "Package_list: $package_list"

#======================================================================
# Prepare yum/zypper configuration for installation of the last release
#======================================================================

if which zypper ; then
  package_manager=zypper
  repo_location=/etc/zypp/repos.d
  install_command="zypper --no-gpg-checks install --from mariadb -y"
  cleanup_command="zypper clean --all"
  remove_command="zypper remove -y"
  galera_location=zyp

  # Since there is no reasonable "upgrade" command in zypper which would
  # pick up RPM files needed to upgrade existing packages, we have to use "install".
  # However, if we run "install *.rpm", it will install all packages, regardless
  # the test mode, and we will get a lot of differences in contents after upgrade
  # (more plugins, etc.). So, instead for each package that we are going to install,
  # we'll also find an RPM file which provides it, and will use its name in
  # in the "upgrade" (second install) command


  if [[ "$test_mode" == "all" ]] ; then
    rm -f rpms/*columnstore*.rpm
    rpms_for_upgrade="rpms/*.rpm"
  else
    rpms_for_upgrade=""
    for p in $package_list ; do
      for f in rpms/*.rpm ; do
        if rpm -qp $f --provides | grep -i "^$p =" ; then
          rpms_for_upgrade="$rpms_for_upgrade $f"
          break
        fi
      done
    done
  fi

  upgrade_command="zypper --no-gpg-checks install -y $rpms_for_upgrade"

  sudo zypper -n install wget || true

# As of now (February 2018), RPM packages do not support major upgrade.
# To imitate it, we will remove previous packages and install new ones.

elif which yum ; then
  package_manager=yum
  repo_location=/etc/yum.repos.d
  install_command="yum -y --nogpgcheck install"
  cleanup_command="yum clean all"
  upgrade_command="yum -y --nogpgcheck upgrade rpms/*.rpm"
  galera_location=rpm
  if [[ "$test_type" == "major" ]] ; then
    upgrade_command="yum -y --nogpgcheck install rpms/*.rpm"
  fi
  if yum autoremove 2>&1 |grep -q 'need to be root'; then
    remove_command="yum -y autoremove"
  else
    remove_command="yum -y remove"
  fi

  sudo yum -y install wget || true
else
  echo "ERROR: could not find package manager"
  exit 1
fi

if [[ "$test_mode" == "columnstore" ]] ; then
  echo "Test warning"": Due to MCOL-4120 an extra service restart will be performed after upgrade"
  extra_restart_after_upgrade="yes"
fi

ls $repo_location/* | grep -iE '(maria|galera)' | xargs -r sudo rm -f

sudo sh -c "echo '[mariadb]
name=MariaDB
baseurl=http://bb02.mariadb.org/$prev_major_version/$repo_dist_arch
gpgkey=http://bb02.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > $repo_location/MariaDB.repo"
# Add fix for MDEV-20673 to rhel8/centos8 repo
case $HOSTNAME in
  rhel8*|centos8*|rocky8*|alma8*|rhel9*) sudo sh -c "echo 'module_hotfixes = 1' >> $repo_location/MariaDB.repo";;
esac

sudo sh -c "$cleanup_command"

#=========================
# Install previous release
#=========================

sudo sh -c "$install_command $package_list"
if [[ $? -ne 0 ]] ; then
  echo "ERROR: Installation of a previous release failed, see the output above"
  exit 1
fi

#==========================================================================
# Start the server, check that it is functioning and create some structures
#==========================================================================

case `expr "$prev_major_version" '<' "10.1"`"%(systemdCapability)s" in
0yes)
  sudo systemctl start mariadb
  if [[ "$distro" != *"sles"* ]] && [[ "$distro" != *"suse"* ]] ; then
    sudo systemctl enable mariadb
  else
    echo "Test warning"": due to MDEV-23044 mariadb service won't be enabled in the test"
  fi
  sudo systemctl -l status mariadb --no-pager
  ;;
*)
  sudo /etc/init.d/mysql start
  ;;
esac
if [[ $? -ne 0 ]] ; then
  echo "ERROR: Server startup failed"
  if [ -e /var/log/messages ] ; then
    sudo cat /var/log/messages | grep -iE 'mysqld|mariadb'
  fi
  for f in /var/lib/mysql/*.err /var/lib/mysql/*.log /var/log/mysql/*.err /var/log/mysql/*.log ; do
    sudo cat $f
  done
  exit 1
fi

if [[ "$prev_major_version" != *"10."[23]* ]] ; then
# 10.4+ uses unix_socket by default, hence sudo,
# and also might have simple_password_check plugin, hence non-default password

# 10.4 specifically is still affected by MDEV-18374 -- cracklib plugin
# doesn't work in enforcing mode on CentOS 7, so we are adding a workaround
# from the KB (https://mariadb.com/kb/en/cracklib-password-check-plugin/)
  if [[ "$prev_major_version" == "10.4" ]] && ([[ "$distro" =~ centos7 ]] || [[ "$distro" =~ rhel7 ]]) ; then
    cd /usr/share/mysql/policy/selinux/
    tee /tmp/mariadb-plugin-cracklib-password-check.te <<EOF

module mariadb-plugin-cracklib-password-check 1.0;

require {
        type mysqld_t;
        type crack_db_t;
        class file { execute setattr read create getattr execute_no_trans write ioctl open append unlink };
        class dir { write search getattr add_name read remove_name open };
}

allow mysqld_t crack_db_t:dir { search read open };
allow mysqld_t crack_db_t:file { getattr read open };
EOF
    sudo mv /tmp/mariadb-plugin-cracklib-password-check.te ./
    sudo yum install -y selinux-policy-devel
    sudo make -f /usr/share/selinux/devel/Makefile mariadb-plugin-cracklib-password-check.pp
    sudo semodule -i mariadb-plugin-cracklib-password-check.pp
    cd -
  fi
# End of MDEV-18374 workaround
  sudo mysql -e "set password= PASSWORD('S1mpl-pw')"
  password_option="-pS1mpl-pw"
fi

# All the commands below should succeed

set -e

mysql -uroot $password_option -e "CREATE DATABASE db"
mysql -uroot $password_option -e "CREATE TABLE db.t_innodb(a1 SERIAL, c1 CHAR(8)) ENGINE=InnoDB; INSERT INTO db.t_innodb VALUES (1,'foo'),(2,'bar')"
mysql -uroot $password_option -e "CREATE TABLE db.t_myisam(a2 SERIAL, c2 CHAR(8)) ENGINE=MyISAM; INSERT INTO db.t_myisam VALUES (1,'foo'),(2,'bar')"
mysql -uroot $password_option -e "CREATE TABLE db.t_aria(a3 SERIAL, c3 CHAR(8)) ENGINE=Aria; INSERT INTO db.t_aria VALUES (1,'foo'),(2,'bar')"
mysql -uroot $password_option -e "CREATE TABLE db.t_memory(a4 SERIAL, c4 CHAR(8)) ENGINE=MEMORY; INSERT INTO db.t_memory VALUES (1,'foo'),(2,'bar')"
mysql -uroot $password_option -e "CREATE ALGORITHM=MERGE VIEW db.v_merge AS SELECT * FROM db.t_innodb, db.t_myisam, db.t_aria"
mysql -uroot $password_option -e "CREATE ALGORITHM=TEMPTABLE VIEW db.v_temptable AS SELECT * FROM db.t_innodb, db.t_myisam, db.t_aria"
mysql -uroot $password_option -e "CREATE PROCEDURE db.p() SELECT * FROM db.v_merge"
mysql -uroot $password_option -e "CREATE FUNCTION db.f() RETURNS INT DETERMINISTIC RETURN 1"

if [[ "$test_mode" == "columnstore" ]] ; then
  mysql -uroot $password_option -e "CREATE TABLE db.t_columnstore(a INT, c VARCHAR(8)) ENGINE=ColumnStore; SHOW CREATE TABLE db.t_columnstore; INSERT INTO db.t_columnstore VALUES (1,'foo'),(2,'bar')"
fi

set +e

#====================================================================================
# Store information about server version and available plugins/engines before upgrade
#====================================================================================

mysql -uroot $password_option --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.old
old_version=`cat /tmp/version.old`

# If the tested branch has the same version as the public repository,
# upgrade won't work properly. For releasable branches, we will return an error
# urging to bump the version number. For other branches, we will abort the test
# with a warning (which nobody will read). This is done upon request from
# development, as temporary branches might not be rebased in a timely manner
if [ "$package_version" == "$old_version" ] ; then
    echo "ERROR: Server version $package_version has already been released. Bump the version number!"
    for b in """+RELEASABLE_BRANCHES+""" ; do
        if [ "$b" == "%(branch)s" ] ; then
            exit 1
        fi
    done
    echo "Test warning"": The test will be skipped, as upgrade will not work properly"
    exit
fi

mysql -uroot $password_option --skip-column-names -e "select engine, support, transactions, savepoints from information_schema.engines" | sort > /tmp/engines.old

case "$prev_major_version" in
5.5)
  mysql -uroot $password_option --skip-column-names -e "show plugins" | sort > /tmp/plugins.old
  ;;
10.[0-9])
  mysql -uroot $password_option --skip-column-names -e "select plugin_name, plugin_status, plugin_type, plugin_library, plugin_license from information_schema.all_plugins" | sort > /tmp/plugins.old
  ;;
*)
  echo "ERROR: unknown major version: $prev_major_version"
  exit 1
  ;;
esac

# Store dependency information for old binaries/libraries:
# - names starting with "mysql*" in the directory where mysqld is located;
# - names starting with "mysql*" in the directory where mysql is located;
# - everything in the plugin directories installed by any MariaDB packages

set +x
for i in `sudo which mysqld | sed -e 's/mysqld$/mysql\*/'` `which mysql | sed -e 's/mysql$/mysql\*/'` `rpm -ql \`rpm -qa | grep MariaDB | xargs\` | grep -v 'mysql-test' | grep -v '/debug/' | grep '/plugin/' | sed -e 's/[^\/]*$/\*/' | sort | uniq | xargs`; do echo "=== $i" ; ldd $i | sort | sed 's/(.*)//' ; done > /home/buildbot/ldd.old
set -x

#======================================================================
# Prepare yum/zypper configuration for installation of the new packages
#======================================================================

set -e

if [[ "$test_type" == "major" ]] ; then
  echo
  echo "Remove old packages for major upgrade"
  echo
  packages_to_remove=`rpm -qa | grep 'MariaDB-' | awk -F'-' '{print $1"-"$2}' | xargs`
  sudo sh -c "$remove_command $packages_to_remove"
  rpm -qa | grep -iE 'maria|mysql' || true

fi

if [[ "$test_mode" == "deps" ]] ; then
  sudo mv $repo_location/MariaDB.repo /tmp
  sudo rm -rf $repo_location/*
  sudo mv /tmp/MariaDB.repo $repo_location/
  sudo sh -c "$cleanup_command"
fi

#=========================
# Install the new packages
#=========================

case "%(branch)s" in
# 3.x for 10.2-10.3
*10.[2-3]*)
  GALERA_VERSION=3
  ;;
*)
  GALERA_VERSION=4
  ;;
esac

cd rpms
if ! wget https://hasky.askmonty.org/builds/mariadb-${GALERA_VERSION}.x/latest/kvm-${galera_location}-${galera_distro}-${arch}-gal/rpms/ --recursive -np -R "index.html*" -nH --cut-dirs=5 --no-check-certificate ; then
  echo "Test warning"": wget exited with a non-zero code, but it may be bogus"
  if ! `ls rpms/galera*.rpm` ; then
    echo "ERROR: Could not download the Galera library"
    exit 1
  fi
fi
cd ..

sudo sh -c "$upgrade_command"

set +e

#===================================================
# Check that no old packages have left after upgrade
#===================================================

# The check is only performed for all-package-upgrade, because
# for selective ones some implicitly installed packages might not be upgraded

if [[ "$test_mode" == "all" ]] ; then
  if [ "%(is_main_tree)s" == "yes" ] ; then
    rpm -qa | grep -iE 'mysql|maria' | grep `cat /tmp/version.old`
  else
    rpm -qa | grep -iE 'mysql|maria' | grep `cat /tmp/version.old` | grep -v debuginfo
  fi
  if [[ $? -eq 0 ]] ; then
    echo "ERROR: Old packages have been found after upgrade"
    exit 1
  fi
fi

#================================
# Optionally (re)start the server
#================================

set -e

if [ "$test_type" == "major" ] ; then
  case "%(systemdCapability)s" in
  yes)
    if ! sudo systemctl start mariadb ; then
      sudo journalctl -lxn 500 --no-pager
      exit 1
    fi
    ;;
  no)
    sudo /etc/init.d/mysql start
    ;;
  esac

elif [ -n "$extra_restart_after_upgrade" ] ; then
  case "%(systemdCapability)s" in
  yes)
    sudo systemctl restart mariadb
    ;;
  no)
    sudo /etc/init.d/mysql restart
    ;;
  esac
fi

#================================
# Make sure that the new server is running
#================================

if mysql -uroot $password_option -e "select @@version" | grep "$old_version" ; then
  echo "ERROR: The server was not upgraded or was not restarted after upgrade"
  exit 1
fi

#=====================================================================================
# Run mysql_upgrade for non-GA branches (minor upgrades in GA branches shouldn't need it)
#=====================================================================================

if [[ "$major_version" == """+DEVELOPMENT_BRANCH+""" ]] || [[ "$test_type" == "major" ]] ; then
  sudo mysql_upgrade -uroot $password_option
fi

set +e

#=====================================================================================
# Check that the server is functioning and previously created structures are available
#=====================================================================================

# All the commands below should succeed

set -e

mysql -uroot $password_option -e "select @@version, @@version_comment"

mysql -uroot $password_option -e "SHOW TABLES IN db"
mysql -uroot $password_option -e "SELECT * FROM db.t_innodb; INSERT INTO db.t_innodb VALUES (3,'foo'),(4,'bar')"
mysql -uroot $password_option -e "SELECT * FROM db.t_myisam; INSERT INTO db.t_myisam VALUES (3,'foo'),(4,'bar')"
mysql -uroot $password_option -e "SELECT * FROM db.t_aria; INSERT INTO db.t_aria VALUES (3,'foo'),(4,'bar')"
echo "If the next INSERT fails with a duplicate key error,"
echo "it is likely because the server was not upgraded or restarted after upgrade"
mysql -uroot $password_option -e "SELECT * FROM db.t_memory; INSERT INTO db.t_memory VALUES (1,'foo'),(2,'bar')"
mysql -uroot $password_option -e "SELECT COUNT(*) FROM db.v_merge"
mysql -uroot $password_option -e "SELECT COUNT(*) FROM db.v_temptable"
mysql -uroot $password_option -e "CALL db.p()"
mysql -uroot $password_option -e "SELECT db.f()"
if [[ "$test_mode" == "columnstore" ]] ; then
  mysql -uroot $password_option -e "SELECT * FROM db.t_columnstore; INSERT INTO db.t_columnstore VALUES (3,'foo'),(4,'bar')"
fi

set +e

#===================================================================================
# Store information about server version and available plugins/engines after upgrade
#===================================================================================

set -e

mysql -uroot $password_option --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.new
mysql -uroot $password_option --skip-column-names -e "select engine, support, transactions, savepoints from information_schema.engines" | sort > /tmp/engines.new

cat /tmp/engines.new

mysql -uroot $password_option --skip-column-names -e "select plugin_name, plugin_status, plugin_type, plugin_library, plugin_license from information_schema.all_plugins" | sort > /tmp/plugins.new

# Dependency information for new binaries/libraries

set +x
for i in `sudo which mysqld | sed -e 's/mysqld$/mysql\*/'` `which mysql | sed -e 's/mysql$/mysql\*/'` `rpm -ql \`rpm -qa | grep MariaDB | xargs\` | grep -v 'mysql-test' | grep -v '/debug/' | grep '/plugin/' | sed -e 's/[^\/]*$/\*/' | sort | uniq | xargs`; do echo "=== $i" ; ldd $i | sort | sed 's/(.*)//' ; done > /home/buildbot/ldd.new
set -x

case "%(systemdCapability)s" in
yes)
  ls -l /usr/lib/systemd/system/mariadb.service
  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
  ls -l /etc/init.d/mysql || true
  systemctl -l status mariadb.service --no-pager
  systemctl -l status mariadb --no-pager
  # Not done for SUSE due to MDEV-23044
  if [[ "$distro" != *"sles"* ]] && [[ "$distro" != *"suse"* ]] ; then
    # Major upgrade for RPMs is remove / install, so previous configuration
    # could well be lost
    if [[ "$test_type" == "major" ]] ; then
      sudo systemctl enable mariadb
    fi
    systemctl is-enabled mariadb
    systemctl -l status mysql --no-pager
    systemctl -l status mysqld --no-pager
  fi
  ;;
no)
  echo "Steps related to systemd will be skipped"
  ;;
*)
  echo "ERROR: It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
  exit 1
  ;;
esac

set +e

# Until """+DEVELOPMENT_BRANCH+""" is GA, the list of plugins/engines might be unstable, skipping the check
# For major upgrade, no point to do the check at all

if [[ "$major_version" != """+DEVELOPMENT_BRANCH+""" ]] && [[ "$test_type" != "major" ]] ; then

  # This output is for informational purposes
  diff -u /tmp/engines.old /tmp/engines.new
  diff -u /tmp/plugins.old /tmp/plugins.new
  # Only fail if there are any disappeared/changed engines or plugins
  disappeared_or_changed=`comm -23 /tmp/engines.old /tmp/engines.new | wc -l`
  if [[ $disappeared_or_changed -ne 0 ]] ; then
    echo "ERROR: the lists of engines in the old and new installations differ"
    exit 1
  fi
  disappeared_or_changed=`comm -23 /tmp/plugins.old /tmp/plugins.new | wc -l`
  if [[ $disappeared_or_changed -ne 0 ]] ; then
    echo "ERROR: the lists of available plugins in the old and new installations differ"
    exit 1
  fi
  if [ "$test_mode" == "all" ] ; then
    set -o pipefail
    if wget --timeout=20 --no-check-certificate https://raw.githubusercontent.com/MariaDB/mariadb.org-tools/master/buildbot/baselines/ldd.${major_version}.${distro}.${arch} -O /tmp/ldd.baseline > /dev/null ; then
      ldd_baseline=/tmp/ldd.baseline
    else
      ldd_baseline=/home/buildbot/ldd.old
    fi
    diff -U1000 $ldd_baseline /home/buildbot/ldd.new | ( grep -E '^[-+]|^ =' || true )
    if [[ $? -ne 0 ]] ; then
      echo "ERROR: something has changed in the dependencies of binaries or libraries. See the diff above"
      exit 1
    fi
  fi
  set +o pipefail
fi

diff -u /tmp/version.old /tmp/version.new
if [[ $? -eq 0 ]] ; then
  echo "ERROR: server version has not changed after upgrade"
  echo "It can be a false positive if we forgot to bump version after release,"
  echo "or if it is a development tree is based on an old version"
  exit 1
fi

"""),
       "!= rm -f ldd.*; scp -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:/home/buildbot/ldd.* . || true"],
        **kwargs)


def getRpmTestStep(args, kvm_scpopt, arch="", test_set="default", **kwargs):

    return getMTR(
            description=["running", test_set, "MTR", "suites"],
            descriptionDone=[test_set, "MTR", "suites"],
            test_type="nm",
            test_info="Normal run, no --ps-protocol",
            logfiles={"kernel": "kernel_"+getport()+".log", "syslog": "daemon.log"},
            mtr_subdir=".",    # Where we scp vardir to
            command=["runvm"] + args + ["--logfile=kernel_"+getport()+".log", "vm-tmp-"+getport()+".qcow2",
        WithProperties("""
set -ex

if ! rpm -qa | grep -i mariadb-server
then
  echo "Test warning"": MariaDB server was not installed, skipping the tests"
  exit
fi

test_set="""+test_set+"""

arch=""" + arch + """

# Turn off systemd tricks and write a normal coredump instead
sudo sysctl -w 'kernel.core_pattern=core' || true

cd /usr/share/mysql-test

if test -f suite/plugins/pam/pam_mariadb_mtr.so; then
  for p in /lib*/security /lib*/*/security ; do
    test -f $p/pam_unix.so && sudo cp -v suite/plugins/pam/pam_mariadb_mtr.so $p/
  done
  sudo cp -v suite/plugins/pam/mariadb_mtr /etc/pam.d/
fi

if sudo yum install -y perl-Env
then
  echo "Installed Env.pm"
fi

tcmalloc=
if [[ "%(tcmalloc)s" == "yes" ]] ; then
  if sudo yum install -y gperftools-libs
  then
    tcmalloc=`rpm -ql gperftools-libs | grep libtcmalloc.so | head -1`
  fi
fi

res=0
if [ "$test_set" == "default" ] ; then
  touch /tmp/skip.list
  if [ "%(buildername)s" == "kvm-rpm-rhel8-ppc64le" ] ; then
    echo "binlog.binlog_mysqlbinlog_row_innodb : MDEV-20530 - test fails with wrong result on this builder" >> /tmp/skip.list
    echo "binlog.binlog_mysqlbinlog_row_myisam : MDEV-20530 - test fails with wrong result on this builder" >> /tmp/skip.list
    echo "main.ps : MDEV-20532 - test fails with wrong result on this builder" >> /tmp/skip.list
    echo "main.select_pkeycache : MDEV-20532 - test fails with wrong result on this builder" >> /tmp/skip.list
    echo "main.sp : MDEV-20532 - test fails with wrong result on this builder" >> /tmp/skip.list
    echo "main.derived_cond_pushdown : MDEV-20532 - test fails with wrong result on this builder" >> /tmp/skip.list
    echo "main.select : MDEV-20532 - test fails with wrong result on this builder" >> /tmp/skip.list
    echo "main.select_jcl6 : MDEV-20532 - test fails with wrong result on this builder" >> /tmp/skip.list
    echo "main.type_float : MDEV-20532 - test fails with wrong result on this builder" >> /tmp/skip.list
    echo "main.type_newdecimal : MDEV-20532 - test fails with wrong result on this builder" >> /tmp/skip.list
    echo "main.type_ranges : MDEV-20532 - test fails with wrong result on this builder" >> /tmp/skip.list
    echo "main.func_math : MDEV-20532 - test fails with wrong result on this builder" >> /tmp/skip.list
  elif [ "%(buildername)s" == "kvm-rpm-centos73-ppc64" ] ; then
    echo "main.func_json_notembedded : MDEV-28714 - test fails with timeout on this builder" >> /tmp/skip.list
  fi
  cat /tmp/skip.list

  if ! LD_PRELOAD=$tcmalloc NO_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl --skip-test-list=/tmp/skip.list --verbose-restart --vardir="$(readlink -f /dev/shm/var)" --parallel=4 --force --retry=3 --max-save-core=0 --max-save-datadir=1 ; then
    res=1
  fi
elif [ "$test_set" == "galera" ] ; then
  case "%(branch)s" in
  *10.[2-3]*)
    galera_suites=galera,wsrep,galera_3nodes
    ;;
  *)
    galera_suites=galera,wsrep,galera_3nodes,galera_sr
  ;;
  esac
  if ! LD_PRELOAD=$tcmalloc perl mysql-test-run.pl --suites=$galera_suites --verbose-restart --vardir="$(readlink -f /dev/shm/var)" --parallel=2 --force --retry=3 --max-save-core=0 --max-save-datadir=1 ; then
    res=1
  fi
elif [ "$test_set" == "rocksdb" ] ; then
  set +o pipefail
  echo "rocksdb_hotbackup.* : MDEV-12380 - hotbackup tests are not maintained" > /tmp/skip.list
  if [ "%(buildername)s" == "kvm-rpm-centos74-amd64-debug" ] ; then
    echo "rocksdb.allow_to_start_after_corruption : MDEV-20488 - test fails with timeout on this builder" >> /tmp/skip.list
  elif [ "%(buildername)s" == "kvm-rpm-rhel8-ppc64le" ] ; then
    echo "rocksdb.type_float : MDEV-28694 - test fails with wrong result on this builder" >> /tmp/skip.list
    echo "rocksdb.col_opt_not_null : MDEV-28694 - test fails with wrong result on this builder" >> /tmp/skip.list
    echo "rocksdb.col_opt_null : MDEV-28694 - test fails with wrong result on this builder" >> /tmp/skip.list
    echo "rocksdb.col_opt_unsigned : MDEV-28694 - test fails with wrong result on this builder" >> /tmp/skip.list
  fi
  cat /tmp/skip.list
  if ! perl mysql-test-run.pl rocksdb.1st --vardir="$(readlink -f /dev/shm/var)" 2>&1 | grep -E 'RocksDB is not compiled|Could not find' ; then
    if ! LD_PRELOAD=$tcmalloc perl mysql-test-run.pl --suite=rocksdb* --skip-test-list=/tmp/skip.list --verbose-restart --vardir="$(readlink -f /dev/shm/var)" --parallel=4 --force --retry=3 --max-save-core=0 --max-save-datadir=1 ; then
      res=1
    fi
  else
    echo "WARNING: RocksDB engine not found"
  fi
elif [ "$test_set" == "s3" ] ; then
  set +o pipefail
  if perl mysql-test-run.pl s3.basic --vardir="$(readlink -f /dev/shm/var)" 2>&1 | grep -E 'Need S3 engine' ; then
    echo "Test warning"": S3 engine not found, tests will be skipped"
    exit 0
  fi
 
  if ! curl ftp://ftp.askmonty.org/public/minio/minio-linux-${arch} --output ~/minio ; then
    echo "ERROR: Could not download MinIO server for Linux ${arch}"
    echo "Check if it is available at http://dl.min.io/server/minio/release and store as ftp://ftp.askmonty.org/public/minio/minio-linux-${arch}"
    exit 1
  fi
  chmod a+x ~/minio
  MINIO_ACCESS_KEY=minio MINIO_SECRET_KEY=minioadmin ~/minio server /tmp/shared 2>&1 &
  if ! curl ftp://ftp.askmonty.org/public/minio/mc-linux-${arch} --output ~/mc ; then
    echo "ERROR: Could not download MinIO client for Linux ${arch}"
    echo "Check if it is available at http://dl.min.io/client/mc/release/ and store as ftp://ftp.askmonty.org/public/minio/mc-linux-${arch}"
    exit 1
  fi
  chmod a+x ~/mc
  # Try a few times in case the server hasn't finished initializing yet
  res=1
  for i in 1 2 3 4 5 ; do
    if ~/mc alias set local http://127.0.0.1:9000  minio minioadmin ; then
      res=0
      break
    fi
    sleep 1
  done
  if [ "$res" == "1" ] ; then
    echo "ERROR: Couldn't configure MinIO server"
    exit 1
  fi
  ~/mc mb --ignore-existing local/storage-engine

  libssh=
  if [[ "%(buildername)s" == "kvm-zyp-sles125-amd64" ]] ; then
    # ha_s3.so is linked with libcurl.so.4
    # libcurl.so.4 is linked with libssh.so.4
    # libssh.so.4 does CRYPTO_THREADID_set_callback(...) on load
    # and CRYPTO_THREADID_set_callback(0) on unload.
    # but the latter does not reset the callback,
    # see https://github.com/openssl/openssl/blob/OpenSSL_1_0_2u/crypto/cryptlib.c#L476
    # so when ha_s3.so is dlclose'd and libssh.so.4 gets unloaded
    # the callback stays, pointing into nowhere.
    # And when openssl calls it it crashes.
    # As a workaround we prevent libssh.so.4 from being unloaded
    libssh=/usr/lib64/libssh.so.4
  fi

  if ! LD_PRELOAD=$libssh perl mysql-test-run.pl --suite=s3 --verbose-restart --vardir="$(readlink -f /dev/shm/var)" --force --max-save-core=0 --max-save-datadir=1 ; then
    res=1
  fi
else
  echo "ERROR: Unknown test set $test_set"
  res=1
fi

rm -rf /home/buildbot/var
cp -r /dev/shm/var /home/buildbot
exit $res
"""),
        WithProperties(
              "!= rm -Rf var/ ; scp -rp -P " + getport() + " " + kvm_scpopt +
              " buildbot@localhost:/home/buildbot/var/ . || :")],
        **kwargs)


#-------------------------------
# Special step to test a mix of old clients / new server for SUSE
#-------------------------------
#
# The test is run in two variants:
# - for 10.0 trees, the last released server is installed from 10.2 official repo, clients from packages under test
# - for 10.2 trees, last released clients are installed from the 10.0 official repo, server from packages under test
# The variant is determined automatically based on the major version

def getSuseMixStep(kvm_image, args, kvm_scpopt, distro, arch, **kwargs):

    return Test(
        name="suse-version-mix",
        warningPattern=testWarningPattern,
        description=["testing", "suse", "mix", "of", "versions"],
        descriptionDone=["Suse", "mix", "of", "versions"],
        logfiles={"kernel": "kernel_"+getport()+".log"},
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["vm-tmp2-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+getport()+" "+kvm_scpopt+" rpms buildbot@localhost:buildbot/",
        WithProperties("""
set -x

major_version=%(majorVersion)s

if [ "$major_version" == "10.0" ] ; then
    echo "For 10.0 trees, the last released server is installed from 10.2 official repo, clients from packages under test"
    test_mode="client"
    last_release="10.2"
elif [ "$major_version" == "10.2" ] ; then
    echo "For 10.2 trees, last released clients are installed from the 10.0 official repo, server from packages under test"
    test_mode="server"
    last_release="10.0"
else
    echo "ERROR: wrong server version. The test only runs for 10.0 and 10.2, disable it for other versions in buildbot config"
    exit 1
fi

arch=""" + arch + """
distro=""" + distro + """

if [ "$distro" == "sles123" ] || [ "$distro" == "sles125" ] ; then
    distro="sles12"
    echo "Adjusted distro to $distro"
fi

repo_dist_arch=$distro-$arch

echo "Architecture and distribution based on VM name: $repo_dist_arch"

echo "Test properties"
echo "  Test mode                $test_mode"
echo "  Major version            $major_version"
echo "  Version taken from repo: $last_release"

cd buildbot

#============
# Environment
#============

rpm -qa | grep -iE 'maria|mysql|galera'
cat /etc/*release
uname -a
df -kT

#========================================
# Check whether a released version exists
#========================================

if ! wget http://bb02.mariadb.org/$last_release/$repo_dist_arch/repodata -O repodata.list
then
  echo "Test warning"": could not find the 'repodata' folder for a previous version in MariaDB repo, skipping the test"
  exit
fi

#==================================================================
# Prepare zypper configuration for installation of the last release
#==================================================================

sudo sh -c "echo '[mariadb]
name=MariaDB
baseurl=http://bb02.mariadb.org/$last_release/$repo_dist_arch
gpgkey=http://bb02.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/zypp/repos.d/MariaDB.repo"

sudo zypper clean -a

#==========================
# Install old clients first
#==========================

wget http://bb02.mariadb.org/RPM-GPG-KEY-MariaDB
sudo rpm --import RPM-GPG-KEY-MariaDB
sudo zypper --non-interactive refresh -sf
if [ "$test_mode" == "client" ] ; then
  # Clients come from the packages under test
  sudo zypper --no-gpg-checks install -y `ls rpms/*rpm | grep -E 'client|common|test' | xargs`
else
  # Clients come from the last released 10.0
  sudo zypper --no-gpg-checks install --from mariadb -y MariaDB-client MariaDB-test
fi
    
if [[ $? -ne 0 ]] ; then
  echo "ERROR: Installation of clients failed, see the output above"
  exit 1
fi

#========================
# Store the test binaries
#========================

sudo cp /usr/bin/mysqltest /usr/bin/mysqltest.10.0
sudo cp /usr/bin/mysqltest_embedded /usr/bin/mysqltest_embedded.10.0
sudo cp /usr/bin/mysql_client_test /usr/bin/mysql_client_test.10.0
sudo cp /usr/bin/mysql_client_test_embedded /usr/bin/mysql_client_test_embedded.10.0

#====================
# Remove MariaDB-test
#====================

echo "We have to explicitly remove MariaDB-test package, because it doesn't get upgraded"

sudo zypper remove -y MariaDB-test

#=============================
# Install new server and tests
#=============================

wget http://bb02.mariadb.org/RPM-GPG-KEY-MariaDB
sudo rpm --import RPM-GPG-KEY-MariaDB
sudo zypper --non-interactive refresh -sf
if [ "$test_mode" == "server" ] ; then
  # Server and test come from the packages under test
  sudo zypper --no-gpg-checks install -y `ls rpms/*rpm | grep -E 'server|test' | grep -v gssapi | xargs`
else
  # Server comes from the last released 10.2
  sudo zypper --no-gpg-checks install --from mariadb -y MariaDB-server MariaDB-test
fi
    
if [[ $? -ne 0 ]] ; then
  echo "ERROR: Installation of server and test failed, see the output above"
  exit 1
fi

rpm -qa | grep -iE 'maria|mysql|galera'

#====================================
# Replace test binaries with old ones
#====================================

# Client binaries must have stayed old, but old test programs need to be restored

sudo cp /usr/bin/mysqltest.10.0 /usr/bin/mysqltest
sudo cp /usr/bin/mysqltest_embedded.10.0 /usr/bin/mysqltest_embedded
sudo cp /usr/bin/mysql_client_test.10.0 /usr/bin/mysql_client_test
sudo cp /usr/bin/mysql_client_test_embedded.10.0 /usr/bin/mysql_client_test_embedded

# Check

mysqltest --version

#==============
# Run the tests
#==============

cd /usr/share/mysql-test
perl mysql-test-run.pl  --verbose-restart --vardir="$(readlink -f /dev/shm/var)" --parallel=4 --force --retry=3 --max-save-core=0 --max-save-datadir=1 `cat collections/10.0-compatible.list | grep -v '#' | xargs`
res=$?
perl mysql-test-run.pl  --verbose-restart --vardir="$(readlink -f /dev/shm/var)" --parallel=4 --ps-protocol --force --retry=3 --max-save-core=0 --max-save-datadir=1 `cat collections/10.0-compatible.list | grep -v '#' | xargs`
res2=$?

rm -rf /home/buildbot/var
cp -r /dev/shm/var /home/buildbot
exit $((res + res2))

"""),
        WithProperties(
              "!= rm -Rf var/ ; scp -rp -P " + getport() + " " + kvm_scpopt +
              " buildbot@localhost:/home/buildbot/var/ . || :")],
        **kwargs)


def getRpmBuilder(name, kvm_image, cpu, arch, slaves=kvm_slaves, ramdisk=True, catg="main"):
    distro = name.split('-')[2]
    arch= name.split('-')[3]
    dist_arch= distro + "-" + arch
    name4='-'.join(name.split('-')[0:4])
    m = re.search("^([A-Za-z]+)([0-9]*)",distro)
    if m:
        dist_name = m.group(1)
        dist_num = m.group(2)

    extra_options=''
    if distro in ['fedora34', 'fedora35', 'fedora36']:
        extra_options += ' -DWITH_JEMALLOC=system'
    elif distro in ['fedora-rawhide', 'fedora', 'fedora666']:
        extra_options += ' -DWITH_JEMALLOC=system -DPLUGIN_COLUMNSTORE=NO'
    elif distro in ['centos8', 'rhel8', 'rocky84', 'alma84', 'rhel9']:
        extra_options += ' -DWITH_JEMALLOC=no'
    if "debug" in name:
        extra_options += ' -DCMAKE_BUILD_TYPE=Debug'
        if "centos7" in name:
            # very old gcc, don't abort on prehistoric warnings
            extra_options += ' -DMYSQL_MAINTAINER_MODE=OFF'
    rpm_fact = BuildFactory()
    args = ["--port=" + getport(), "--memory="+memory_def, "--user=buildbot",
            "--smp=4", "--cpu="+cpu, "--startup-timeout=600",
            "--logfile=kernel_" + getport() + ".log"]
    if ramdisk:
        args = args + ["--work-image=/dev/shm/vm-tmp-" + getport() + ".qcow2"]
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    rpm_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    rpm_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-build.qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-install.qcow2",
                 "/kvm/vms/"]))

    rpm_fact.addStep(ShellCommand(
        description=["rsyncing", "FIPS", "VM"],
        descriptionDone=["rsync", "FIPS", "VM"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01" and "centos7" in distro and arch == "amd64"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/vm-centos79-amd64-fips.qcow2",
                 "/kvm/vms/"]))

    rpm_fact.addStep(DownloadSourceTarball())
    rpm_fact.addStep(FileDownload(
        mastersrc=WithProperties("/ds1819/rpm/mariadb-shared-5.3-"+arch+".rpm"),
        slavedest=WithProperties("MariaDB-shared-5.3."+name+".rpm"),
        blocksize=524288,
        ))
    rpm_fact.addStep(FileDownload(
        mastersrc=WithProperties("/ds1819/rpm/mariadb-shared-10.1-"+name4+".rpm"),
        slavedest=WithProperties("MariaDB-shared-10.1."+name+".rpm"),
        blocksize=524288,
        ))
    rpm_fact.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
rm -f compiler_warnings.supp
#tar zxf "%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
tar zxf "/tmp/buildcache/%(tarbuildnum)s:%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
exit 0  # best-effort, not fatal if no suppression file
""")]))

    rpm_fact.addStep(SetPropertyFromCommand(
        name="main_tree",
        doStepIf=isMainTree,
        hideStepIf=(lambda results, s: results==SKIPPED),
        property="is_main_tree",
        command="echo yes"))
        
    rpm_fact.addStep(SetPropertyFromCommand(
        name="not_main_tree",
        doStepIf=(lambda(step): not isMainTree(step)),
        hideStepIf=(lambda results, s: results==SKIPPED),
        property="is_main_tree",
        command="echo no"))

    rpm_fact.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        logfiles={"kernel": "kernel_" + getport() + ".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-build.qcow2"] + args + ["vm-tmp-" + getport() + ".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        ScpSourceIntoVM(),
        WithProperties("= scp -P " + getport() + " "+kvm_scpopt+" MariaDB-shared-*."+name+".rpm buildbot@localhost:buildbot/ "),
        WithProperties("""
set -ex

if [ "%(is_main_tree)s" == "no" ] ; then
    NO_DEBUGINFO=-DCPACK_RPM_DEBUGINFO_PACKAGE=OFF
fi

cd buildbot
mkdir padding_for_CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX
cd padding_for_CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX
# - - - - - - - - - -
mkdir rpms srpms
mv ../MariaDB-shared-*.rpm .
tar zxf "../%(distname)s"
cd "%(distdirname)s"
cmake .  -DBUILD_CONFIG=mysql_release $NO_DEBUGINFO -DCMAKE_COMMAND_DEP=cmake -DRPM=""" + distro + extra_options + """
umask 022
if grep -qw CPACK_RPM_SOURCE_PKG_BUILD_PARAMS CPackSourceConfig.cmake; then
  make package_source
  mv *.src.rpm ../srpms/
fi
make -j4 package VERBOSE=1
mv *.rpm ../rpms/
"""),
        "= rm -Rf rpms srpms && mkdir rpms srpms",
        "= scp -r -P " + getport() + " "+kvm_scpopt+" buildbot@localhost:buildbot/padding_for_CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX/*rpms .",
    ]))
    addPackageArchiveStep(rpm_fact, "rpms srpms", "%(tarbuildnum)s")


    rpm_fact.addStep(Test(
        name="providers",
        description=["checking", "compression", "providers"],
        descriptionDone=["check", "compression", "providers"],
        timeout=1200,
        env={"TERM": "vt102"},
        command=["runvm"] + args +["--logfile=kernel_"+getport()+".log", "vm-tmp-"+getport()+".qcow2",
        WithProperties("""
set -ex
cd buildbot
num_providers_expected=`ls padding_for_CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX/%(distdirname)s/plugin/ | grep -E '^provider' | wc -l`
if [ $num_providers_expected -eq 0 ] ; then
  echo "No expected providers found, skipping the test"
  exit
fi

ls padding_for_CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX/rpms/MariaDB*-provider*

num_providers_built=`ls padding_for_CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX/rpms/MariaDB*-provider*.rpm | grep -v debuginfo | wc -l`

if [ $num_providers_built -ne $num_providers_expected ] ; then
  echo "ERROR: Found $num_providers_built provider libraries, expected $num_providers_expected"
  exit 1
fi
""")]))

#---------------------------------
# RPM packages: FIPS test
#---------------------------------

    rpm_fact.addStep(getMTR(
            name="mtr-7.9-fips",
            doStepIf=(lambda(step): "centos7" in distro and arch == "amd64"),
            description=["running", "test", "with", "FIPS"],
            descriptionDone=["Installation", "and", "MTR", "test", "with", "FIPS"],
            test_type="nm-fips",
            test_info="Normal run, no --ps-protocol",
            logfiles={"kernel": "kernel_"+getport()+".log", "syslog": "daemon.log"},
            mtr_subdir=".",    # Where we scp vardir to
            env={"TERM": "vt102"},
            command=["runvm", "--base-image=/kvm/vms/vm-centos79-amd64-fips.qcow2"] + args + ["vm-tmp-" + getport() + ".qcow2",
            "rm -Rf buildbot && mkdir buildbot",
            "= scp -r -P "+getport()+" "+kvm_scpopt+" rpms buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
case "%(branch)s" in
*10.[2-3]*)
  GALERA_VERSION=3
  ;;
*)
  GALERA_VERSION=4
  ;;
esac

cd buildbot/rpms
if ! wget https://hasky.askmonty.org/builds/mariadb-${GALERA_VERSION}.x/latest/kvm-rpm-"""+distro+"""-amd64-gal/rpms/ --recursive -np -R "index.html*" -nH --cut-dirs=5 --no-check-certificate ; then
  # wget exited with a non-zero code, but it may be bogus
  if ! `ls galera*.rpm` ; then
    echo "ERROR: Could not download the Galera library"
    exit 1
  fi
fi

sudo yum install -y --nogpgcheck MariaDB-server-10*.rpm MariaDB-test-10*.rpm MariaDB-backup-10*.rpm MariaDB-compat-10*.rpm MariaDB-client-10*.rpm MariaDB-common-10*.rpm galera*.rpm
cd /usr/share/mysql-test
# All *ssl* tests, removing ./ prefix right away
find . -name '*ssl*.test' | sed -e 's/^\.\///g' > /tmp/test.list
# All tests calling including certain functions (will produce an excessive list, with false positives)
# We have to check both .test files and .result files, because .test files may run some functions
# via includes and thus won't be greppable, while .result files may not contain all the output
grep -rliE 'encode|des_encrypt|aes_encrypt|md5|sha[12]' * | sed -e 's/\.result$/\.test/g'| sed -e 's/\/r\//\/t\//g' | grep ".test$" | sort | uniq >> /tmp/test.list
# Remove .test ending
sed -i 's/\.test$//g' /tmp/test.list
# Remove suite/ and plugin/xxx/ prefixes
sed -i 's/^suite\///g' /tmp/test.list
sed -i 's/^plugin\/[^\/]*\///g' /tmp/test.list
# Replace all /t/ with a dot
sed -i 's/\/t\//\./g' /tmp/test.list
# Only replace the last slash with a dot, so that main/select becomes main.select,
# but spider/oracle/ha becomes spider/oracle.ha
sed -i 's/\/\([^\/\.]*\)*$/\.\\1/g' /tmp/test.list
# Remove plugin and encryption tests, we'll run the whole suites
sed -i '/^plugin\//d' /tmp/test.list
sed -i '/^encryption\//d' /tmp/test.list
# Remove combinations (from result files)
sed -i 's/,.*$//g' /tmp/test.list
# The next two are for 10.2 -- replacing t.testname with main.testname
sed -i -e 's/^t\./main\./g' /tmp/test.list
sed -i '/^r\./d' /tmp/test.list
set +e
perl mysql-test-run.pl --verbose-restart --parallel=6 --vardir=/dev/shm/var --force {suite/encryption,plugin/*}/{t/,}*.test `cat /tmp/test.list | sort | uniq`
res=$?
rm -rf /home/buildbot/var
cp -r /dev/shm/var /home/buildbot
exit $res
"""),
        WithProperties(
              "!= rm -Rf var/ ; scp -rp -P " + getport() + " " + kvm_scpopt +
              " buildbot@localhost:/home/buildbot/var/ . || :")]))

    rpm_fact.addStep(SetPropertyFromCommand(property="systemdCapability", command="echo no"))
    rpm_fact.addStep(SetPropertyFromCommand(
        doStepIf=in_systemdBuilders,
        property="systemdCapability",
        command="echo yes"))

    rpm_fact.addStep(SetPropertyFromCommand(
        name="major_version",
        hideStepIf=(lambda results, s: results==SKIPPED),
        property="majorVersion",
        command=WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.5\\\\|10\\\\.[0-9]*\\\\).*/\\\\1/\\\"\"")))

    rpm_fact.addStep(
        getRpmUpgradeStep(kvm_image, args, kvm_scpopt, distro, arch,
            test_mode="all",
            doStepIf=(lambda(step): (not "debug" in name) and dist_arch != "centos8-amd64")
        )
    )

    rpm_fact.addStep(
        getRpmInstallStep(kvm_image, args, kvm_scpopt, distro, arch,
            test_name="install",
            haltOnFailure=True
        )
    )

    rpm_fact.addStep(getPamStep(args))

    # MDEV-14253 Test with tcmalloc
    # Tests are run in one of two variations: with tcmalloc or without it.
    # For now, the test on centos74-amd64 will be run with tcmalloc,
    # all other systems will run without. It is reflected in doStepIf
    # In any case the test uses the temporary VM image created by the previous installation step

    rpm_fact.addStep(SetPropertyFromCommand(
        name="unset_tcmalloc",
        property="tcmalloc",
        command="echo no",
    ))

    rpm_fact.addStep(SetPropertyFromCommand(
        name="set_tcmalloc",
        property="tcmalloc",
        doStepIf=(lambda(step): dist_arch == "centos74-amd64"),
        command="echo yes",
    ))

    rpm_fact.addStep(
        getRpmTestStep(args, kvm_scpopt,
          name="mtr",
          env={"TERM": "vt102"}
        )
    )

    rpm_fact.addStep(
        getRpmTestStep(args, kvm_scpopt, arch,
          name="mtr-s3",
          test_set="s3",
          doStepIf=branch_is_10_5_or_later,
          env={"TERM": "vt102"}
        )
    )

    rpm_fact.addStep(
        getRpmTestStep(args, kvm_scpopt,
          name="mtr-galera",
          test_set="galera",
          env={"TERM": "vt102"}
        )
    )

    rpm_fact.addStep(
        getRpmTestStep(args, kvm_scpopt,
          name="mtr-rocksdb",
          test_set="rocksdb",
          env={"TERM": "vt102"}
        )
    )

    # Additional steps for installing and testing RHEL packages on Rocky Linux

    rpm_fact.addStep(
        getRpmInstallStep("vm-rocky84-amd64", args, kvm_scpopt, distro, arch,
            test_name="install_on_rocky",
            doStepIf=(lambda(step): dist_arch == "rhel8-amd64")
        )
    )

    # The test will use the temporary VM image created by the previous installation step,
    # so it should be run under the same conditions as the previous step.
    rpm_fact.addStep(
        getRpmTestStep(args, kvm_scpopt,
            name="mtr_on_rocky",
            doStepIf=(lambda(step): dist_arch == "rhel8-amd64"),
            env={"TERM": "vt102"}
        )
    )

#-----------------------------------
# RPM packages (yum): major upgrade
#-----------------------------------

    rpm_fact.addStep(
        getRpmUpgradeStep(kvm_image, args, kvm_scpopt, distro, arch,
            test_mode="server",
            test_type="major",
            doStepIf=(lambda(step): (not "debug" in name) and dist_arch != "centos8-amd64")
        )
    )

    addRpmSrpmTestStep(rpm_fact, kvm_image, args, kvm_scpopt, arch)

#-----------------------------------
# RPM packages (yum): minor upgrades
#-----------------------------------

    rpm_fact.addStep(
        getRpmUpgradeStep(kvm_image, args, kvm_scpopt, distro, arch,
            test_mode="server",
            doStepIf=(lambda(step): (not "debug" in name) and dist_arch != "centos8-amd64")
        )
    )

    rpm_fact.addStep(
        getRpmUpgradeStep(kvm_image, args, kvm_scpopt, distro, arch,
            test_mode="deps",
            doStepIf=(lambda(step): (not "debug" in name) and dist_arch != "centos8-amd64")
        )
    )

    rpm_fact.addStep(
        getRpmUpgradeStep(kvm_image, args, kvm_scpopt, distro, arch,
            test_mode="columnstore",
            doStepIf=(lambda(step): branch_is_10_5_or_later(step) and dist_arch != "centos8-amd64")
        )
    )

##### End of minor upgrade steps

#####
# DO NOT REMOVE
# unless MDEV-9584 is closed as "won't fix".
#
# MDEV-9584, MDEV-9766 - Relaxed rules for yum upgrade
# The file implements additional steps which can only be enabled
# on branches containing fixes for MDEV-9584 and related bugs
# (still stalled/open, as of 2017-11-11).
# There are numerous steps, so probably they shouldn't be enabled
# on all branches

# execfile("/etc/buildbot/builders/rpm_fact_extra_steps.py");
#####

    return {'name': name, 'slavenames': slaves, 'builddir': name, 'factory': rpm_fact,
            "nextBuild": myNextBuild,
            "category": catg}

bld_kvm_rpm_centos73_ppc64 = getRpmBuilder("kvm-rpm-centos73-ppc64", "vm-centos73-ppc64",
                                        "POWER8", "ppc64", slaves=power_slaves, ramdisk=False, catg="main")

bld_kvm_rpm_centos73_ppc64le = getRpmBuilder("kvm-rpm-centos73-ppc64le", "vm-centos73-ppc64le",
                                        "POWER8", "ppc64le", slaves=power_slaves, ramdisk=False, catg="main")

bld_kvm_rpm_centos74_aarch64 = getRpmBuilder("kvm-rpm-centos74-aarch64", "vm-centos74-aarch64",
                                        "host", "aarch64", slaves=arm64_slaves, ramdisk=False, catg="main")

bld_kvm_rpm_centos74_amd64 = getRpmBuilder("kvm-rpm-centos74-amd64", "vm-centos74-amd64",
                                        "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False, catg="main")

bld_kvm_rpm_centos74_amd64_debug = getRpmBuilder("kvm-rpm-centos74-amd64-debug", "vm-centos74-amd64",
                                        "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False, catg="main")

#bld_kvm_rpm_fedora_rawhide_amd64 = getRpmBuilder("kvm-rpm-fedora-rawhide-amd64", "vm-fedora-rawhide-amd64",
#                                        "qemu64", "x86_64", ramdisk=False, catg="experimental")

bld_kvm_rpm_fedora666_amd64 = getRpmBuilder("kvm-rpm-fedora666-amd64", "vm-fedora666-amd64",
                                        "qemu64", "x86_64", ramdisk=False, catg="experimental")

bld_kvm_rpm_fedora36_amd64 = getRpmBuilder("kvm-rpm-fedora36-amd64", "vm-fedora36-amd64",
                                        "qemu64", "x86_64", ramdisk=False, catg="main")

bld_kvm_rpm_fedora35_amd64 = getRpmBuilder("kvm-rpm-fedora35-amd64", "vm-fedora35-amd64",
                                        "qemu64", "x86_64", ramdisk=False, catg="main")

bld_kvm_rpm_fedora34_amd64 = getRpmBuilder("kvm-rpm-fedora34-amd64", "vm-fedora34-amd64",
                                        "qemu64", "x86_64", ramdisk=False)

bld_kvm_rpm_rhel9_amd64 = getRpmBuilder("kvm-rpm-rhel9-amd64", "vm-rhel9-amd64",
                                        "host", "x86_64", ramdisk=False)

bld_kvm_rpm_rhel8_amd64 = getRpmBuilder("kvm-rpm-rhel8-amd64", "vm-rhel8-amd64",
                                        "qemu64", "x86_64", ramdisk=False)

bld_kvm_rpm_rhel8_ppc64le = getRpmBuilder("kvm-rpm-rhel8-ppc64le", "vm-rhel8-ppc64le",
                                        "POWER8", "ppc64le", slaves=power_slaves, ramdisk=False)

# Moved to experimental because CentOS 8 is no longer supported
bld_kvm_rpm_centos8_amd64 = getRpmBuilder("kvm-rpm-centos8-amd64", "vm-centos8-amd64",
                                        "qemu64", "x86_64", ramdisk=False, catg="experimental")

bld_kvm_rpm_rocky84_amd64 = getRpmBuilder("kvm-rpm-rocky84-amd64", "vm-rocky84-amd64",
                                        "qemu64", "x86_64", ramdisk=False)

bld_kvm_rpm_alma84_amd64 = getRpmBuilder("kvm-rpm-alma84-amd64", "vm-alma84-amd64",
                                        "qemu64", "x86_64", ramdisk=False)

def getGalRpmBuilder(name, kvm_image, cpu, arch, slaves=kvm_slaves, ramdisk=True):

    kvm_build_image = getGaleraBuildImage(kvm_image)
    rpm_fact = BuildFactory()

    distro = name.split('-')[2]
    args = ["--port="+getport(), "--memory="+memory_def, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600",
            "--logfile=kernel_"+getport()+".log"]
    if ramdisk:
        args = args + ["--work-image=/dev/shm/vm-tmp-"+getport()+".qcow2"]
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    rpm_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    rpm_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_build_image+".qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-install.qcow2",
                 "/kvm/vms/"]))
    rpm_fact.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        logfiles={"kernel": "kernel_"+getport()+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_build_image+".qcow2"] + args + ["vm-tmp-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("""
set -ex
# Nirbhay: Use system boost
case `hostname` in centos6*) sudo rm -rf /usr/local/src/boost_1_49_0/ ;; esac
cd buildbot
mkdir rpms srpms
git clone -b %(branch)s "https://github.com/MariaDB/galera.git" build
cd build
git reset --hard %(revision)s
git submodule init
git submodule update
./scripts/build.sh -p
cp `find *.rpm -maxdepth 1 -type f` ../rpms
"""),
        "= rm -Rf rpms srpms && mkdir rpms srpms",
        "= scp -r -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:buildbot/*rpms .",
    ]))
    addPackageUploadStep(rpm_fact, 'rpms')
    rpm_fact.addStep(Test(
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        logfiles={"kernel": "kernel_"+getport()+".log"},
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["vm-tmp-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+getport()+" "+kvm_scpopt+" */rpms buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
cd buildbot
if [ -f /usr/bin/subscription-manager ] ; then sudo subscription-manager refresh ;fi
sudo yum -y --nogpgcheck install rpms/*.rpm
garbd --version
""")]))

    return {'name': name, 'slavenames': slaves, 'builddir': name, 'factory': rpm_fact,
            "nextBuild": myNextBuild,
            "category": "galera"}

gal_bld_kvm_rpm_centos73_ppc64 = getGalRpmBuilder("kvm-rpm-centos73-ppc64-gal", "vm-centos73-ppc64",
                                        "POWER8", "ppc64", slaves=power_slaves, ramdisk=False)

gal_bld_kvm_rpm_centos73_ppc64le = getGalRpmBuilder("kvm-rpm-centos73-ppc64le-gal", "vm-centos73-ppc64le",
                                        "POWER8", "ppc64le", slaves=power_slaves, ramdisk=False)

gal_bld_kvm_rpm_centos74_aarch64 = getGalRpmBuilder("kvm-rpm-centos74-aarch64-gal", "vm-centos74-aarch64",
                                        "host", "aarch64", slaves=arm64_slaves, ramdisk=False)

gal_bld_kvm_rpm_centos74_amd64 = getGalRpmBuilder("kvm-rpm-centos74-amd64-gal", "vm-centos74-amd64",
                                        "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)

#gal_bld_kvm_rpm_fedora_rawhide_amd64 = getGalRpmBuilder("kvm-rpm-fedora-rawhide-amd64-gal", "vm-fedora-rawhide-amd64",
#                                        "qemu64", "x86_64", ramdisk=False)

gal_bld_kvm_rpm_fedora666_amd64 = getGalRpmBuilder("kvm-rpm-fedora666-amd64-gal", "vm-fedora666-amd64",
                                        "qemu64", "x86_64", ramdisk=False)

gal_bld_kvm_rpm_fedora36_amd64 = getGalRpmBuilder("kvm-rpm-fedora36-amd64-gal", "vm-fedora36-amd64",
                                        "qemu64", "x86_64", ramdisk=False)

gal_bld_kvm_rpm_fedora35_amd64 = getGalRpmBuilder("kvm-rpm-fedora35-amd64-gal", "vm-fedora35-amd64",
                                        "qemu64", "x86_64", ramdisk=False)

gal_bld_kvm_rpm_fedora34_amd64 = getGalRpmBuilder("kvm-rpm-fedora34-amd64-gal", "vm-fedora34-amd64",
                                        "qemu64", "x86_64", ramdisk=False)

gal_bld_kvm_rpm_rhel9_amd64 = getGalRpmBuilder("kvm-rpm-rhel9-amd64-gal", "vm-rhel9-amd64",
                                        "host", "x86_64", ramdisk=False)

gal_bld_kvm_rpm_rhel8_amd64 = getGalRpmBuilder("kvm-rpm-rhel8-amd64-gal", "vm-rhel8-amd64",
                                        "qemu64", "x86_64", ramdisk=False)

gal_bld_kvm_rpm_rhel8_ppc64le = getGalRpmBuilder("kvm-rpm-rhel8-ppc64le-gal", "vm-rhel8-ppc64le",
                                        "POWER8", "ppc64le", slaves=power_slaves, ramdisk=False)

gal_bld_kvm_rpm_centos8_amd64 = getGalRpmBuilder("kvm-rpm-centos8-amd64-gal", "vm-centos8-amd64",
                                        "qemu64", "x86_64", ramdisk=False)

gal_bld_kvm_rpm_rocky84_amd64 = getGalRpmBuilder("kvm-rpm-rocky84-amd64-gal", "vm-rocky84-amd64",
                                        "qemu64", "x86_64", ramdisk=False)

gal_bld_kvm_rpm_alma84_amd64 = getGalRpmBuilder("kvm-rpm-alma84-amd64-gal", "vm-alma84-amd64",
                                        "qemu64", "x86_64", ramdisk=False)

def getGalSrcBuilder(name, kvm_image, cpu, arch, slaves=kvm_slaves, ramdisk=True):

    kvm_build_image = getGaleraBuildImage(kvm_image)
    rpm_fact = BuildFactory()

    distro = name.split('-')[2]
    args = ["--port="+getport(), "--memory="+memory_def, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600",
            "--logfile=kernel_"+getport()+".log"]
    if ramdisk:
        args = args + ["--work-image=/dev/shm/vm-tmp-"+getport()+".qcow2"]
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    rpm_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    rpm_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_build_image+".qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-install.qcow2",
                 "/kvm/vms/"]))
    rpm_fact.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        logfiles={"kernel": "kernel_"+getport()+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_build_image+".qcow2"] + args + ["vm-tmp-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("""
set -ex
# Nirbhay: Use system boost
case `hostname` in centos6*) sudo rm -rf /usr/local/src/boost_1_49_0/ ;; esac
cd buildbot
mkdir src
git clone -b %(branch)s "https://github.com/MariaDB/galera.git" build
cd build
git reset --hard %(revision)s
git submodule init
git submodule update
./scripts/build.sh -a
galera_version=$(basename galera-*.tar.gz .tar.gz)
git submodule foreach 'cp -rvi * ../../galera-*/${path}/'
gunzip ${galera_version}.tar.gz
tar --update -vf ${galera_version}.tar ${galera_version}/
gzip ${galera_version}.tar
cp ${galera_version}.tar.gz ../src
"""),
        "= rm -Rf src && mkdir src",
        "= scp -r -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:buildbot/src .",
    ]))
    addPackageUploadStep(rpm_fact, 'src')

    return {'name': name, 'slavenames': slaves, 'builddir': name, 'factory': rpm_fact,
            "nextBuild": myNextBuild,
            "category": "galera"}

gal_bld_kvm_src_centos8_amd64 = getGalSrcBuilder("kvm-src-centos8-amd64-gal", "vm-centos8-amd64",
                                        "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)


#-------------------------------------------------------------------------------
# SUSE and openSUSE package factory
#-------------------------------------------------------------------------------
def getZypBuilder(name, kvm_image, cpu, arch, slaves=kvm_slaves, ramdisk=True, catg="main"):
    distro = name.split('-')[2]
    arch= name.split('-')[3]
    m = re.search("^([A-Za-z]+)([0-9]*)",distro)
    if m:
        dist_name = m.group(1)
        dist_num = m.group(2)

    kvm_build_image = kvm_image + "-build.qcow2"

    kvm_install_image = kvm_image + "-install.qcow2"

    zyp_fact = BuildFactory()
    args = ["--port="+getport(), "--memory="+memory_def, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600",
            "--logfile=kernel_"+getport()+".log"]
    if ramdisk:
        args = args + ["--work-image=/dev/shm/vm-tmp-"+getport()+".qcow2"]
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    zyp_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    zyp_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_build_image,
                 "bb01.mariadb.net::kvm/vms/"+kvm_install_image,
                 "/kvm/vms/"]))
    zyp_fact.addStep(DownloadSourceTarball())
    zyp_fact.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
rm -f compiler_warnings.supp
#tar zxf "%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
tar zxf "/tmp/buildcache/%(tarbuildnum)s:%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
exit 0  # best-effort, not fatal if no suppression file
""")]))

    zyp_fact.addStep(SetPropertyFromCommand(
        name="main_tree",
        doStepIf=isMainTree,
        hideStepIf=(lambda results, s: results==SKIPPED),
        property="is_main_tree",
        command="echo yes"))
        
    zyp_fact.addStep(SetPropertyFromCommand(
        name="not_main_tree",
        doStepIf=(lambda(step): not isMainTree(step)),
        hideStepIf=(lambda results, s: results==SKIPPED),
        property="is_main_tree",
        command="echo no"))

    zyp_fact.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        logfiles={"kernel": "kernel_"+getport()+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_build_image] + args + ["vm-tmp-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        ScpSourceIntoVM(),
        WithProperties("""
set -ex
cd buildbot
mkdir padding_for_CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX
cd padding_for_CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX
mkdir rpms srpms
tar zxf "../%(distname)s"
cd "%(distdirname)s"
if [ -f /usr/local/lib/libjemalloc_pic.a ]; then
  JE=-DWITH_JEMALLOC=static
fi
cmake .  -DBUILD_CONFIG=mysql_release $JE -DCMAKE_COMMAND_DEP=cmake -DRPM=""" + distro + """
umask 022
if grep -qw CPACK_RPM_SOURCE_PKG_BUILD_PARAMS CPackSourceConfig.cmake; then
  make package_source
  mv *.src.rpm ../srpms/
fi
make -j4 package VERBOSE=1
mv *.rpm ../rpms/
"""),
        "= rm -Rf rpms srpms && mkdir rpms srpms",
        "= scp -r -P " + getport() + " "+kvm_scpopt+" buildbot@localhost:buildbot/padding_for_CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX/*rpms .",
    ]))
    addPackageArchiveStep(zyp_fact, "rpms srpms", "%(tarbuildnum)s")
    dist_arch= name.split('-')[2] + "-" + name.split('-')[3]


    zyp_fact.addStep(Test(
        name="providers",
        description=["checking", "compression", "providers"],
        descriptionDone=["check", "compression", "providers"],
        timeout=1200,
        env={"TERM": "vt102"},
        command=["runvm"] + args +["--logfile=kernel_"+getport()+".log", "vm-tmp-"+getport()+".qcow2",
        WithProperties("""
set -ex
cd buildbot
num_providers_expected=`ls padding_for_CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX/%(distdirname)s/plugin/ | grep -E '^provider' | wc -l`
if [ $num_providers_expected -eq 0 ] ; then
  echo "No expected providers found, skipping the test"
  exit
fi

ls padding_for_CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX/rpms/MariaDB*-provider*

num_providers_built=`ls padding_for_CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX/rpms/MariaDB*-provider*.rpm | grep -v debuginfo | wc -l`

if [ $num_providers_built -ne $num_providers_expected ] ; then
  echo "ERROR: Found $num_providers_built provider libraries, expected $num_providers_expected"
  exit 1
fi
""")]))

#---------------------------------
# ZYP packages: smoke test
#---------------------------------

    zyp_fact.addStep(getMTR(
            name="mtr-smoke-test",
#            doStepIf=(lambda(step): "elenst" in step.getProperty("branch") or isMainTree(step)),
            doStepIf=False,
            description=["running", "MTR", "smoke", "test"],
            descriptionDone=["MTR", "smoke", "test"],
            test_type="nm",
            test_info="Normal run, no --ps-protocol",
            logfiles={"kernel": "kernel_"+getport()+".log", "syslog": "daemon.log"},
            mtr_subdir=".",    # Where we scp vardir to
            command=["runvm"] + args + ["--logfile=kernel_"+getport()+".log", "vm-tmp-"+getport()+".qcow2",
        WithProperties("""
set -ex
cd "buildbot/padding_for_CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX/%(distdirname)s/mysql-test"
res=0
if [ -e collections/smoke_test ] ; then
  if ! NO_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl `cat collections/smoke_test` --verbose-restart --vardir="$(readlink -f /dev/shm/var)" --parallel=4 --force --max-save-core=0 --max-save-datadir=1
  then
    res=1
  fi
  rm -rf /home/buildbot/var
  cp -r /dev/shm/var /home/buildbot
else
  echo "WARNING: Smoke test collection was not found"
fi
exit $res
"""),
        WithProperties(
              "!= rm -Rf var/ ; scp -rp -P " + getport() + " " + kvm_scpopt +
              " buildbot@localhost:/home/buildbot/var/ . || :")]))

    zyp_fact.addStep(SetPropertyFromCommand(property="systemdCapability", command="echo no"))
    zyp_fact.addStep(SetPropertyFromCommand(
        doStepIf=in_systemdBuilders,
        property="systemdCapability",
        command="echo yes"))

    zyp_fact.addStep(SetPropertyFromCommand(
        name="major_version",
        hideStepIf=(lambda results, s: results==SKIPPED),
        property="majorVersion",
        command=WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.5\\\\|10\\\\.[0-9]*\\\\).*/\\\\1/\\\"\"")))

    zyp_fact.addStep(SetPropertyFromCommand(
        name="unset_tcmalloc",
        property="tcmalloc",
        command="echo no",
    ))

    zyp_fact.addStep(Test(
        name="install",
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        haltOnFailure=True,
        warningPattern=testWarningPattern,
        logfiles={"kernel": "kernel_"+getport()+".log"},
        env={"TERM": "dumb"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_install_image] + args + ["vm-tmp-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+getport()+" "+kvm_scpopt+" rpms buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
df -kT
cd buildbot
case "%(branch)s" in
*mdev10416*)
  sudo cat /etc/sysconfig/selinux | grep SELINUX || true
  sudo sh -c \"PATH=$PATH:/usr/sbin getenforce || true\"
  sudo sh -c \"PATH=$PATH:/usr/sbin setenforce Enforcing || true\"
  sudo sh -c \"PATH=$PATH:/usr/sbin getenforce || true\"
  ;;
esac
rpm -qa | { grep -iE 'maria|mysql|galera' || true; }

arch=""" + arch + """
distro=""" + distro + """

case "%(branch)s" in
# 3.x for 10.2-10.3 and for MDEV-17688, 10.2 with 3.x connector
*10.[2-3]*|*3.[0-9]*)
  GALERA_VERSION=3
  ;;
*)
  GALERA_VERSION=4
  ;;
esac

sudo zypper -n install wget || true

cd rpms
if ! wget https://hasky.askmonty.org/builds/mariadb-${GALERA_VERSION}.x/latest/kvm-zyp-${distro}-${arch}-gal/rpms/ --recursive -np -R "index.html*" -nH --cut-dirs=5 --no-check-certificate ; then
  echo "Test warning"": wget exited with a non-zero code, but it may be bogus"
  if ! `ls rpms/galera*.rpm` ; then
    echo "ERROR: Could not download the Galera library"
    exit 1
  fi
fi
cd ..

sudo zypper --non-interactive refresh -sf
sudo zypper --no-gpg-checks install -y rpms/*.rpm

galera_path=`echo /usr/lib*/galera*/libgalera_smm.so`

sudo sh -c "echo '
[galera]
wsrep_provider=$galera_path
' > /etc/my.cnf.d/galera.cnf"
cat /etc/my.cnf.d/galera.cnf

case "%(systemdCapability)s" in
yes)
  if ! sudo systemctl start mariadb ; then
    sudo journalctl -lxn 500 --no-pager | grep -iE 'mysqld|mariadb'
    sudo systemctl -l status mariadb.service --no-pager
    exit 1
  fi
  ;;
no)
  sudo /etc/init.d/mysql restart
  ;;
*)
  echo "It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
  ;;
esac

if [[ "%(branch)s" != *"10."[23]* ]] ; then
  echo "Uninstallation of Cracklib plugin may fail if it wasn't installed, it's quite all right"
  if sudo mysql -e "uninstall soname 'cracklib_password_check.so'" ; then
    reinstall_cracklib_plugin="YES"
  fi
  sudo mysql -e "set password=''"
fi

mysql -uroot -e 'create database if not exists test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t;'

if ls rpms/*.rpm | grep -i columnstore > /dev/null 2>&1 ; then
  mysql --verbose -uroot -e "create database cs; use cs; create table cs.t_columnstore (a int, b char(8)) engine=ColumnStore; insert into cs.t_columnstore select seq, concat('val',seq) from seq_1_to_10; select * from cs.t_columnstore"
  sudo systemctl restart mariadb
  mysql --verbose -uroot -e "select * from cs.t_columnstore; update cs.t_columnstore set b = 'updated'"
  sudo systemctl restart mariadb-columnstore
  mysql --verbose -uroot -e "update cs.t_columnstore set a = a + 10; select * from cs.t_columnstore"
fi

echo "Test for MDEV-18563, MDEV-18526"

set +e
case "%(systemdCapability)s" in
yes)
  sudo systemctl stop mariadb
  ;;
no)
  sudo /etc/init.d/mysql stop
  ;;
esac
sleep 1
sudo pkill -9 mysqld

#for p in /bin /sbin /usr/bin /usr/sbin /usr/local/bin /usr/local/sbin ; do
#  if test -x $p/mysql_install_db ; then
#    sudo $p/mysql_install_db --no-defaults --user=mysql --plugin-maturity=unknown
#  else
#    echo "$p/mysql_install_db does not exist"
#  fi
#done
#sudo mysql_install_db --no-defaults --user=mysql --plugin-maturity=unknown
set +e

sudo ls -l /usr/lib64/mysql/plugin/auth_pam_tool_dir/auth_pam_tool || true

""")]))

    zyp_fact.addStep(getPamStep(args))

#############################
##### TODO-1260 Testing server releases against older clients

    zyp_fact.addStep(
        getSuseMixStep(kvm_image, args, kvm_scpopt, distro, arch,
          doStepIf=False
#          doStepIf=(lambda(step): dist_arch == "sles123-amd64" and (step.getProperty("branch") == "10.0" or step.getProperty("branch") == "10.2" or step.getProperty("branch") == "bb-10.2-release" or step.getProperty("branch") == "bb-10.0-release"))
        )
    )

#############################
##### MTR tests

    zyp_fact.addStep(
        getRpmTestStep(args, kvm_scpopt,
          name="mtr",
          env={"TERM": "vt102"}
        )
    )

    zyp_fact.addStep(
        getRpmTestStep(args, kvm_scpopt, arch,
          name="mtr-s3",
          test_set="s3",
          doStepIf=branch_is_10_5_or_later,
          env={"TERM": "vt102"}
        )
    )

    zyp_fact.addStep(
        getRpmTestStep(args, kvm_scpopt,
          name="mtr-galera",
          test_set="galera",
          env={"TERM": "vt102"}
        )
    )

    zyp_fact.addStep(
        getRpmTestStep(args, kvm_scpopt,
          name="mtr-rocksdb",
          test_set="rocksdb",
          env={"TERM": "vt102"}
        )
    )

    addRpmSrpmTestStep(zyp_fact, kvm_image, args, kvm_scpopt, arch)

#--------------------------------------
# RPM packages (zypper): minor upgrades
#--------------------------------------

    zyp_fact.addStep(
        getRpmUpgradeStep(kvm_image, args, kvm_scpopt, distro, arch,
            test_mode="server"
        )
    )

    zyp_fact.addStep(
        getRpmUpgradeStep(kvm_image, args, kvm_scpopt, distro, arch,
            test_mode="all"
        )
    )

    zyp_fact.addStep(
        getRpmUpgradeStep(kvm_image, args, kvm_scpopt, distro, arch,
            test_mode="deps"
        )
    )

    zyp_fact.addStep(
        getRpmUpgradeStep(kvm_image, args, kvm_scpopt, distro, arch,
            test_mode="columnstore"
        )
    )

##### End of minor upgrade steps

#####
# DO NOT REMOVE
# unless MDEV-9584 is closed as "won't fix".
#
# MDEV-9584, MDEV-9766 - Relaxed rules for yum upgrade
# The file implements additional steps which can only be enabled
# on branches containing fixes for MDEV-9584 and related bugs
# (still stalled/open, as of 2017-11-11).
# There are numerous steps, so probably they shouldn't be enabled
# on all branches

# execfile("/etc/buildbot/builders/rpm_fact_extra_steps.py");
#####

    return {'name': name, 'slavenames': slaves, 'builddir': name, 'factory': zyp_fact,
            "nextBuild": myNextBuild,
            "category": catg}


#-------------------------------------------------------------------------------
# SUSE and openSUSE builders
#-------------------------------------------------------------------------------

bld_kvm_zyp_opensuse150_amd64 = getZypBuilder("kvm-zyp-opensuse150-amd64", "vm-opensuse150-amd64",
                                        "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)

# SLES 11 is no longer supported and hasn't been build for year(s),
# but since it has a tendency to resurrect, we'll move it to experimental for now
bld_kvm_zyp_sles11_x86 = getZypBuilder("kvm-zyp-sles11-x86", "vm-sles11-x86",
                                        "qemu64", "i386", slaves=kvm11_slaves, ramdisk=False, catg="experimental")

bld_kvm_zyp_sles11_amd64 = getZypBuilder("kvm-zyp-sles11-amd64", "vm-sles11-amd64",
                                        "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False, catg="experimental")

bld_kvm_zyp_sles11sp1_amd64 = getZypBuilder("kvm-zyp-sles11sp1-amd64", "vm-sles11sp1-amd64",
                                        "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False, catg="experimental")

bld_kvm_zyp_sles114_amd64 = getZypBuilder("kvm-zyp-sles114-amd64", "vm-sles114-amd64",
                                        "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False, catg="experimental")
bld_kvm_zyp_sles114_x86 = getZypBuilder("kvm-zyp-sles114-x86", "vm-sles114-i386",
                                        "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False, catg="experimental")

# Replaced with sles125
#bld_kvm_zyp_sles123_amd64 = getZypBuilder("kvm-zyp-sles123-amd64", "vm-sles123-amd64",
#                                        "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)

bld_kvm_zyp_sles125_amd64 = getZypBuilder("kvm-zyp-sles125-amd64", "vm-sles125-amd64",
                                        "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)

bld_kvm_zyp_sles150_amd64 = getZypBuilder("kvm-zyp-sles150-amd64", "vm-sles150-amd64",
                                        "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)
#-------------------------------------------------------------------------------
# SUSE and openSUSE package factory for Galera
#-------------------------------------------------------------------------------
def getGalZypBuilder(name, kvm_image, cpu, arch, slaves=kvm_slaves, ramdisk=True, catg="galera"):
    distro = name.split('-')[2]

    kvm_build_image = getGaleraBuildImage(kvm_image) + ".qcow2"
    kvm_install_image = kvm_image + "-install.qcow2"

    zyp_fact = BuildFactory()
    args = ["--port="+getport(), "--memory="+memory_def, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600",
            "--logfile=kernel_"+getport()+".log"]
    if ramdisk:
        args = args + ["--work-image=/dev/shm/vm-tmp-"+getport()+".qcow2"]
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    zyp_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    zyp_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_build_image,
                 "bb01.mariadb.net::kvm/vms/"+kvm_install_image,
                 "/kvm/vms/"]))
    zyp_fact.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        logfiles={"kernel": "kernel_"+getport()+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_build_image] + args + ["vm-tmp-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("""
set -ex
cd buildbot
mkdir rpms srpms
git clone -b %(branch)s "https://github.com/MariaDB/galera.git" build
cd build
git reset --hard %(revision)s
git submodule init
git submodule update
./scripts/build.sh -p
cp `find *.rpm -maxdepth 1 -type f` ../rpms
"""),
        "= rm -Rf rpms srpms && mkdir rpms srpms",
        "= scp -r -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:buildbot/*rpms .",
    ]))
    addPackageUploadStep(zyp_fact, 'rpms')
    zyp_fact.addStep(Test(
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        logfiles={"kernel": "kernel_"+getport()+".log"},
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_install_image] + args + ["vm-tmp-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+getport()+" "+kvm_scpopt+" */rpms buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
cd buildbot
wget http://bb02.mariadb.org/RPM-GPG-KEY-MariaDB
sudo rpm --import RPM-GPG-KEY-MariaDB
sudo zypper --non-interactive refresh -sf
sudo zypper --no-gpg-checks install -y rpms/*.rpm
garbd --version
""")]))
    return {'name': name, 'slavenames': slaves, 'builddir': name, 'factory': zyp_fact,
            "nextBuild": myNextBuild,
            "category": catg}

#-------------------------------------------------------------------------------
# SUSE and openSUSE builders for Galera
#-------------------------------------------------------------------------------
gal_bld_kvm_zyp_opensuse150_amd64 = getGalZypBuilder("kvm-zyp-opensuse150-amd64-gal", "vm-opensuse150-amd64",
                                     "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)
# Replaced with sles125
#gal_bld_kvm_zyp_sles123_amd64     = getGalZypBuilder("kvm-zyp-sles123-amd64-gal", "vm-sles123-amd64",
#                                     "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)
gal_bld_kvm_zyp_sles125_amd64     = getGalZypBuilder("kvm-zyp-sles125-amd64-gal", "vm-sles125-amd64",
                                     "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)
gal_bld_kvm_zyp_sles150_amd64     = getGalZypBuilder("kvm-zyp-sles150-amd64-gal", "vm-sles150-amd64",
                                     "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)

#-------------------------------------------------------------------------------

# The class Test seems to not have a direct way to completely disable
# warning parsing in logs. So use this impossible-to-match regexp
# instead.

impossibleRe = r"\Z.\A"

#-----------------------------------------------------
# Non-default MTR test suites for deb packages
#-----------------------------------------------------

def getDebExtraTestStep(args, kvm_scpopt, arch, test_set, **kwargs):

    return getMTR(
            description=["running", test_set, "MTR", "suites"],
            descriptionDone=[test_set, "MTR", "suites"],
            test_type="nm",
            test_info="Normal run, no --ps-protocol",
            logfiles={"kernel": "kernel_"+getport()+".log", "syslog": "daemon.log"},
            mtr_subdir=".",    # Where we scp vardir to
            command=["runvm"] + args + ["--logfile=kernel_"+getport()+".log", "vm-tmp-"+getport()+".qcow2",
        WithProperties("""

# Check that the installation worked, and we have the installed server
if ! dpkg -l | grep "mariadb-server"
then
  echo "Pre-MTR ERROR: previous server installation failed, cannot run MTR tests"
  exit 1
fi

cd /usr/share/mysql/mysql-test

test_set="""+test_set+"""

arch="""+arch+"""
if [[ "$arch" == "x86" ]] ; then
  arch=i386
fi

set -ex
res=0

if [ "$test_set" == "galera" ] ; then
  case "%(branch)s" in
  *10.[2-3]*)
    galera_suites=galera,wsrep,galera_3nodes
    ;;
  *)
    galera_suites=galera,wsrep,galera_3nodes,galera_sr
    ;;
  esac
  if ! perl mysql-test-run.pl --verbose-restart --suite=$galera_suites --vardir="$(readlink -f /dev/shm/var)" --parallel=2 --force --retry=3 --max-save-core=0 --max-save-datadir=1
  then
    res=1
  fi
elif [ "$test_set" == "rocksdb" ] ; then
  set +o pipefail
  if ! perl mysql-test-run.pl rocksdb.1st --vardir="$(readlink -f /dev/shm/var)" 2>&1 | grep -E 'RocksDB is not compiled|Could not find' ; then
    if ! perl mysql-test-run.pl --suite=rocksdb* --skip-test=rocksdb_hotbackup* --verbose-restart --vardir="$(readlink -f /dev/shm/var)" --parallel=4 --force --retry=3 --max-save-core=0 --max-save-datadir=1 ; then
      res=1
    fi
  else
    echo "WARNING: RocksDB engine not found"
  fi
elif [ "$test_set" == "s3" ] ; then
  set +o pipefail
  if perl mysql-test-run.pl s3.basic --vardir="$(readlink -f /dev/shm/var)" 2>&1 | grep -E 'Need S3 engine' ; then
    echo "Test warning"": S3 engine not found, tests will be skipped"
    exit 0
  fi
 
  if ! wget ftp://ftp.askmonty.org/public/minio/minio-linux-${arch} -O ~/minio ; then
    echo "ERROR: Could not download MinIO server for Linux ${arch}"
    echo "Check if it is available at http://dl.min.io/server/minio/release and store as ftp://ftp.askmonty.org/public/minio/minio-linux-${arch}"
    exit 1
  fi
  chmod a+x ~/minio
  MINIO_ACCESS_KEY=minio MINIO_SECRET_KEY=minioadmin ~/minio server /tmp/shared 2>&1 &
  if ! wget ftp://ftp.askmonty.org/public/minio/mc-linux-${arch} -O ~/mc ; then
    echo "ERROR: Could not download MinIO client for Linux ${arch}"
    echo "Check if it is available at http://dl.min.io/client/mc/release/ and store as ftp://ftp.askmonty.org/public/minio/mc-linux-${arch}"
    exit 1
  fi
  chmod a+x ~/mc

  # Try a few times in case the server hasn't finished initializing yet
  res=1
  for i in 1 2 3 4 5 ; do
    ### Cannot use mc alias, because the mc version for i386 is old, it doesn't support it
    # if ~/mc alias set local http://127.0.0.1:9000  minio minioadmin ; then
    if ~/mc config host add local http://127.0.0.1:9000  minio minioadmin ; then
      res=0
      break
    fi
    sleep 1
  done
  if [ "$res" == "1" ] ; then
    echo "ERROR: Couldn't configure MinIO server"
    exit 1
  fi
  # i386 has an old version of minio/mc, which doesn't seem stable. Try a few times before giving up
  res=1
  for i in 1 2 3 4 5 ; do
    if ~/mc mb --ignore-existing local/storage-engine ; then
      res=0
      break
    fi
    sleep 1
  done
  if [ "$res" == "1" ] ; then
    echo "ERROR: Couldn't create the bucket in MinIO"
    exit 1
  fi

  if ! perl mysql-test-run.pl --suite=s3 --verbose-restart --vardir="$(readlink -f /dev/shm/var)" --force --max-save-core=0 --max-save-datadir=1 ; then
    res=1
  fi
else
  echo "ERROR: Unknown test set $test_set"
  res=1
fi

rm -rf /home/buildbot/var
cp -r /dev/shm/var /home/buildbot
exit $res
"""),
        WithProperties(
              "!= rm -Rf var/ ; scp -rp -P " + getport() + " " + kvm_scpopt +
              " buildbot@localhost:/home/buildbot/var/ . || :")],
        **kwargs)

#-----------------------------------------------------
# Upgrade from pre-installed versions for deb packages
#-----------------------------------------------------

def getDebUpgradeStep(kvm_image, kvm_image_variant, args, kvm_scpopt,
                    dist_name, version_name, arch, upgrade_from,
                    **kwargs):

    return Test(
        description=["testing", "upgrade", "from", upgrade_from],
        descriptionDone=["upgrade", "from", upgrade_from],
        logfiles={"kernel": "kernel_"+getport()+".log", "syslog": "daemon.log"},
        warningPattern=testWarningPattern,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-"+kvm_image_variant+".qcow2"] + args + ["--logfile=kernel_"+getport()+".log", "vm-tmp-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+getport()+" "+kvm_scpopt+" debs buildbot@localhost:buildbot/",
        WithProperties("""
set -ex

dpkg -l | grep -iE 'maria|mysql|galera' || true

old_ver=`dpkg -l | grep -iE 'mysql-server-|mariadb-server-' | head -1 | awk '{print $2}' | sed -e "s/.*\(mysql\|mariadb\)-server-\(5\.[567]\|10\.[0-9]\).*/\\1-\\2/"`
# version_arch is "trusty-ppc64le" etc.
version_arch="""+version_name+"-"+arch+"""
dist_name="""+dist_name+"""
version_name="""+version_name+"""
package_version=`ls debs/binary/mariadb-server_* | head -n 1 | sed -e 's/.*mariadb-server_\([0-9]*\.[0-9]*\.[0-9]*\).*/\\1/'`

packages_to_install="mariadb-server mariadb-client libmariadbclient18"

case "$old_ver-%(majorVersion)s" in

mariadb-10.[0-9]*-10.[0-9]*)
  if [[ "$old_ver" > "mariadb-%(majorVersion)s" ]] ; then
    echo "Test warning"": Downgrade from $old_ver to %(majorVersion)s is not expected to work"
    exit
  fi
  if [[ "$old_ver" == "mariadb-%(majorVersion)s" ]]
  then
    # 3rd column is the package version, e.g. 10.1.23-9+deb9u1 vs 10.1.23+maria-1~stretch
    if ! dpkg -l | grep -i mariadb-server- | head -1 | awk '{print $3}' | grep maria
    then
      echo "Test warning"": MDEV-11979 - cannot upgrade from Debian packages to MariaDB packages of the same major version"
      exit
    fi
  fi
  ;;
mysql*-8.0-*)
  echo "Test warning"": live upgrade from MySQL 8.0 is not supported, re-installation with dump/restore will be performed instead"
  replace_incompatible_version=8.0
  ;;
*)
  echo "Upgrade from MySQL $old_ver to MariaDB %(majorVersion)s will be attempted"
  ;;
esac

case "%(branch)s" in
*10.[2-3]*)
  GALERA_VERSION=3
  ;;
*)
  GALERA_VERSION=4
  ;;
esac

mkdir galera_download
cd galera_download
if ! wget https://hasky.askmonty.org/builds/mariadb-${GALERA_VERSION}.x/latest/kvm-deb-${version_arch}-gal/debs/ --recursive -np -R "index.html*" -nH --cut-dirs=4 --no-check-certificate ; then
  echo "WARNING: wget exited with a non-zero code, but it may be bogus"
  if ! `ls debs/binary/galera*.deb` ; then
    echo "ERROR: Could not download the Galera library"
    exit 1
  fi
fi
mv debs ../buildbot/galera-debs
cd ..
rm -rf galera_download
sudo sh -c 'echo "deb [trusted=yes allow-insecure=yes] file:///home/buildbot/buildbot/galera-debs binary/" >> /etc/apt/sources.list'
sudo sh -c 'echo "deb-src [trusted=yes allow-insecure=yes] file:///home/buildbot/buildbot/galera-debs source/" >> /etc/apt/sources.list'

cd buildbot

chmod -cR go+r debs galera-debs
# Sometimes apt-get update fails because the repo is being updated.
for i in 1 2 3 4 5 6 7 8 9 10 ; do
  if sudo apt-get update ; then
    break
  fi
  echo "Test warning"": apt-get update failed, retrying ($i)"
  sleep 10
done

# On some of VMs the password might be not pre-created as expected
if mysql -uroot -e "set password = password('rootpass')" ; then
  echo "The password has now been set"
# Or, Debian packages local root might be using unix_socket plugin even with older versions.
# Change it to the normal password authentication
elif sudo mysql -uroot -e "update mysql.user set plugin = 'mysql_native_password'; flush privileges; set password = password('rootpass')" ; then
  echo "The error above does not mean a test failure, it's one of expected outcomes"
  echo "Unix socket authentication has been unset"
else
  echo "Errors above do not mean a test failure, it's one of expected outcomes"
fi


mysql -uroot -prootpass -e "use mytest; select * from t"
mysql -uroot -prootpass -e "use mytest; drop table if exists upgrade_test; create table upgrade_test (pk int primary key auto_increment, c char(64), v varchar(2048), d date, t time, dt datetime, ts timestamp) engine=InnoDB; begin; insert into upgrade_test values (null, 'test', 'test', date(now()), time(now()), now(), now());  insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; commit" --force
mysql -uroot -prootpass --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.old
old_version=`cat /tmp/version.old`

# If the tested branch has the same version as the public repository,
# upgrade won't work properly. For releasable branches, we will return an error
# urging to bump the version number. For other branches, we will abort the test
# with a warning (which nobody will read). This is done upon request from
# development, as temporary branches might not be rebased in a timely manner
if [ "$package_version" == "$old_version" ] ; then
    echo "ERROR: Server version $package_version has already been released. Bump the version number!"
    for b in """+RELEASABLE_BRANCHES+""" ; do
        if [ "$b" == "%(branch)s" ] ; then
            exit 1
        fi
    done
    echo "The test will be skipped, as upgrade will not work properly"
    exit 0
fi

mysql -uroot -prootpass -e "CREATE DATABASE autoinc; CREATE TABLE autoinc.t_autoinc(a SERIAL) ENGINE=InnoDB SELECT 42 a"
mysql -uroot -prootpass -e "CREATE TABLE autoinc.t_autoinc2(a SERIAL) ENGINE=InnoDB; BEGIN; INSERT INTO autoinc.t_autoinc2 VALUES (NULL),(NULL); ROLLBACK; SHOW CREATE TABLE autoinc.t_autoinc2 \G"

if [ -n "$replace_incompatible_version" ] ; then
  mysqldump -uroot -prootpass -E --triggers --routines --databases mytest autoinc > ~/mysql.dump
# See notes in MDEV-21179, possibly more adjustments will have to be added here with time
  sed -i 's/utf8mb4_0900_ai_ci/utf8mb4_general_ci/g' ~/mysql.dump

  sudo apt-get purge -y `dpkg -l | grep mysql | grep "$replace_incompatible_version" | grep -E '^ii' | awk '{ print $2 }' | xargs`
# On some reason apt-get purge for 8.0.18 doesn't remove /var/lib/mysql, maybe because mysql-common-5.8 remains
  sudo mv /var/lib/mysql /var/lib/mysql.backup.$replace_incompatible_version || true
fi

sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y $packages_to_install"

if [ -n "$replace_incompatible_version" ] ; then
# Since we re-installed system tables, we need to adjust the password again
  if sudo mysql -uroot -e "set password = password('rootpass')" ; then
    echo "The password has now been set"
  elif sudo mysql -uroot -e "update mysql.user set plugin = 'mysql_native_password'; flush privileges; set password = password('rootpass')" ; then
    echo "The error above does not mean a test failure, it's one of expected outcomes"
    echo "Unix socket authentication has been unset"
  else
    echo "Errors above do not mean a test failure, it's one of expected outcomes"
  fi
  mysql -uroot -prootpass < ~/mysql.dump
fi

mysql -uroot -prootpass --skip-column-names -e "INSERT INTO autoinc.t_autoinc SET a=NULL;  SELECT COUNT(*) Expect_2 FROM autoinc.t_autoinc WHERE a>=42"
echo "Prior to MDEV-6076, the next SELECT would return 1. After MDEV-6076, it should be 3"
mysql -uroot -prootpass --skip-column-names -e "INSERT INTO autoinc.t_autoinc2 VALUES (NULL); SELECT * FROM autoinc.t_autoinc2"

mysql -uroot -prootpass -e "select @@version, @@version_comment"
mysql -uroot -prootpass --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.new

echo "The next line must show a difference between versions, otherwise it's a failure"
echo "It can be a false positive if we forgot to bump version after release,"
echo "or if the tree is based on an old version"
! diff -u  /tmp/version.old  /tmp/version.new

sudo cat /var/lib/mysql/mysql_upgrade_info | awk -F'-' '{ print $1 }' > /tmp/version.upgrade
# mysql_upgrade is run automatically in deb packages
# TODO: something weird goes on with mysql_upgrade, to be checked later
#diff -u /tmp/version.new /tmp/version.upgrade
cat /tmp/version.new
cat /tmp/version.upgrade
case "%(systemdCapability)s" in
yes)
  ls -l /lib/systemd/system/mariadb.service
  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
  ls -l /etc/init.d/mysql || true
  systemctl -l --no-pager status mariadb.service
  systemctl -l --no-pager status mariadb
  systemctl -l --no-pager status mysql
  systemctl -l --no-pager status mysqld
  systemctl --no-pager is-enabled mariadb
  sudo systemctl --no-pager restart mariadb
  systemctl -l --no-pager status mariadb
  sudo journalctl -lxn 500 --no-pager | grep -iE 'mysqld|mariadb'
  # It does not do the same as systemctl now
  # /etc/init.d/mysql status
  ;;
no)
  echo "Steps related to systemd will be skipped"
  ;;
*)
  echo "It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
  ;;
esac

mysql -uroot -prootpass -e "use mytest; select * from t; select count(*) from upgrade_test"

# Workaround for MDEV-20298
# and for libdbd-mariadb-perl not "pretending" to be DBD:mysql 
#if ! dpkg -l | grep -E 'libdbd-mysql-perl|libdbd-mariadb-perl' ; then
if ! dpkg -l | grep libdbd-mysql-perl ; then
  sudo apt-get install -y libdbd-mysql-perl
fi
perl -MDBD::mysql -e print

"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:daemon.log ."],
        **kwargs)

def getDebGaleraSstStep(port, version_name, arch, args, kvm_scpopt, sst_mode, **kwargs):

    def if_run_galera_test(step):
        if sst_mode == 'xtrabackup-v2':
            if branch_is_10_3_or_later(step):
                return False # because of "The redo log was created with MariaDB 10.3.6"
            return False # because of MDEV-12289, this might be fixable
            if arch not in ['x86', 'i386', 'amd64', 'x86_64']:
                return False # no xtrabackup for other architectures
            if arch in ['x86', 'i386'] and version_name in ['artful','stretch']:
                return False # no 32-bit debs for ubuntu stable and debian 9
        return True

    return Test(
        name="galera-sst-"+sst_mode,
        warningPattern=testWarningPattern,
        description=["testing", "galera", "SST", sst_mode],
        descriptionDone=["galera", "SST", "with", sst_mode],
        logfiles={"kernel": "kernel_"+port+".log", "syslog": "daemon.log", "node1": "node1.err", "node2": "node2.err", "node3": "node3.err", "node1.mariabackup.prepare": "node1.mariabackup.prepare.log", "node2.mariabackup.prepare": "node2.mariabackup.prepare.log", "node3.mariabackup.prepare": "node3.mariabackup.prepare.log", "node1.mariabackup.move": "node1.mariabackup.move.log", "node2.mariabackup.move": "node2.mariabackup.move.log", "node3.mariabackup.move": "node3.mariabackup.move.log", "node1.mariabackup.backup": "node1.mariabackup.backup.log", "node2.mariabackup.backup": "node2.mariabackup.backup.log", "node3.mariabackup.backup": "node3.mariabackup.backup.log"},
        env={"TERM": "vt102"},
        doStepIf=if_run_galera_test,
        command=["runvm"] + args + ["--logfile=kernel_"+port+".log", "--base-image=vm-tmp-"+port+".qcow2", "vm-tmp2-"+port+".qcow2",
        WithProperties("""
set -xv
sst_mode="""+sst_mode+"""
version_name="""+version_name+"""
arch="""+arch+"""

for _i in 1 2 3 ; do
  if which curl ; then
    curl -f -O https://raw.githubusercontent.com/MariaDB/mariadb.org-tools/master/buildbot/steps/galera_sst.deb.sh
  elif which wget ; then
    wget --timeout=20 https://raw.githubusercontent.com/MariaDB/mariadb.org-tools/master/buildbot/steps/galera_sst.deb.sh -O galera_sst.deb.sh > /dev/null
  fi
  if [ "$?" == "0" ] && [ -e ./galera_sst.deb.sh ] ; then
    break
  else
    # In case some garbage was written into the file upon the failed attempt to download
    rm -f ./galera_sst.deb.sh
    sleep 2
  fi
done

if ! [ -e ./galera_sst.deb.sh ] ; then
  echo "Failed to download galera_sst.deb.sh"
  exit 1
fi

echo "##################################################################"
echo "# To get the script steps without having to copy-paste them"
echo "# one by onefrom the output below, see the attached step-script.sh"
echo "##################################################################"

set -x
. ./galera_sst.deb.sh

"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:daemon.log .",
        "!= rm -f step-script.sh; scp -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:/home/buildbot/galera_sst.deb.sh ./step-script.sh || true",
        WithProperties(
              "!= rm -Rf node*.err ; scp -rp -P " + port + " " + kvm_scpopt +
              " buildbot@localhost://home/buildbot/sst_logs/node*.err . || :"),
        WithProperties(
              "!= rm -Rf node*log ; scp -rp -P " + port + " " + kvm_scpopt +
              " buildbot@localhost:/home/buildbot/sst_logs/mbackup/node*.log . || :")
        ],**kwargs)

#-------------------------------
# Minor upgrade for deb packages
#-------------------------------

def getDebMinorUpgradeStep(kvm_image, args, kvm_scpopt, dist_name, version_name, arch, test_mode, **kwargs):

    return Test(
        name="minor-upgrade-"+test_mode,
        warningPattern=testWarningPattern,
        description=["testing", "minor", "upgrade"],
        descriptionDone=["minor", "upgrade", "for", test_mode],
        logfiles={"kernel": "kernel_"+getport()+".log", "syslog": "daemon.log", "ldd.old": "ldd.old", "ldd.new": "ldd.new", "columnstore_logs": "columnstore_logs", "step-script.sh": "step-script.sh"},
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["--logfile=kernel_"+getport()+".log", "vm-tmp-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+getport()+" "+kvm_scpopt+" debs buildbot@localhost:buildbot/",
        WithProperties("""

if ! wget --timeout=20 --no-check-certificate https://github.com/MariaDB/mariadb.org-tools/archive/master.zip -O ./master.zip > /dev/null ; then
  echo "ERROR: Upgrade scripts couldn't be downloaded"
  exit 1
fi
# To check if there are any automatic apt-get processes running
set -x
sudo ps -ef | grep apt
sudo apt-get update
sudo apt-get install -y unzip
if ! which unzip ; then
  echo "ERROR: Could not install unzip, can't proceed"
  exit 1
fi
echo "Test revision:" `unzip -z master.zip`
unzip master.zip mariadb.org-tools-master/buildbot/*
cd mariadb.org-tools-master/buildbot
set +x

test_mode="""+test_mode+"""
branch="%(branch)s"
arch="""+arch+"""

dist_name="""+dist_name+"""
version_name="""+version_name+"""
major_version="%(majorVersion)s"
systemd_capability="%(systemdCapability)s"
development_branch="""+DEVELOPMENT_BRANCH+"""

echo "##################################################################"
echo "# To get the script steps without having to copy-paste them"
echo "# one by onefrom the output below, see the attached step-script.sh"
echo "##################################################################"

set -x
. ./steps/minor_upgrade.deb.sh

"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f ldd.*; scp -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:/home/buildbot/ldd.* . || true",
        "!= rm -f step-script.sh; scp -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:/home/buildbot/mariadb.org-tools-master/buildbot/steps/minor_upgrade.deb.sh ./step-script.sh || true",
        "!= rm -f columnstore_logs; scp -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:/home/buildbot/columnstore_logs . || true",
        "!= rm -f daemon.log; scp -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:daemon.log ."],
        **kwargs)

# End of getDebMinorUpgradeStep

def getPower9Builder(name, slavenames):
    f = BuildFactory()
    f.addStep(Git(repourl=Property('repository'),
                  mode='copy',
                  retry=(10, 3),
                  timeout=6*3600,
                  ))
    f.addStep(ShellCommand(
        name="configure",
        description=["configuring build"],
        descriptionDone=["configure build"],
        command=["cmake", ".", "-DCMAKE_BUILD_TYPE=Debug", "-DPLUGIN_ROCKSDB=NO"],
        ))
    f.addStep(Compile(
        description=["compiling"],
        descriptionDone=["compile"],
        timeout = 3600,
        command=["make", "-j56"],
        ))

    f.addStep(getMTR(
        name="mtr",
        description=["running", "default", "MTR", "suites"],
        descriptionDone=["default", "MTR", "suites"],
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --parallel=96 --force --verbose-restart --retry=3  --max-save-core=0 --max-save-datadir=1"],
            ))

    return {'name': name, 'slavenames': slavenames, 'builddir': name, 'factory': f,
            'nextBuild': myNextBuild,
            'category': 'experimental'}

# Has been down for a long time or never up
#bld_p9_rhel7 = getPower9Builder(name="bld-p9-rhel7", slavenames="power9-docker")

###############
# Deb packages
###############

def getDebBuilder(name, kvm_image, cpu, dist_name, version_name, kvmargs=[], slavenames=kvm_slaves, ramdisk=True, catg="main"):
    deb_fact= BuildFactory()
    args= ["--port="+getport(), "--memory="+memory_def, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600"] + kvmargs
    if ramdisk:
        args= args + ["--work-image=/dev/shm/vm-tmp-"+getport()+".qcow2"]
    # AIO detection in InnoDB/XraDB does not work on the old
    # debian5 kernel. Let's disable aio here, in buildbot.
    if "debian5" in name:
        disable_aio_in_mtr="--mysqld=--loose-disable-innodb-use-native-aio"
    else:
        disable_aio_in_mtr=""
    arch= name.split('-')[3]
    dist_arch= name.split('-')[2] + "-" + arch
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!

#---------------------------------
# Deb packages: preliminary steps
#---------------------------------

    deb_fact.addStep(ShellCommand(
        name="cleanup",
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    deb_fact.addStep(ShellCommand(
        name="rsync_vms",
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-build.qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-install.qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-upgrade.qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-upgrade2.qcow2",
                 "/kvm/vms/"]))
    deb_fact.addStep(DownloadSourceTarball())
    # Extract the compiler warning suppressions file from the source tarball.
    deb_fact.addStep(ShellCommand(
        name="get_supp",
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
rm -f compiler_warnings.supp
tar zxf "/tmp/buildcache/%(tarbuildnum)s:%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
#wget ftp.askmonty.org:/public/compiler_warnings.supp
ls -l compiler_warnings.supp
exit 0  # best-effort, not fatal if no suppression file
""")]))

    deb_fact.addStep(SetPropertyFromCommand(
        name="nosystemd",
        doStepIf=(lambda(step): not in_systemdBuilders(step)),
        hideStepIf=(lambda results, s: results==SKIPPED),
        property="systemdCapability",
        command="echo no"))
    deb_fact.addStep(SetPropertyFromCommand(
        name="systemd",
        doStepIf=in_systemdBuilders,
        hideStepIf=(lambda results, s: results==SKIPPED),
        property="systemdCapability",
        command="echo yes"))
    deb_fact.addStep(SetPropertyFromCommand(
        name="major_version",
        hideStepIf=(lambda results, s: results==SKIPPED),
        property="majorVersion",
        command=WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.5\\\\|10\\\\.[0-9]*\\\\).*/\\\\1/\\\"\"")))

#--------------------------------------
# Deb packages: compilation, packaging
#--------------------------------------

    deb_fact.addStep(Compile(
        description=["making", "debs"],
        descriptionDone=["make", "debs"],
        logfiles={"kernel": "kernel_"+getport()+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        timeout=3600,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-build.qcow2"] + args +["--logfile=kernel_"+getport()+".log", "vm-tmp-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        ScpSourceIntoVM(),
        WithProperties("""
set -ex
# disable LTO for now
sudo sh -c "echo mariadb-10.5 any >> /usr/share/lto-disabled-list/lto-disabled-list" || true
sudo sh -c "echo mariadb-10.6 any >> /usr/share/lto-disabled-list/lto-disabled-list" || true
sudo sh -c "echo mariadb-10.7 any >> /usr/share/lto-disabled-list/lto-disabled-list" || true
sudo sh -c "echo mariadb-10.8 any >> /usr/share/lto-disabled-list/lto-disabled-list" || true
sudo sh -c "echo mariadb any >> /usr/share/lto-disabled-list/lto-disabled-list" || true
cd buildbot
mkdir -p debs/binary debs/source
rm -Rf build
mkdir build
cd build
tar zxf "../%(distname)s"
cd "%(distdirname)s"
echo $PATH
export JAVA_HOME=`ls -d /usr/lib/jvm/java-1.*`
export AM_EXTRA_MAKEFLAGS=VERBOSE=1
export DEB_BUILD_OPTIONS=parallel=4
export DH_BUILD_DDEBS=1
echo | debian/autobake-deb.sh
cp `find .. -maxdepth 1 -type f` ../../debs/binary/
cd ../../debs
dpkg-scanpackages binary /dev/null | gzip -9c > binary/Packages.gz
dpkg-scansources source /dev/null | gzip -9c > source/Sources.gz
"""),
        "= rm -Rf debs",
        "= scp -r -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:buildbot/debs .",
        ]))
    addPackageArchiveStep(deb_fact, "debs", "%(tarbuildnum)s")

    deb_fact.addStep(Test(
        name="providers",
        description=["checking", "compression", "providers"],
        descriptionDone=["check", "compression", "providers"],
        timeout=1200,
        env={"TERM": "vt102"},
        command=["runvm"] + args +["--logfile=kernel_"+getport()+".log", "vm-tmp-"+getport()+".qcow2",
        WithProperties("""
set -ex
cd buildbot
num_providers_expected=`ls build/%(distdirname)s/plugin/ | grep -E '^provider' | wc -l`
if [ $num_providers_expected -eq 0 ] ; then
  echo "No expected providers found, skipping the test"
  exit
fi

ls debs/binary/mariadb-plugin-provider*

num_providers_built=`ls debs/binary/mariadb-plugin-provider*.deb | grep -v dbgsym | wc -l`

if [ $num_providers_built -ne $num_providers_expected ] ; then
  echo "ERROR: Found $num_providers_built provider libraries, expected $num_providers_expected"
  exit 1
fi
""")]))

#---------------------------------
# Deb packages: smoke test
#---------------------------------

    deb_fact.addStep(getMTR(
            name="mtr-smoke-test",
#            doStepIf=(lambda(step): "elenst" in step.getProperty("branch") or isMainTree(step)),
            doStepIf=False,
            description=["running", "MTR", "smoke", "test"],
            descriptionDone=["MTR", "smoke", "test"],
            test_type="nm",
            test_info="Normal run, no --ps-protocol",
            logfiles={"kernel": "kernel_"+getport()+".log", "syslog": "daemon.log"},
            mtr_subdir=".",    # Where we scp vardir to
            env={"TERM": "vt102"},
            command=["runvm"] + args + ["--logfile=kernel_"+getport()+".log", "vm-tmp-"+getport()+".qcow2",
            WithProperties("""
set -ex
cd "buildbot/build/%(distdirname)s/builddir/mysql-test"
res=0
if [ -e ../../mysql-test/collections/smoke_test ] ; then
  if ! NO_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl `cat ../../mysql-test/collections/smoke_test` --verbose-restart --vardir="$(readlink -f /dev/shm/var)" --parallel=4 --force --max-save-core=0 --max-save-datadir=1
  then
    res=1
  fi
  rm -rf /home/buildbot/var
  cp -r /dev/shm/var /home/buildbot
else
  echo "Warning: Smoke test collection was not found"
fi
exit $res
"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:daemon.log .",
        WithProperties(
              "!= rm -Rf var/ ; scp -rp -P " + getport() + " " + kvm_scpopt +
              " buildbot@localhost:/home/buildbot/var/ . || :")]))

#-----------------------------
# Deb packages: minor upgrades
#-----------------------------

    deb_fact.addStep(
        getDebMinorUpgradeStep(kvm_image, args, kvm_scpopt,
                    dist_name, version_name, arch,
                    test_mode="server",
        )
    )

    deb_fact.addStep(
        getDebMinorUpgradeStep(kvm_image, args, kvm_scpopt,
                    dist_name, version_name, arch,
                    test_mode="all",
        )
    )

    deb_fact.addStep(
        getDebMinorUpgradeStep(kvm_image, args, kvm_scpopt,
                    dist_name, version_name, arch,
                    test_mode="deps",
        )
    )

    deb_fact.addStep(
        getDebMinorUpgradeStep(kvm_image, args, kvm_scpopt,
                    dist_name, version_name, arch,
                    test_mode="columnstore",
                    doStepIf=branch_is_10_5_or_later,
        )
    )

#---------------------------------
# Deb packages: clean installation
#---------------------------------

    deb_fact.addStep(Test(
        name="install",
        haltOnFailure=True,
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        logfiles={"kernel": "kernel_"+getport()+".log", "syslog": "daemon.log", "columnstore_logs": "columnstore_logs"},
        warningPattern=testWarningPattern,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["--logfile=kernel_"+getport()+".log", "vm-tmp-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+getport()+" "+kvm_scpopt+" debs buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
df -kT
# To check if there are any automatic apt-get processes running
sudo ps -ef | grep apt

dist_name="""+dist_name+"""
version_name="""+version_name+"""
arch="""+arch+"""

dpkg -l | grep -iE 'maria|mysql|galera' || true

# We want a clean installation here
dpkg -l | grep -iE 'maria|mysql|galera' | awk '{print $2}' | xargs sudo apt-get remove -y
dpkg -l | grep -iE 'maria|mysql|galera' | awk '{print $2}' | xargs sudo apt-get purge -y

case "%(branch)s" in
*10.[2-3]*)
  GALERA_VERSION=3
  ;;
*)
  GALERA_VERSION=4
  ;;
esac

mkdir galera_download
cd galera_download
if ! wget https://hasky.askmonty.org/builds/mariadb-${GALERA_VERSION}.x/latest/kvm-deb-${version_name}-${arch}-gal/debs/ --recursive -np -R "index.html*" -nH --cut-dirs=4 --no-check-certificate ; then
  echo "Test warning"": wget exited with a non-zero code, but it may be bogus"
  if ! `ls debs/binary/galera*.deb` ; then
    echo "ERROR: Could not download the Galera library"
    exit 1
  fi
fi
mv debs ../buildbot/galera-debs
cd ..
rm -rf galera_download
sudo sh -c 'echo "deb [trusted=yes allow-insecure=yes] file:///home/buildbot/buildbot/galera-debs binary/" >> /etc/apt/sources.list'
sudo sh -c 'echo "deb-src [trusted=yes allow-insecure=yes] file:///home/buildbot/buildbot/galera-debs source/" >> /etc/apt/sources.list'

cd buildbot
chmod -cR go+r debs galera-debs

if [ -e debs/binary/Packages.gz ] ; then
    gunzip debs/binary/Packages.gz
fi
if [ -e galera-debs/binary/Packages.gz ] ; then
    gunzip galera-debs/binary/Packages.gz
fi

# Due to MDEV-14622 and its effect on engine installation,
# Spider and Columnstore have to be installed separately after the server
package_list=`grep -B 1 'Source: mariadb' debs/binary/Packages | grep 'Package:' | grep -vE 'galera|spider|columnstore' | awk '{print $2}' | xargs`
if grep -i spider debs/binary/Packages > /dev/null ; then
  spider_package_list=`grep -B 1 'Source: mariadb' debs/binary/Packages | grep 'Package:' | grep 'spider' | awk '{print $2}' | xargs`
fi
if grep -i columnstore debs/binary/Packages > /dev/null ; then
  if [[ "$arch" == "x86" ]] ; then
    echo "Test warning"": Due to MCOL-4123, Columnstore won't be installed on x86"
  else
    columnstore_package_list=`grep -B 1 'Source: mariadb' debs/binary/Packages | grep 'Package:' | grep 'columnstore' | awk '{print $2}' | xargs`
  fi
fi

# Sometimes apt-get update fails because the repo is being updated.
for i in 1 2 3 4 5 6 7 8 9 10 ; do
  if sudo apt-get update ; then
    break
  fi
  echo "Test warning"": apt-get update failed, retrying ($i)"
  sleep 10
done

sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y $package_list $columnstore_package_list"

# Added upon request from Roman Nozdrin
ls -la /var/lib/columnstore/data1/systemFiles/dbrm/ || true

# MDEV-14622: Wait for mysql_upgrade running in the background to finish
set +x
res=1
for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ; do
  sleep 3
  if ! ps -ef | grep -iE 'mysql_upgrade|mysqlcheck|mysqlrepair|mysqlanalyze|mysqloptimize|mariadb-upgrade|mariadb-check' | grep -v grep ; then
    res=0
    break
  fi
done
if [[ $res -ne 0 ]] ; then
  echo "Test warning"": mysql_upgrade or alike have not finished in reasonable time, different problems may occur"
fi
set -x

function get_columnstore_logs () {
  if [ -n "$columnstore_package_list" ] ; then
    sudo ls -l /dev/shm/
    echo "Storing Columnstore logs in columnstore_logs"
    set +ex
    # It is done in such a weird way, because Columnstore currently makes its logs hard to read
    for f in `sudo ls /var/log/mariadb/columnstore | xargs` ; do
      f=/var/log/mariadb/columnstore/$f
      echo "----------- $f -----------" >> /home/buildbot/columnstore_logs
      sudo cat $f >> /home/buildbot/columnstore_logs 2>&1
    done
    for f in /tmp/columnstore_tmp_files/* ; do
      echo "----------- $f -----------" >> /home/buildbot/columnstore_logs
      sudo cat $f >> /home/buildbot/columnstore_logs 2>&1
    done
  fi
}

# To avoid confusing errors in further logic, do an explicit check
# whether the service is up and running
if [[ "%(systemdCapability)s" == "yes" ]] ; then
  if ! sudo systemctl -l status mariadb --no-pager ; then
    sudo journalctl -xe --no-pager
    get_columnstore_logs
    echo "ERROR: mariadb service didn't start properly after installation"
    exit 1
  fi
fi

# Due to MDEV-14622 and its effect on Spider installation,
# Spider has to be installed separately after the server
if [ -n "$spider_package_list" ] ; then
  sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y $spider_package_list"
fi

# Unix socket
if [[ "%(branch)s" != *"10."[23]* ]] ; then
  sudo mysql -e "set password=password('rootpass')"
fi

mysql -uroot -prootpass -e "SHOW FULL PROCESSLIST"
mysql --verbose -uroot -prootpass -e "select @@version; create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test; create user galera identified by 'gal3ra123'; grant all on *.* to galera;"

sudo id -u mysql || true

if [ -n "$columnstore_package_list" ] ; then
  set +e
  res=0
  mysql --verbose -uroot -prootpass -e "create database cs; use cs; create table cs.t_columnstore (a int, b char(8)) engine=ColumnStore; insert into cs.t_columnstore select seq, concat('val',seq) from seq_1_to_10; select * from cs.t_columnstore" || res=1
  sudo systemctl restart mariadb || res=1
  mysql --verbose -uroot -prootpass -e "select * from cs.t_columnstore; update cs.t_columnstore set b = 'updated'" || res=1
  sudo systemctl restart mariadb-columnstore || res=1
  mysql --verbose -uroot -prootpass -e "update cs.t_columnstore set a = a + 10; select * from cs.t_columnstore" || res=1
  mysql --verbose -uroot -prootpass -e "drop table cs.t_columnstore; drop database cs" || res=1
  if [ "$res" != "0" ] ; then
    sudo journalctl -xe --no-pager
    get_columnstore_logs
    echo "ERROR: Errors occurred upon Columnstore sanity check"
    exit $res
  fi
fi

sudo systemctl -l status mariadb --no-pager || true
 
echo "Test for MDEV-18563, MDEV-18526"

set +e
case "%(systemdCapability)s" in
yes)
  sudo systemctl stop mariadb
  ;;
no)
  sudo /etc/init.d/mysql stop
  ;;
esac
sleep 1
sudo pkill -9 mysqld

#for p in /bin /sbin /usr/bin /usr/sbin /usr/local/bin /usr/local/sbin ; do
#  if test -x $p/mysql_install_db ; then
#    sudo $p/mysql_install_db --no-defaults --user=mysql --plugin-maturity=unknown
#  else
#    echo "$p/mysql_install_db does not exist"
#  fi
#done
#sudo mysql_install_db --no-defaults --user=mysql --plugin-maturity=unknown
set +e

## Install mariadb-test for further use
#sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y mariadb-test"

if dpkg -l | grep -i spider > /dev/null ; then
  echo "Test warning"": Workaround for MDEV-22979, otherwise server hangs further in SST steps"
  sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get remove --allow-unauthenticated -y $spider_package_list" || true
  sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get purge --allow-unauthenticated -y $spider_package_list" || true
fi

sudo systemctl -l status mariadb --no-pager || true

# Uninstall Columnstore. It's not needed further anyway, and uninstallation is good as a test
if [ -n "$columnstore_package_list" ] ; then
  sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get remove --allow-unauthenticated -y $columnstore_package_list"
  sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get purge --allow-unauthenticated -y $columnstore_package_list"
fi

sudo systemctl -l status mariadb --no-pager || true

"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f columnstore_logs; scp -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:/home/buildbot/columnstore_logs . || true",
        "!= rm -f daemon.log; scp -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:daemon.log ."]))

    deb_fact.addStep(getPamStep(args))

#-----------------------------
# Deb packages: start Galera cluster with different SST
#-----------------------------

# Disabled for 10.3 because of "The redo log was created with MariaDB 10.3.6"
    deb_fact.addStep(
        getDebGaleraSstStep(getport(), version_name, arch, args, kvm_scpopt,
                    sst_mode="xtrabackup-v2"
        )
    )

    deb_fact.addStep(
        getDebGaleraSstStep(getport(), version_name, arch, args, kvm_scpopt,
                    sst_mode="mysqldump"
        )
    )

    deb_fact.addStep(
        getDebGaleraSstStep(getport(), version_name, arch, args, kvm_scpopt,
                    sst_mode="rsync"
        )
    )

    deb_fact.addStep(
        getDebGaleraSstStep(getport(), version_name, arch, args, kvm_scpopt,
                    sst_mode="mariabackup"
        )
    )

#-------------------------
# Deb packages: MTR tests
#-------------------------

    deb_fact.addStep(getMTR(
            name="mtr-galera-sst",
            description=["running", "galera", "SST", "MTR", "tests"],
            descriptionDone=["galera", "SST", "MTR", "tests"],
            test_type="nm-big",
            test_info="Normal run, no --ps-protocol",
            logfiles={"kernel": "kernel_"+getport()+".log", "syslog": "daemon.log"},
            mtr_subdir=".",    # Where we scp vardir to
            env={"TERM": "vt102"},
            command=["runvm"] + args + ["--logfile=kernel_"+getport()+".log", "vm-tmp2-"+getport()+".qcow2",
            WithProperties("""
set -x
cd buildbot
chmod -cR go+r debs

sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated $allow_downgrades -y mariadb-test"
#sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated $allow_downgrades -y stunnel4" || true
cd /usr/share/mysql/mysql-test
perl mysql-test-run.pl --vardir="$(readlink -f /dev/shm/var)" --force --max-save-core=0 --max-save-datadir=0 --big-test --suite=galera --do-test=galera_sst_*
res=$?

rm -rf /home/buildbot/var
cp -r /dev/shm/var /home/buildbot

if [ $res -ne 0 ] ; then
    echo "ERROR: MTR tests failed"
    exit $res
fi
"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:daemon.log .",
        WithProperties(
              "!= rm -Rf var/ ; scp -rp -P " + getport() + " " + kvm_scpopt +
              " buildbot@localhost:/home/buildbot/var/ . || :")]))

# --------------
# Default suites

    deb_fact.addStep(getMTR(
            name="mtr",
            description=["running", "default", "MTR", "suites"],
            descriptionDone=["default", "MTR", "suites"],
            test_type="nm",
            test_info="Normal run, no --ps-protocol",
            logfiles={"kernel": "kernel_"+getport()+".log", "syslog": "daemon.log"},
            mtr_subdir=".",    # Where we scp vardir to
            env={"TERM": "vt102"},
            command=["runvm"] + args + ["--logfile=kernel_"+getport()+".log", "vm-tmp-"+getport()+".qcow2",
            WithProperties("""
set -ex
cd buildbot
chmod -cR go+r debs

version_name="""+version_name+"""

# Check that the installation worked, and we have the installed server
if ! dpkg -l | grep "mariadb-server"
then
  echo "Pre-MTR ERROR: previous server installation failed, cannot run MTR tests"
  exit 1
fi

cd debs/binary
packages_to_install=`ls *.deb | awk -F'_' '{print $1}' | xargs`

# Sometimes apt-get update fails because the repo is being updated.
for i in 1 2 3 4 5 6 7 8 9 10 ; do
  if sudo apt-get update ; then
    break
  fi
  echo "Test warning"": apt-get update failed, retrying ($i)"
  sleep 10
done

sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated $allow_downgrades -y $packages_to_install"

# Also try to install gdb to get decent stack traces, but don't abort if it does not install
if ! sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y gdb"
then
  echo "Could not install gdb, proceeding without it"
fi

cd /usr/share/mysql/mysql-test

if test -f suite/plugins/pam/pam_mariadb_mtr.so; then
  for p in /lib*/security /lib*/*/security ; do
    test -f $p/pam_unix.so && sudo cp -v suite/plugins/pam/pam_mariadb_mtr.so $p/
  done
  sudo cp -v suite/plugins/pam/mariadb_mtr /etc/pam.d/
fi

res=0
if ! NO_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl --verbose-restart --vardir="$(readlink -f /dev/shm/var)" --parallel=4 --force --retry=3 --max-save-core=0 --max-save-datadir=1
then
  res=1
fi
rm -rf /home/buildbot/var
cp -r /dev/shm/var /home/buildbot
exit $res
"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:daemon.log .",
        WithProperties(
              "!= rm -Rf var/ ; scp -rp -P " + getport() + " " + kvm_scpopt +
              " buildbot@localhost:/home/buildbot/var/ . || :")]))

# --------------
# Deb packages: non-default MTR suites
# --------------

    deb_fact.addStep(
        getDebExtraTestStep(args, kvm_scpopt, arch,
          name="mtr-s3",
          test_set="s3",
          doStepIf=branch_is_10_5_or_later,
          env={"TERM": "vt102"}
        )
    )

    deb_fact.addStep(
        getDebExtraTestStep(args, kvm_scpopt, arch,
          name="mtr-galera",
          test_set="galera",
          env={"TERM": "vt102"}
        )
    )

    deb_fact.addStep(
        getDebExtraTestStep(args, kvm_scpopt, arch,
          name="mtr-rocksdb",
          test_set="rocksdb",
          env={"TERM": "vt102"}
        )
    )

#----------------------------------
# Deb packages: upgrade from MySQL
# (or whatever Debian provides)
#----------------------------------

    deb_fact.addStep(
        getDebUpgradeStep(kvm_image, "upgrade", args, kvm_scpopt,
                    dist_name, version_name, arch, "default installation",
                    name="upgrade1"
        )
    )

#------------------------------------
# Deb packages: upgrade from MariaDB
#------------------------------------

    deb_fact.addStep(
        getDebUpgradeStep(kvm_image, "upgrade2", args, kvm_scpopt,
                    dist_name, version_name, arch, "MariaDB",
                    name="upgrade2"
        )
    )

#-------------------------------------------------------------------
# Deb packages: upgrade from default MySQL provided by distribution
#-------------------------------------------------------------------

# Disabled because of MDEV-11978
    deb_fact.addStep(Test(
        name="upgrade4",
        doStepIf=False,
        description=["testing", "upgrade", "from", "Debian's", "packages"],
        descriptionDone=["upgrade", "from", "Debian's", "packages"],
        logfiles={"kernel": "kernel_"+getport()+".log", "syslog": "daemon.log"},
        warningPattern=impossibleRe,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["--logfile=kernel_"+getport()+".log", "vm-tmp-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+getport()+" "+kvm_scpopt+" debs buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
dpkg -l | { grep -iE 'maria|mysql|galera' || true; }

sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup
sudo sh -c 'grep -v "^deb .*file" /etc/apt/sources.list.backup | grep -v "^deb-src .*file" > /etc/apt/sources.list'

# Sometimes apt-get update fails because the repo is being updated.
for i in 1 2 3 4 5 6 7 8 9 10 ; do
  if sudo apt-get update ; then
    break
  fi
  echo "Test warning"": apt-get update failed, retrying ($i)"
  sleep 10
done

sudo sh -c 'DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y mariadb-server mariadb-client mariadb-test'
dpkg -l | grep -iE 'maria|mysql|galera'

# Some debian packages have unix_socket authentication for local root,
# while others (e.g. 10.0 on jessie) have old-fashion password authentication.
# In the latter case debconf-set-selections will be used upon installation.
# To avoid distinguishing between these two cases, we will first connect as root
# under sudo, but using the password from debconf. If the installation uses unix_socket,
# the password will be ignored and sudo will allow to connect as system root.
# If the installation uses password authentication, sudo won't matter, and the connection
# will use the password. After that, we will create a password-authenticated super-user

sudo mysql -uroot -prootpass -e "create user admin@localhost identified by 'admin'; grant all on *.* to admin@localhost"
mysql -uadmin -padmin --skip-column-names -e "select engine, support, transactions, savepoints from information_schema.engines" | sort > /tmp/engines.old
mysql -uadmin -padmin --skip-column-names -e "show plugins" | sort > /tmp/plugins.old
mysql -uadmin -padmin --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.old
mysql -uadmin -padmin -e "CREATE DATABASE autoinc; CREATE TABLE autoinc.t_autoinc(a SERIAL) ENGINE=InnoDB SELECT 42 a"
mysql -uadmin -padmin -e "CREATE TABLE autoinc.t_autoinc2(a SERIAL) ENGINE=InnoDB; BEGIN; INSERT INTO autoinc.t_autoinc2 VALUES (NULL),(NULL); ROLLBACK; SHOW CREATE TABLE autoinc.t_autoinc2 \G"

chmod -cR go+r ~/buildbot/debs

# Detect the MariaDB version under test from the package name
# e.g. mariadb-server_5.5.55+maria-1~trusty_all.deb

mariadb_version=`ls ~/buildbot/debs/binary/mariadb-server*all.deb | sed -e 's/.*mariadb-server_\([0-9]*\.[0-9]*\.[0-9]*\)+maria.*/\\1/'`
major_version=`echo $mariadb_version | sed -e 's/^\([0-9]*\.[0-9]*\)\.[0-9]*$/\\1/'`
echo $mariadb_version > /tmp/version.target

echo "We will be upgrading to MariaDB $major_version ($mariadb_version)"

sudo mv /etc/apt/sources.list.backup /etc/apt/sources.list

for m in "mirrors.xtom.ee" "mirror.kumi.systems" "mirror.23m.com" "mirrors.xtom.nl" "mirror.mva-n.net" "mirrors.gigenet.com" ; do
  if ping -W 1 -c 5 -i 1 $m ; then
    mirror=$m
    break
  else
    echo "WARNING: Mirror $m seems to be having troubles"
  fi
done

if [ -z "$mirror" ] ; then
  echo "ERROR: Could not find a mirror to download the release from"
  exit 1
fi

case $major_version in
10.[1-9])
  # Add MariaDB repo to the source list, because the installation might need galera library
  sudo sh -c "echo 'deb http://$mirror/mariadb/repo/$major_version/"""+dist_name+""" """+version_name+""" main' >> /etc/apt/sources.list"
  ;;
esac

# Not sure it works
sudo sh -c "echo 'Package: *' > /etc/apt/preferences.d/release"
sudo sh -c "echo 'Pin: origin \"\"' >> /etc/apt/preferences.d/release"
sudo sh -c "echo 'Pin-Priority: 1001' >> /etc/apt/preferences.d/release"

# Sometimes apt-get update fails because the repo is being updated.
for i in 1 2 3 4 5 6 7 8 9 10 ; do
  if sudo apt-get update ; then
    break
  fi
  echo "Test warning"": apt-get update failed, retrying ($i)"
  sleep 10
done

sudo sh -c 'DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y mariadb-server mariadb-client mariadb-test'

mysql -uadmin -padmin -e "select @@version, @@version_comment"
mysql -uadmin -padmin --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.new
mysql -uadmin -padmin --skip-column-names -e "INSERT INTO autoinc.t_autoinc SET a=NULL;  SELECT COUNT(*) Expect_2 FROM autoinc.t_autoinc WHERE a>=42"
echo "Prior to MDEV-6076, the next SELECT would return 1. After MDEV-6076, it should be 3"
mysql -uadmin -padmin --skip-column-names -e "INSERT INTO autoinc.t_autoinc2 VALUES (NULL); SELECT * FROM autoinc.t_autoinc2"
sudo cat /var/lib/mysql/mysql_upgrade_info | awk -F'-' '{ print $1 }' > /tmp/version.upgrade
# mysql_upgrade is run automatically in deb packages

echo "Checking systemd capability"
case "%(systemdCapability)s" in
yes)
  ls -l /lib/systemd/system/mariadb.service
  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
  ls -l /etc/init.d/mysql || true
  systemctl -l --no-pager status mariadb.service
  systemctl -l --no-pager status mariadb
  systemctl -l --no-pager status mysql
  systemctl -l --no-pager status mysqld
  systemctl --no-pager is-enabled mariadb
  sudo systemctl --no-pager restart mariadb
  systemctl -l --no-pager status mariadb
  sudo journalctl -lxn 500 --no-pager | grep -iE 'mysqld|mariadb'
  # It does not do the same as systemctl now
  # /etc/init.d/mysql status
  ;;
no)
  echo "Steps related to systemd will be skipped"
  ;;
*)
  echo "It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
  ;;
esac

mysql -uadmin -padmin --skip-column-names -e "select engine, support, transactions, savepoints from information_schema.engines" | sort > /tmp/engines.new
mysql -uadmin -padmin --skip-column-names -e "show plugins" | sort > /tmp/plugins.new

cat /tmp/version.old
cat /tmp/version.new
cat /tmp/version.target
cat /tmp/engines.old
cat /tmp/engines.new
cat /tmp/plugins.old
cat /tmp/plugins.new
cat /tmp/version.upgrade

echo "The next line must show a difference between versions, otherwise it's a failure"
echo "It can be a false positive if we forgot to bump version after release,"
echo "or if the tree is based on an old version"
! diff -u /tmp/version.old /tmp/version.new

echo "Also make sure that we installed the version which we expected"
diff -u /tmp/version.target /tmp/version.new
"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:daemon.log ."]))


    return {'name': name, 'slavenames': slavenames, 'builddir': name, 'factory': deb_fact,
            "nextBuild": myNextBuild,
            "category": catg}

bld_kvm_deb_bionic_amd64 = getDebBuilder("kvm-deb-bionic-amd64", "vm-bionic-amd64", "qemu64", "ubuntu", "bionic", slavenames=kvm11_slaves, ramdisk=False)
bld_kvm_deb_bionic_ppc64le = getDebBuilder("kvm-deb-bionic-ppc64le", "vm-bionic-ppc64le", "POWER8", "ubuntu", "bionic", slavenames=power_slaves, ramdisk=False)
bld_kvm_deb_bionic_aarch64 = getDebBuilder("kvm-deb-bionic-aarch64", "vm-bionic-aarch64", "host", "ubuntu", "bionic", slavenames=arm64_slaves, ramdisk=False)

bld_kvm_deb_focal_amd64 = getDebBuilder("kvm-deb-focal-amd64", "vm-focal-amd64", "qemu64", "ubuntu", "focal", slavenames=kvm11_slaves, ramdisk=False)
bld_kvm_deb_focal_ppc64le = getDebBuilder("kvm-deb-focal-ppc64le", "vm-focal-ppc64le", "POWER8", "ubuntu", "focal", slavenames=power_slaves, ramdisk=False)
bld_kvm_deb_focal_aarch64 = getDebBuilder("kvm-deb-focal-aarch64", "vm-focal-aarch64", "host", "ubuntu", "focal", slavenames=arm64_slaves, ramdisk=False)

bld_kvm_deb_impish_amd64 = getDebBuilder("kvm-deb-impish-amd64", "vm-impish-amd64", "qemu64", "ubuntu", "impish", slavenames=kvm11_slaves, ramdisk=False)

bld_kvm_deb_jammy_amd64 = getDebBuilder("kvm-deb-jammy-amd64", "vm-jammy-amd64", "qemu64", "ubuntu", "jammy", slavenames=kvm11_slaves, ramdisk=False)

bld_kvm_deb_stretch_amd64 = getDebBuilder("kvm-deb-stretch-amd64", "vm-stretch-amd64", "qemu64", "debian", "stretch", slavenames=kvm11_slaves, ramdisk=False)
bld_kvm_deb_stretch_x86 =   getDebBuilder("kvm-deb-stretch-x86",   "vm-stretch-i386",  "qemu64", "debian", "stretch", slavenames=kvm11_slaves, ramdisk=False)
bld_kvm_deb_stretch_ppc64le = getDebBuilder("kvm-deb-stretch-ppc64le",   "vm-stretch-ppc64le",  "POWER8", "debian", "stretch", slavenames=power_slaves, ramdisk=False)
bld_kvm_deb_stretch_aarch64 = getDebBuilder("kvm-deb-stretch-aarch64",   "vm-stretch-aarch64",  "host", "debian", "stretch", slavenames=arm64_slaves, ramdisk=False, catg="experimental")

bld_kvm_deb_bullseye_amd64 = getDebBuilder("kvm-deb-bullseye-amd64", "vm-bullseye-amd64", "qemu64", "debian", "bullseye", slavenames=kvm11_slaves, ramdisk=False)

bld_kvm_deb_buster_amd64 = getDebBuilder("kvm-deb-buster-amd64", "vm-buster-amd64", "qemu64", "debian", "buster", slavenames=kvm11_slaves, ramdisk=False)
bld_kvm_deb_buster_ppc64le = getDebBuilder("kvm-deb-buster-ppc64le", "vm-buster-ppc64le", "POWER8", "debian", "buster", slavenames=power_slaves, ramdisk=False)
bld_kvm_deb_buster_aarch64 = getDebBuilder("kvm-deb-buster-aarch64", "vm-buster-aarch64", "host", "debian", "buster", slavenames=arm64_slaves, ramdisk=False)

bld_kvm_deb_sid_amd64 = getDebBuilder("kvm-deb-sid-amd64", "vm-sid-amd64", "qemu64", "debian", "sid", ramdisk=False, catg="experimental")
bld_kvm_deb_sid_x86 = getDebBuilder("kvm-deb-sid-x86", "vm-sid-i386", "qemu64", "debian", "sid", ramdisk=False, catg="experimental")

#---------------------------------
# FreeBSD from ports
#---------------------------------

def getFreebsdBuilder(name, kvm_image, cpu, dist_name, version_name, kvmargs=[], slavenames=kvm_slaves, ramdisk=True, catg="main"):
    ports_fact= BuildFactory()
    args= ["--port="+getport(), "--memory="+memory_def, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600"] + kvmargs
    if ramdisk:
        args= args + ["--work-image=/dev/shm/vm-tmp-"+getport()+".qcow2"]
    arch= name.split('-')[3]
    dist_arch= name.split('-')[2] + "-" + arch
#
# FreeBSD from ports: Preliminary steps
#
    ports_fact.addStep(ShellCommand(
        name="cleanup",
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    ports_fact.addStep(ShellCommand(
        name="rsync_vms",
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-serial.qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-build.qcow2",
                 "/kvm/vms/"]))
    ports_fact.addStep(DownloadSourceTarball())
#
# FreeBSD from ports: Build
#
    ports_fact.addStep(Compile(
        description=["building", "from", "ports"],
        descriptionDone=["build", "from", "ports"],
        logfiles={"kernel": "kernel_"+getport()+".log"},
        timeout=3600,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-build.qcow2"] + args +["--logfile=kernel_"+getport()+".log", "vm-tmp-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        ScpSourceIntoVM(),
        WithProperties("""
set -ex
cat /etc/os-release
cd buildbot
sudo pkg remove -y mysql57-client || true

version=`ls mariadb-*.tar.gz | sed -e 's/mariadb-\(10\.[0-9]*\)\.[0-9]*\.tar\.gz/\\1/' | sed -e 's/\.//'`
full_version=`ls mariadb-*.tar.gz | sed -e 's/mariadb-\(10\.[0-9]*\.[0-9]*\)\.tar\.gz/\\1/'`

sudo mkdir -p /usr/ports/distfiles
sudo cp mariadb-*.tar.gz /usr/ports/distfiles

time sudo portsnap fetch
sudo portsnap extract databases/mariadb

# If the ports still don't exist after fetch, for 10.7+ try to use the latest available
if ! [ -e /usr/ports/databases/mariadb${version}-server ] ; then
  if [ "$version" -gt "106" ] ; then
    cd /usr/ports/databases
    baseport=`ls | grep mariadb | grep server | tail -n 1`
    baseport_version=`echo $baseport | sed -e 's/mariadb\([0-9]*\)-server/\\1/'`
    sudo cp -r $baseport mariadb${version}-server
    sudo cp -r mariadb${baseport_version}-client mariadb${version}-client
    sudo sed -i '' -e "s/PORTVERSION=.*/PORTVERSION=${full_version}/" mariadb${version}-server/Makefile || true
    sudo sed -i '' "/USES\+=.*mysql:${baseport_version}m/d" mariadb${version}-server/Makefile || true
    sudo sed -i '' -e "s/${baseport_version}-server/${version}-server/" mariadb${version}-server/Makefile || true
# ... and for older versions just give up
  else
    echo "ERROR: Ports not found for ${full_version}"
    exit 1
  fi
fi

# On some reason galera is needed during the build
if [ "$version" = "103" ] ; then
  sudo pkg install -y galera
else
  sudo pkg install -y galera26
fi

cd /usr/ports/databases/mariadb${version}-server/

# Workaround for MDEV-15795 -- sporadic "Illegal instruction" errors
if [ "$version" -lt "105" ] ; then
  cat << EOF > /tmp/patch-MDEV-15795
--- mysys/thr_timer.c.orig	2022-04-03 23:14:38.261557000 +0000
+++ mysys/thr_timer.c	2022-04-03 23:15:19.965448000 +0000
@@ -85,7 +85,7 @@
   /* Create a thread to handle timers */
   pthread_attr_init(&thr_attr);
   pthread_attr_setscope(&thr_attr,PTHREAD_SCOPE_PROCESS);
-  pthread_attr_setstacksize(&thr_attr,8196);
+  pthread_attr_setstacksize(&thr_attr,64*1024);
   thr_timer_inited= 1;
   if (mysql_thread_create(key_thread_timer, &timer_thread, &thr_attr,
                           timer_handler, NULL))
EOF
  sudo mv /tmp/patch-MDEV-15795 files/
fi

# As of now (2022-04-04) the patch and the code have diverged after MDEV-27524
if [ -e files/patch-scripts_wsrep__sst__mariabackup.sh ] ; then
  cat files/patch-scripts_wsrep__sst__mariabackup.sh
  sudo sed -i '' -e "s/grep -qw -- '-k'/grep -qw -F -- '-k'/g" files/patch-scripts_wsrep__sst__mariabackup.sh
  cat files/patch-scripts_wsrep__sst__mariabackup.sh
fi

if [ -e files/patch-mysys_my__default.c ] ; then
  sudo sed -i '' 's/return 0/return 1/' files/patch-mysys_my__default.c
  cat files/patch-mysys_my__default.c
fi

# As of now (2022-05-29) the patch and the code have diverged for 10.6, different spacing but not only
if [ "$version" == "106" ] && [ -e files/patch-storage_columnstore_columnstore_utils_common_threadnaming.cpp ] ; then
  cat << EOF > /tmp/patch-storage_columnstore_columnstore_utils_common_threadnaming.cpp
--- storage/columnstore/columnstore/utils/common/threadnaming.cpp.orig	2022-05-29 18:32:19.734083000 +0000
+++ storage/columnstore/columnstore/utils/common/threadnaming.cpp	2022-05-29 18:41:19.398931000 +0000
@@ -22,13 +22,21 @@
 {
 void setThreadName(const char* threadName)
 {
+#ifdef __FreeBSD__
+  pthread_set_name_np(pthread_self(), threadName);
+#else
   prctl(PR_SET_NAME, threadName, 0, 0, 0);
+#endif
 }

 std::string getThreadName()
 {
   char buf[32];
+#ifdef __FreeBSD__
+  pthread_get_name_np(pthread_self(), buf, sizeof(buf));
+#else
   prctl(PR_GET_NAME, buf, 0, 0, 0);
+#endif
   return std::string(buf);
 }
 }  // namespace utils
EOF
  if ! diff /tmp/patch-storage_columnstore_columnstore_utils_common_threadnaming.cpp files/patch-storage_columnstore_columnstore_utils_common_threadnaming.cpp ; then
    sudo mv /tmp/patch-storage_columnstore_columnstore_utils_common_threadnaming.cpp files/
  else
    echo "Workaround for Columnstore patch isn't needed anymore"
  fi
fi

# To get mysql-test/plugin directory created properly, with suites in it
sudo sed -i '' -e 's/DINSTALL_MYSQLTESTDIR= /DINSTALL_MYSQLTESTDIR=mysql-test /g' Makefile || true

cd /usr/ports/databases/mariadb${version}-client/
sudo make PORTVERSION=${full_version} BATCH=yes makesum install
cd /usr/ports/databases/mariadb${version}-server/
sudo make PORTVERSION=${full_version} BATCH=yes makesum install

# For the next MTR step
sudo cp -r /usr/ports/databases/mariadb${version}-server/work/stage/usr/local/mysql-test /usr/local/share/

# Some files are not installed
if [ "$version" == "105" ] ; then
  sudo cp /usr/ports/databases/mariadb${version}-server/work/stage/usr/local/bin/replace /usr/ports/databases/mariadb${version}-server/work/stage/usr/local/bin/mysql_client_test* /usr/local/bin/
fi
if [ "$version" == "104" ] ; then
  sudo cp /usr/ports/databases/mariadb${version}-server/work/stage/usr/local/bin/mysqltest /usr/local/bin/
fi
""")
]))

#
# FreeBSD from ports: MTR tests
#
    ports_fact.addStep(getMTR(
            name="mtr",
            description=["running", "default", "MTR", "suites"],
            descriptionDone=["default", "MTR", "suites"],
            test_type="nm",
            test_info="Normal run, no --ps-protocol",
            logfiles={"kernel": "kernel_"+getport()+".log", "syslog": "daemon.log"},
            mtr_subdir=".",    # Where we scp vardir to
            env={"TERM": "vt102"},
            command=["runvm"] + args + ["--logfile=kernel_"+getport()+".log", "vm-tmp-"+getport()+".qcow2",
            WithProperties("""
set -x
cat /etc/os-release
cd /usr/local/share/mysql-test
nCPU=$(sysctl hw | grep hw.ncpu | awk '{print $2}')
res=0
if ! NO_FEEDBACK_PLUGIN=1 perl ./mtr --vardir=/tmp/var --force --max-test-fail=0 --parallel=$nCPU --verbose-restart --retry=2 --max-save-core=0 --max-save-datadir=1
then
  res=1
fi
rm -rf /home/buildbot/var
cp -r /tmp/var /home/buildbot
exit $res
"""),
        "! rm -f daemon.log; (sudo cat /var/log/messages || sudo cat /var/log/daemon.log) >daemon.log",
        "!= rm -f daemon.log; scp -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:daemon.log .",
        WithProperties(
              "!= rm -Rf var/ ; scp -rp -P " + getport() + " " + kvm_scpopt +
              " buildbot@localhost:/home/buildbot/var/ . || :")]))

    return {'name': name, 'slavenames': slavenames, 'builddir': name, 'factory': ports_fact,
            "nextBuild": myNextBuild,
            "category": catg}

bld_kvm_ports_freebsd123_amd64 = getFreebsdBuilder("kvm-ports-freebsd123-amd64", "vm-freebsd123-amd64", "qemu64", "freebsd", "12", slavenames=kvm11_slaves, ramdisk=False)
bld_kvm_ports_freebsd130_amd64 = getFreebsdBuilder("kvm-ports-freebsd130-amd64", "vm-freebsd130-amd64", "qemu64", "freebsd", "13", slavenames=kvm11_slaves, ramdisk=False)

#
# End of FreeBSD from ports
#

#-------------------------------------------------------------------------------
# Debian package factory for Galera
#-------------------------------------------------------------------------------
def getGalDebBuilder(name, kvm_image, cpu, dist_name, version_name, kvmargs=[], slavenames=kvm_slaves, ramdisk=True):

    kvm_build_image = getGaleraBuildImage(kvm_image)
    deb_fact= BuildFactory()

    args= ["--port="+getport(), "--memory="+memory_def, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600"] + kvmargs
    if ramdisk:
        args= args + ["--work-image=/dev/shm/vm-tmp-"+getport()+".qcow2"]
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    deb_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    deb_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_build_image+".qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-install.qcow2",
                 "/kvm/vms/"]))
    deb_fact.addStep(Compile(
        description=["making", "debs"],
        descriptionDone=["make", "debs"],
        logfiles={"kernel": "kernel_"+getport()+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        timeout=3600,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_build_image+".qcow2"] + args +["--logfile=kernel_"+getport()+".log", "vm-tmp-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("""
set -ex
cd buildbot
mkdir -p debs/binary debs/source
chmod -cR go+r debs
git clone -b %(branch)s "https://github.com/MariaDB/galera.git" build
cd build
git reset --hard %(revision)s
git submodule init
git submodule update
./scripts/build.sh -p
cp `find ../*.deb -maxdepth 1 -type f` ../debs/binary/
cp `find ../*.changes -maxdepth 1 -type f` ../debs/binary/
cd ../debs
dpkg-scanpackages binary /dev/null | gzip -9c > binary/Packages.gz
dpkg-scansources source /dev/null | gzip -9c > source/Sources.gz
"""),
        "= rm -Rf debs",
        "= scp -r -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:buildbot/debs .",
        ]))
    addPackageUploadStep(deb_fact, 'debs')
    deb_fact.addStep(Test(
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        logfiles={"kernel": "kernel_"+getport()+".log", "syslog": "daemon.log"},
        warningPattern=impossibleRe,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["--logfile=kernel_"+getport()+".log", "vm-tmp-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+getport()+" "+kvm_scpopt+" */debs buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
cd buildbot
chmod -cR go+r debs

# Sometimes apt-get update fails because the repo is being updated.
for i in 1 2 3 4 5 6 7 8 9 10 ; do
  if sudo apt-get update ; then
    break
  fi
  echo "Test warning"": apt-get update failed, retrying ($i)"
  sleep 10
done

sudo sh -c "if [ -e /home/buildbot/buildbot/debs/binary/galera-4_*.deb ] ; then pkgs='galera-4 galera-arbitrator-4'; else pkgs='galera-3 galera-arbitrator-3'; fi; DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y \$pkgs"
garbd --version
"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:daemon.log ."]))

    return {'name': name, 'slavenames': slavenames, 'builddir': name, 'factory': deb_fact,
            "nextBuild": myNextBuild,
            "category": "galera"}

gal_bld_kvm_deb_sid_amd64 = getGalDebBuilder("kvm-deb-sid-amd64-gal", "vm-sid-amd64",
                                     "qemu64", "debian", "sid", ramdisk=False)
gal_bld_kvm_deb_sid_x86 = getGalDebBuilder("kvm-deb-sid-x86-gal", "vm-sid-i386",
                                     "qemu64", "debian", "sid", ramdisk=False)
gal_bld_kvm_deb_trusty_amd64 = getGalDebBuilder("kvm-deb-trusty-amd64-gal", "vm-trusty-amd64",
                                     "qemu64", "ubuntu", "trusty", ramdisk=False)
gal_bld_kvm_deb_trusty_x86 = getGalDebBuilder("kvm-deb-trusty-x86-gal", "vm-trusty-i386",
                                     "qemu64", "ubuntu", "trusty", ramdisk=False)
gal_bld_kvm_deb_bionic_amd64 = getGalDebBuilder("kvm-deb-bionic-amd64-gal", "vm-bionic-amd64",
                                     "qemu64", "ubuntu", "bionic", ramdisk=False)
gal_bld_kvm_deb_bionic_ppc64le = getGalDebBuilder("kvm-deb-bionic-ppc64le-gal", "vm-bionic-ppc64le",
                                     "POWER8", "ubuntu", "bionic", slavenames=power_slaves, ramdisk=False)
gal_bld_kvm_deb_bionic_aarch64 = getGalDebBuilder("kvm-deb-bionic-aarch64-gal", "vm-bionic-aarch64",
                                     "host", "ubuntu", "bionic", slavenames=arm64_slaves, ramdisk=False)
gal_bld_kvm_deb_focal_amd64 = getGalDebBuilder("kvm-deb-focal-amd64-gal", "vm-focal-amd64",
                                     "qemu64", "ubuntu", "focal", ramdisk=False)
gal_bld_kvm_deb_focal_ppc64le = getGalDebBuilder("kvm-deb-focal-ppc64le-gal", "vm-focal-ppc64le",
                                     "POWER8", "ubuntu", "focal", slavenames=power_slaves, ramdisk=False)
gal_bld_kvm_deb_focal_aarch64 = getGalDebBuilder("kvm-deb-focal-aarch64-gal", "vm-focal-aarch64",
                                     "host", "ubuntu", "focal", slavenames=arm64_slaves, ramdisk=False)
gal_bld_kvm_deb_impish_amd64 = getGalDebBuilder("kvm-deb-impish-amd64-gal", "vm-impish-amd64",
                                     "qemu64", "ubuntu", "impish", ramdisk=False)
gal_bld_kvm_deb_jammy_amd64 = getGalDebBuilder("kvm-deb-jammy-amd64-gal", "vm-jammy-amd64",
                                     "qemu64", "ubuntu", "jammy", ramdisk=False)
gal_bld_kvm_deb_stretch_amd64 = getGalDebBuilder("kvm-deb-stretch-amd64-gal", "vm-stretch-amd64",
                                     "qemu64", "debian", "stretch", ramdisk=False)
gal_bld_kvm_deb_stretch_x86 = getGalDebBuilder("kvm-deb-stretch-x86-gal", "vm-stretch-i386",
                                     "qemu64", "debian", "stretch", ramdisk=False)
gal_bld_kvm_deb_stretch_ppc64le = getGalDebBuilder("kvm-deb-stretch-ppc64le-gal", "vm-stretch-ppc64le",
                                     "POWER8", "debian", "stretch", slavenames=power_slaves, ramdisk=False)
gal_bld_kvm_deb_stretch_aarch64 = getGalDebBuilder("kvm-deb-stretch-aarch64-gal", "vm-stretch-aarch64",
                                     "host", "debian", "stretch", slavenames=arm64_slaves, ramdisk=False)
gal_bld_kvm_deb_bullseye_amd64 = getGalDebBuilder("kvm-deb-bullseye-amd64-gal", "vm-bullseye-amd64",
                                     "qemu64", "debian", "bullseye", ramdisk=False)
gal_bld_kvm_deb_buster_amd64 = getGalDebBuilder("kvm-deb-buster-amd64-gal", "vm-buster-amd64",
                                     "qemu64", "debian", "buster", ramdisk=False)
gal_bld_kvm_deb_buster_ppc64le = getGalDebBuilder("kvm-deb-buster-ppc64le-gal", "vm-buster-ppc64le",
                                     "POWER8", "debian", "buster", slavenames=power_slaves, ramdisk=False)
gal_bld_kvm_deb_buster_aarch64 = getGalDebBuilder("kvm-deb-buster-aarch64-gal", "vm-buster-aarch64",
                                     "host", "debian", "buster", slavenames=arm64_slaves, ramdisk=False)


def getBintarBuilder(name, kvm_image, cpu, ramdisk=True, catg="main", cmake="", suffix=""):
    bin_fact = BuildFactory()
    args = ["--port="+getport(), "--memory="+memory_def, "--user=buildbot", "--cpu="+cpu, "--smp=4", "--logfile=kernel_"+getport()+".log"]
    if ramdisk:
        args = args + ["--work-image=/dev/shm/vm-tmp-"+getport()+".qcow2"]
    kvm_image_test = kvm_image
    if kvm_image_test == "vm-centos5-amd64":
        kvm_image_test = "vm-centos6-amd64"
    elif kvm_image_test == "vm-centos5-i386":
        kvm_image_test = "vm-centos6-i386"
    if suffix:
        cmake += ' -DPLATFORM=linux' + suffix
    arch='x86_64' if '-amd64' in name else 'i686'
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    bin_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    bin_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-build.qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image_test+"-install.qcow2",
                 "/kvm/vms/"]))
    bin_fact.addStep(DownloadSourceTarball())
    bin_fact.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
rm -f compiler_warnings.supp
tar zxf "/tmp/buildcache/%(tarbuildnum)s:%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
ls -l compiler_warnings.supp
exit 0  # best-effort, not fatal if no suppression file
""")]))
    bin_fact.addStep(Compile(
        description=["making", "bintar"],
        descriptionDone=["make", "bintar"],
        timeout=3600,
        logfiles={"kernel": "kernel_"+getport()+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["runvm"] + args + ["--base-image=/kvm/vms/"+kvm_image+"-build.qcow2", "vm-tmp-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        ScpSourceIntoVM(),
        WithProperties("""
set -ex
case %(distdirname)s in
  *-10.[23].*)
    # centos5 sort doesn't support -V
    latest=$(wget --no-check-certificate https://hasky.askmonty.org/galera/ -O -|grep -o galera-25'\.[0-9]\.[0-9][0-9]' |sort|tail -1)
  ;;
  *)
    latest=$(wget --no-check-certificate https://hasky.askmonty.org/galera/ -O -|grep -o galera-26'\.[0-9]\+\.[0-9]\+' |sort -V|tail -1)
  ;;
esac
if [ -n "$latest" ] ; then
  wget --no-check-certificate https://hasky.askmonty.org/galera/$latest/bintar/$latest""" + suffix + "-" + arch + """.tar.gz
  if [ -r galera-*.tar.gz ] ; then
      tar xf galera-*.tar.gz
      p=$(echo $HOME/galera-*/usr)
      extra="-DEXTRA_FILES=$p/lib/libgalera_smm.so=lib;$p/lib/galera/libgalera_smm.so=lib/galera"
      for f in $p/bin/*; do
        extra="$extra;$f=bin"
      done
  fi
fi
cd buildbot
rm -Rf build
tar zxf "%(distname)s"
mv "%(distdirname)s" build
cd build
mkdir mkbin
cd mkbin
echo $PATH
echo $SHELL
if [ -d $HOME/local/lib ] ; then
  export CMAKE_LIBRARY_PATH="$HOME/local/lib"
fi
if [ -d $HOME/local/share/pkgconfig ] ; then
  export PKG_CONFIG_PATH="$HOME/local/share/pkgconfig"
fi
case %(branch)s in
  preview-*) EV=%(branch)s; EV=-DEXTRA_VERSION=-${EV#preview-*.*-} ;;
esac
export JAVA_HOME=/usr/lib/jvm/java
cmake -DBUILD_CONFIG=mysql_release -DWITH_READLINE=1 $EV $extra """ + cmake + """ ..
make -j4 package VERBOSE=1
basename mariadb-*.tar.gz .tar.gz > ../../bindistname.txt
mv "$(cat ../../bindistname.txt).tar.gz" ../
"""),
        WithProperties("= scp -P "+getport()+" "+kvm_scpopt+" 'buildbot@localhost:buildbot/build/mariadb-*.tar.gz' ."),
        "= scp -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:buildbot/bindistname.txt .",
]))

    bin_fact.addStep(Test(
        name="providers",
        description=["checking", "compression", "providers"],
        descriptionDone=["check", "compression", "providers"],
        timeout=1200,
        env={"TERM": "vt102"},
        command=["runvm"] + args +["--logfile=kernel_"+getport()+".log", "vm-tmp-"+getport()+".qcow2",
        WithProperties("""
set -ex
cd buildbot/build
num_providers_expected=`ls plugin/ | grep -E '^provider' | wc -l`
if [ $num_providers_expected -eq 0 ] ; then
  echo "No expected providers found, skipping the test"
  exit
fi
if [ "%(buildername)s" == "kvm-rpm-rhel8-ppc64le" ] ; then
  echo "Test warning"": This builder cannot build all providers due to MDEV-28738"
  num_providers_expected=2
fi

find mkbin/plugin/ -name "provider*.so"
num_providers_built=`find mkbin/plugin/ -name "provider*.so" | wc -l`

if [ $num_providers_built -ne $num_providers_expected ] ; then
  echo "ERROR: Found $num_providers_built provider libraries, expected $num_providers_expected"
  exit 1
fi
""")]))

    bin_fact.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        ))
    addPackageArchiveStep(bin_fact, '"%(bindistname)s.tar.gz"', "%(tarbuildnum)s")
    bin_fact.addStep(getMTR(
        name="mtr",
        description=["testing", "bintar"],
        descriptionDone=["test", "bintar"],
        logfiles={"kernel": "kernel_"+getport()+".log"},
        mtr_subdir=".",    # Where we scp vardir to
        env={"TERM": "vt102"},
        command=["runvm"] + args + ["--base-image=/kvm/vms/"+kvm_image_test+"-install.qcow2", "vm-tmp-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("= scp -P "+getport()+" "+kvm_scpopt+" %(bindistname)s.tar.gz buildbot@localhost:buildbot/"),
        WithProperties("""
set -ex
df -kT
cd buildbot
sudo rm -Rf /usr/local/%(bindistname)s
sudo tar zxf %(bindistname)s.tar.gz -C /usr/local/
cd /usr/local/%(bindistname)s
sudo /usr/sbin/useradd mysql
sudo sudo chown -R mysql .
sudo chgrp -R mysql .
sudo bin/mysql --version
sudo scripts/mysql_install_db --no-defaults --user=mysql
sudo chown -R root .
sudo chown -R mysql data mysql-test

echo "Test for MDEV-18563, MDEV-18526"

set +e
for p in /bin /sbin /usr/bin /usr/sbin /usr/local/bin /usr/local/sbin /usr/local/%(bindistname)s/scripts ; do
  if test -x $p/mysql_install_db ; then
    sudo $p/mysql_install_db --no-defaults --user=mysql --plugin-maturity=unknown
  else
    echo "$p/mysql_install_db does not exist"
  fi
done
sudo scripts/mysql_install_db --no-defaults --user=mysql --plugin-maturity=unknown

if ldd lib/plugin/ha_connect.so  | grep libodbc.so.1 | grep 'not found' ; then
  if [ -e /usr/lib64/libodbc.so.2 ] ; then
    sudo ln -s /usr/lib64/libodbc.so.2 /usr/lib64/libodbc.so.1
  elif [ -e /usr/lib/libodbc.so.2 ] ; then
    sudo ln -s /usr/lib/libodbc.so.2 /usr/lib/libodbc.so.1
  fi
fi

cd mysql-test
if test -f suite/plugins/pam/pam_mariadb_mtr.so; then
  for p in /lib*/security /lib*/*/security ; do
    test -f $p/pam_unix.so && sudo cp -v suite/plugins/pam/pam_mariadb_mtr.so $p/
  done
  sudo cp -v suite/plugins/pam/mariadb_mtr /etc/pam.d/
fi
perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --retry=3 --vardir="$(readlink -f /dev/shm/var)" --max-save-core=0 --max-save-datadir=1
"""),
        WithProperties("! sudo chmod -R go+rX /usr/local/%(bindistname)s/mysql-test/var/ || :"),
        WithProperties(
              "!= scp -rp -P " + getport() + " " + kvm_scpopt +
              " buildbot@localhost:/usr/local/%(bindistname)s/mysql-test/var/ . || :")]))

    bin_fact.addStep(getMTR(
        name="mtr-rocksdb",
        description=["testing", "rocksdb"],
        descriptionDone=["test", "rocksdb"],
        logfiles={"kernel": "kernel_"+getport()+".log"},
        mtr_subdir=".",    # Where we scp vardir to
        env={"TERM": "vt102"},
        command=["runvm"] + args + ["vm-tmp-"+getport()+".qcow2",
        WithProperties("""

cd /usr/local/%(bindistname)s/mysql-test
if ! sudo su -s /bin/sh -c "perl mysql-test-run.pl --mem rocksdb.1st 2>&1" mysql | grep -E 'RocksDB is not compiled|Could not find' ; then
  sudo su -s /bin/sh -c "perl mysql-test-run.pl --suite=rocksdb* --skip-test=rocksdb_hotbackup* --verbose-restart --force --parallel=4 --retry=3 --mem --max-save-core=0 --max-save-datadir=1" mysql
fi
"""),
        WithProperties("! sudo chmod -R go+rX /usr/local/%(bindistname)s/mysql-test/var/ || :"),
        WithProperties(
              "!= scp -rp -P " + getport() + " " + kvm_scpopt +
              " buildbot@localhost:/usr/local/%(bindistname)s/mysql-test/var/ . || :")]))

    return {'name': name, 'slavenames': kvm_slaves, 'builddir': name, 'factory': bin_fact,
            "nextBuild": myNextBuild,
            "category": catg }

bld_kvm_bintar_trusty_amd64 = getBintarBuilder("kvm-bintar-trusty-amd64", "vm-trusty-amd64", "qemu64", ramdisk=False,
                                       suffix='-systemd')
bld_kvm_bintar_trusty_x86 = getBintarBuilder("kvm-bintar-trusty-x86", "vm-trusty-i386", "qemu64", ramdisk=False,
                                       suffix='-systemd')

bld_kvm_bintar_quantal_amd64 = getBintarBuilder("kvm-bintar-quantal-amd64", "vm-quantal-amd64", "qemu64", ramdisk=False,
                                       suffix='-glibc_214')
bld_kvm_bintar_quantal_x86 = getBintarBuilder("kvm-bintar-quantal-x86", "vm-quantal-i386", "qemu64", ramdisk=False,
                                       suffix='-glibc_214')

bld_kvm_bintar_centos5_amd64 = getBintarBuilder("kvm-bintar-centos5-amd64", "vm-centos5-amd64", "qemu64", ramdisk=False)
bld_kvm_bintar_centos5_x86 = getBintarBuilder("kvm-bintar-centos5-x86", "vm-centos5-i386", "qemu64", ramdisk=False)

bld_kvm_bintar_centos6_amd64 = getBintarBuilder("kvm-bintar-centos6-amd64", "vm-centos6-amd64", "qemu64", ramdisk=False)
bld_kvm_bintar_centos6_x86 = getBintarBuilder("kvm-bintar-centos6-x86", "vm-centos6-i386", "qemu64", ramdisk=False)

bld_kvm_bintar_centos74_amd64 = getBintarBuilder("kvm-bintar-centos74-amd64", "vm-centos74-amd64", "qemu64", ramdisk=False,
                                       cmake="-DPMEM_LIBRARIES=/home/buildbot/local/lib/libpmem.a -DZSTD_LIBRARIES=/home/buildbot/local/lib/libzstd.a -DPLATFORM=linux-systemd")

bld_kvm_bintar_centos7_amd64_openssl = getBintarBuilder("kvm-bintar-centos7-amd64-openssl", "vm-centos74-amd64", "qemu64",
                                       ramdisk=False, cmake="-DWITH_SSL=system -DPLUGIN_ROCKSDB=NO -DPLUGIN_CASSANDRA=NO")

bld_kvm_bintar_centos6_amd64_openssl = getBintarBuilder("kvm-bintar-centos6-amd64-openssl", "vm-centos6-amd64", "qemu64",
                                       ramdisk=False, cmake="-DWITH_SSL=system")

bld_kvm_bintar_centos6_amd64_debug = getBintarBuilder("kvm-bintar-centos6-amd64-debug", "vm-centos6-amd64", "qemu64",
                                       ramdisk=False, cmake="-DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXE_LINKER_FLAGS=-Wl,--build-id -DCMAKE_MODULE_LINKER_FLAGS=-Wl,--build-id -DCMAKE_SHARED_LINKER_FLAGS=-Wl,--build-id")

def do_step_win(step):
        return (branch_is_not_galera(step) or (step.getProperty("branch")=="bb-10.4-galera4")) and branch_is_not_connector(step)

def make_win_build_factory(generator, cmake_extra_param, config,do_package, test_spec=" --suite=main,innodb,plugins --parallel=4 ",publish_root_dir=""):
        f = BuildFactory()
        f.addStep(ShellCommand(
        name= "close_open_handles",
        command=["dojob", "unlock_handles.bat" ],
        alwaysRun=True
        ));

        f.addStep(ShellCommand(
        name= "remove_build_dir",
        command=["dojob", "powershell -command Remove-Item *  -Recurse -Force" ],
        doStepIf=do_step_win,
	haltOnFailure=True
        ));
        if do_package:
                f.addStep(FileDownload(
                mastersrc=WithProperties("%(tarballpath)s"),
                slavedest=WithProperties("%(distdirname)s.tar.gz"),
                blocksize=524288,
                doStepIf=do_step_win
                ))
                f.addStep(ShellCommand(
                name = "unpack_tarball",
                command=["dojob", WithProperties("tar xfz %(distdirname)s.tar.gz && echo unpack succeeded && move  %(distdirname)s src && echo completed OK!")],
                doStepIf=do_step_win
                ))
        else:
                f.addStep(ShellCommand(
                name= "git_checkout",
                command=["dojob", WithProperties("git clone --branch %(branch)s --depth=100  %(repository)s src && cd src && git reset --hard %(revision)s")],
                timeout=7200,
                doStepIf=do_step_win
                ));
        cmake_extra_args = ' -DBUILD_CONFIG=mysql_release -DCOMPILATION_COMMENT="mariadb.org binary distribution" -DWITH_THIRD_PARTY=HeidiSQL -DWITH_EMBEDDED_SERVER=0 -DSIGNCODE=ON  -DSIGNTOOL_PARAMETERS="/a;/t;http://timestamp.globalsign.com/?signature=sha2" -DWITH_UNIT_TESTS=0 -DMYSQL_MAINTAINER_MODE=ERR' if do_package else ' -DPLUGIN_ROCKSDB=NO -DMYSQL_MAINTAINER_MODE=ERR -Wno-dev'
        f.addStep(Compile(
                name = "cmake",
                command=["dojob", WithProperties(("cmake src " if not generator else "cmake src -G \"" + generator + "\"") + " " + cmake_extra_param +  " " + cmake_extra_args)],
                warningPattern=vsWarningPattern,
                warningExtractor=Compile.warnExtractFromRegexpGroups,
                doStepIf=do_step_win
        ));
        f.addStep(Compile(
                name = "disable_rocksdb_compilation",
                command=["dojob", "cmake src -DPLUGIN_ROCKSDB=NO"],
                warningPattern=vsWarningPattern,
                warningExtractor=Compile.warnExtractFromRegexpGroups,
                doStepIf=lambda(step): do_step_win(step) and not isMainTree10_2Plus(step)  and not ("rocksdb" in step.getProperty("branch")) and not ("merge" in step.getProperty("branch"))
        ));

        f.addStep(Compile(
                name = "build",
                command=["dojob", WithProperties("cmake --build  .  --verbose --config " + config  + " -- -m")],
                env={"PreferredToolArchitecture": "x64"},
                warningPattern=vsWarningPattern,
                warningExtractor=Compile.warnExtractFromRegexpGroups,
                doStepIf=do_step_win
        ));


        if do_package:

                f.addStep(Compile(
                        name = "package",
                        command=["dojob", WithProperties("(if exist src\win\packaging\CPackZIPConfig.cmake (cmake --build . --config " + config + " --target win_package) else (cmake --build  .  --config " + config + " --target package))  && cmake --build  .  --config " + config + " --target MSI")],
                        warningPattern=vsWarningPattern,
                        warningExtractor=Compile.warnExtractFromRegexpGroups,
                        timeout=3600,
                        env={"PreferredToolArchitecture": "x64"},
                        doStepIf=lambda(step): in_savedPackageBranches(step) and do_step_win(step)
                ));
                export_dir = publish_root_dir +  "\\%(branch)s\\build-%(tarbuildnum)s\\%(buildername)s"
                f.addStep(ShellCommand(
                        name = "publish",
                        doStepIf=lambda(step): in_savedPackageBranches(step) and do_step_win(step),
                        command=["dojob", WithProperties("(if exist " + export_dir + "  (rd /s /q " + export_dir + ")) && mkdir " + export_dir + " && xcopy /y /f *.zip " + export_dir + " && xcopy /y /f *.msi " + export_dir + " && md5sums " + export_dir)],
                ));

                f.addStep(SetPropertyFromCommand(
                        property="package_bits",
                        command=["dojob", WithProperties("(if %(buildername)s == winx64-packages (echo 64) else (echo 32))")],
                        alwaysRun=True,
                ))

                f.addStep(SetPropertyFromCommand(
                        property="program_files_dir",
                        doStepIf=(lambda(step): step.getProperty("package_bits") == "64"),
                        command=["dojob", "echo Program Files"],
                        hideStepIf=(lambda results, s: results==SKIPPED),
                ));

                f.addStep(SetPropertyFromCommand(
                        property="program_files_dir",
                        doStepIf=(lambda(step): step.getProperty("package_bits") == "32"),
                        command=["dojob", "echo Program Files (x86)"],
                        hideStepIf=(lambda results, s: results==SKIPPED),
                ));

                f.addStep(ShellCommand(
                        name= "cleanup_64bit_msi",
                        command=["dojob", "C:\\Windows\\sysnative\\WindowsPowerShell\\v1.0\\powershell.exe -ExecutionPolicy bypass uninstall_mariadb.ps1 -x64" ],
                        doStepIf=(lambda(step): step.getProperty("package_bits") == "64"),
                        alwaysRun=True,
                        hideStepIf=(lambda results, s: results==SKIPPED),
                ));
                f.addStep(ShellCommand(
                        name= "cleanup_32bit_msi",
                        command=["dojob", "C:\\Windows\\sysnative\\WindowsPowerShell\\v1.0\\powershell.exe -ExecutionPolicy bypass uninstall_mariadb.ps1" ],
                        doStepIf=(lambda(step): step.getProperty("package_bits") == "32"),
                        alwaysRun=True,
                        hideStepIf=(lambda results, s: results==SKIPPED),
                ));

                f.addStep(ShellCommand(
                        name = "install-msi",
                        description = "Installing MSI with service configuration",
                        logfiles={"msiexec_log": "msi_install.txt"},
                        doStepIf=lambda(step): in_savedPackageBranches(step) and do_step_win(step),
                        command=["dojob", WithProperties("(rename mariadb*.msi mariadb-%(package_bits)s.msi && (start /W msiexec /i mariadb-%(package_bits)s.msi PORT=33%(package_bits)s INSTALLDIR=\"C:\\Program Files\\MariaDB\" SERVICENAME=MariaDB-%(package_bits)s /qn /l*v msi_install.txt)) || (echo ERROR: Installation failed && type msi_install.txt && exit 1)")],
                ));

                f.addStep(ShellCommand(
                        name = "check-msi",
                        description = "Checking that the service is up and running after installation",
                        doStepIf=lambda(step): in_savedPackageBranches(step) and do_step_win(step),
                        command=["dojob", WithProperties("dir C:\\\"%(program_files_dir)s\"\\MariaDB && (echo Check that the built and installed mysqld.exe are identical && (diff sql\RelWithDebInfo\mysqld.exe \"C:\\%(program_files_dir)s\\MariaDB\\bin\\mysqld.exe\" || (stat sql\RelWithDebInfo\mysqld.exe && stat \"C:\\%(program_files_dir)s\\MariaDB\\bin\\mysqld.exe\" && sql\RelWithDebInfo\mysqld.exe --version && C:\\\"%(program_files_dir)s\"\\MariaDB\\bin\\mysqld.exe --version && exit 1))) && (echo Check that the server is up and running on the right port && C:\\\"%(program_files_dir)s\"\\MariaDB\\bin\\mysql -uroot --port=33%(package_bits)s -e \"select @@version, @@version_comment; show status like 'Uptime'; select 'Stat' t, variable_name name, variable_value val from information_schema.global_status where variable_name like '%%have%%' union select 'Vars' t, variable_name name, variable_value val from information_schema.global_variables where variable_name like '%%have%%' order by t, name\")")],
                ));
                f.addStep(ShellCommand(
                        name = "uninstall-msi",
                        description = "Uninstall MSI",
                        logfiles={"msiexec_log": "msi_uninstall.txt"},
                        doStepIf=lambda(step): in_savedPackageBranches(step) and do_step_win(step),
                        command=["dojob", WithProperties("start /W msiexec /i mariadb-%(package_bits)s.msi REMOVE=ALL /qn /l*v msi_uninstall.txt || type msi_uninstall.txt && exit 1")],
                        alwaysRun=True,
                ));


        f.addStep(getMTR(
                test_type="nm", test_info="Normal mode",
                timeout=5400,
                #env={"NO_FEEDBACK_PLUGIN": "1"},
                command=["dojob", WithProperties("cd mysql-test && ..\\src\mysql-test\\collections\\buildbot_suites.bat" )],
                doStepIf=do_step_win
        ));

        f.addStep(getMTR(
                test_type="extra", test_info="connect engine", description=["connect engine"],
                command=["dojob", WithProperties("cd mysql-test &&  perl mysql-test-run.pl  --verbose-restart --force  --testcase-timeout=45 --suite-timeout=600  --retry=3 --suites=connect" )],
                doStepIf=lambda(step): do_step_win(step) and branch_is_10_x(step) #and step.getProperty("branch").startswith("ob-")

        ));

        f.addStep(ShellCommand(
        name= "remove_build_dir2",
        command=["dojob", "(taskkill /im mysqld.exe /f || exit 0) && (taskkill /im mariadbd.exe /f || exit 0) && powershell -command Remove-Item *  -Recurse -Force" ],
        doStepIf=do_step_win,
	haltOnFailure=True
        ));

        return f


bld_win32_debug = {
    'name': "win32-debug",
    'slavename': "bbwin3",
    'builddir': "D:\\win32-debug",
    'factory':  make_win_build_factory(generator='Visual Studio 17 2022',cmake_extra_param="-A Win32", config='Debug',do_package=False),
    'nextBuild': myNextBuild,
    'category': "main"
}

bld_winx64_debug = {
    'name': "winx64-debug",
    'slavename': "bb-win-azure-2",
    'builddir': "D:\\winx64-debug",
    'factory': make_win_build_factory(generator='Visual Studio 17 2022',cmake_extra_param='-A x64', config='Debug',do_package=False),
    'nextBuild': myNextBuild,
    'category': "main"
}

bld_win32_packages = {
    'name': "win32-packages",
    'slavename': "bb-win-azure",
    'builddir': "D:\\win32-packages",
    'factory':  make_win_build_factory(generator='Visual Studio 17 2022',cmake_extra_param='-A Win32', config='RelWithDebInfo',do_package=True, publish_root_dir="E:\\packs"),
    "nextBuild": myNextBuild,
    "category": "main"
}

bld_winx64_packages = {
    'name': "winx64-packages",
    'slavename': "bb-win-azure",
    'builddir': "D:\\winx64-packages",
    'factory': make_win_build_factory(generator='Visual Studio 17 2022',cmake_extra_param='-A x64', config='RelWithDebInfo',do_package=True, publish_root_dir="E:\\packs"),
    "nextBuild": myNextBuild,
    "category": "main"
}

# execfile("/etc/buildbot/builders/qa/qa_builders.py");

f_win_connector_c = BuildFactory()

f_win_connector_c.addStep(ShellCommand(
        name = "remove_old_build",
        command=["dojob", "rm -rf" ,
         WithProperties("d:\\buildbot\\%(buildername)s\\build")],
        timeout = 4*3600,
        haltOnFailure = True
));

f_win_connector_c.addStep(ShellCommand(
        name= "git_checkout",
        command=["dojob", WithProperties("rm -rf src && git clone -b %(branch)s %(repository)s src && cd src && git reset --hard %(revision)s && cd ..")],
        timeout=7200,
    doStepIf=do_step_win
));

f_win_connector_c.addStep(ShellCommand(
    name= "build_package32-debug",
    command=["dojob",
        WithProperties("rm -rf win32 && mkdir win32 && cd win32 && cmake ..\\src -G \"Visual Studio 17 2022\" -A \"Win32\" -DCMAKE_BUILD_TYPE=Debug && cmake --build . --config Debug --target package")
        ],
        haltOnFailure = True
));

f_win_connector_c.addStep(ShellCommand(
    name= "build_package32",
    command=["dojob",
        WithProperties("cd win32 && del CMakeCache.txt && cmake ..\\src -G \"Visual Studio 17 2022\" -A \"Win32\" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_MSI=1 -DWITH_SIGNCODE=1  && cmake --build . --clean-first --config RelWithDebInfo --target package")
        ],
        haltOnFailure = True
));

f_win_connector_c.addStep(ShellCommand(
    name= "build_package64-debug",
    command=["dojob",
        WithProperties("rm -rf win64 && mkdir win64 && cd win64 && cmake ..\\src -G \"Visual Studio 17 2022\" -A \"x64\" -DCMAKE_BUILD_TYPE=Debug && cmake --build . --config Debug --target package")
        ],
        haltOnFailure = True
));

f_win_connector_c.addStep(ShellCommand(
    name= "build_package64",
    command=["dojob",
        WithProperties("cd win64 && del CMakeCache.txt && cmake ..\\src -G \"Visual Studio 17 2022\" -A \"x64\" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_MSI=1 -DWITH_SIGNCODE=1 -DSIGN_OPTIONS=\"/a\" && cmake --build . --clean-first --config RelWithDebInfo --target package")
        ],
        haltOnFailure = True
));

f_win_connector_c.addStep(ShellCommand(
        name= "create_publish_dir",
        command=["dojob",
        WithProperties("mkdir c:\\build_archive\\%(buildername)s\%(branch)s\\%(revision)s || exit 0")]
        ))

f_win_connector_c.addStep(ShellCommand(
        name= "publish_win32",
        command=["dojob",
        WithProperties("cd win32 && xcopy /y /f win\packaging\*.msi c:\\build_archive\\%(buildername)s\\%(branch)s\\%(revision)s &&  md5sums c:/build_archive/%(buildername)s/%(branch)s/%(revision)s")]
        ))

f_win_connector_c.addStep(ShellCommand(
        name= "publish_win64",
        command=["dojob",
        WithProperties("cd win64 && xcopy /y /f win\packaging\*.msi c:\\build_archive\\%(buildername)s\\%(branch)s\\%(revision)s &&  md5sums c:/build_archive/%(buildername)s/%(branch)s/%(revision)s")]
        ))

f_win_connector_c.addStep(ShellCommand(
        name= "create_upload_dir",
        command=["dojob",
        WithProperties("if not exist \"c:\\bb\\connector-c\\build\\%(revision)s\" mkdir c:\\bb\\connector-c\\build\\%(revision)s && xcopy /y /f c:\\build_archive\\%(buildername)s\\%(branch)s\\%(revision)s\\* c:\\bb\\connector-c\\build\\%(revision)s")]
        ))

addPackageUploadStepWin(f_win_connector_c, 'win')

bld_win_connector_c = {
        'name': "win-connector_c",
        'slavename': "win-connectors",
        'builddir': "connector-c",
        'factory': f_win_connector_c,
        'category': "connectors"
}

f_win_connector_c_3 = BuildFactory()

f_win_connector_c_3.addStep(ShellCommand(
        name = "remove_old_build",
        command=["dojob", "rm -rf" ,
         WithProperties("d:\\buildbot\\%(buildername)s\\build")],
        timeout = 4*3600,
        haltOnFailure = True
));

f_win_connector_c_3.addStep(ShellCommand(
        name= "git_checkout",
        command=["dojob", WithProperties("rm -rf src && git clone -b %(branch)s %(repository)s src && cd src && git reset --hard %(revision)s && cd ..")],
        timeout=7200,
        doStepIf=do_step_win
));


f_win_connector_c_3.addStep(ShellCommand(
        name="create_dir",
        command=["dojob",
        WithProperties("rm win32 -rf && rm win64 -rf && mkdir win32 && mkdir win64 ")
        ],
        haltOnFailure = False
));

f_win_connector_c_3.addStep(ShellCommand(
        name= "build_package32",
        env={'PATH': "c:\\tools\\curl\\lib;${PATH}"},
        command=["dojob",
        WithProperties("cd win32 && del CMakeCache.txt && cmake --version && cmake ..\\src -G \"Visual Studio 17 2022\" -A \"Win32\" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_SSL=SCHANNEL -DWITH_SIGNCODE=1  -DWITH_MSI=ON -DCURL_INCLUDE_DIR=c:\\tools\\curl\\include && cmake --build . --clean-first --config RelWithDebInfo --target package")
        ],
        haltOnFailure = True
        ));

f_win_connector_c_3.addStep(ShellCommand(
        name= "build_package64",
        env={'PATH': "c:\\tools\\curl\\lib64;${PATH}"},
        command=["dojob",
        WithProperties("cd win64 && del CMakeCache.txt && cmake ..\\src -G \"Visual Studio 17 2022\" -A \"x64\" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_SSL=SCHANNEL -DWITH_SIGNCODE=1 -DWITH_MSI=ON -DCURL_INCLUDE_DIR=c:\\tools\\curl\\include && cmake --build . --clean-first --config RelWithDebInfo --target package")
        ],
        haltOnFailure = True
        ));

f_win_connector_c_3.addStep(ShellCommand(
        name= "create_publish_dir",
        command=["dojob",
        WithProperties("mkdir c:\\build_archive\\%(buildername)s\%(branch)s\\%(revision)s || exit 0")]
        ))

f_win_connector_c_3.addStep(ShellCommand(
        name= "publish_win32",
        command=["dojob",
        WithProperties("cd win32 && xcopy /y /f win\packaging\*.msi c:\\build_archive\\%(buildername)s\\%(branch)s\\%(revision)s &&  md5sums c:/build_archive/%(buildername)s/%(branch)s/%(revision)s")]
        ))

f_win_connector_c_3.addStep(ShellCommand(
        name= "publish_win64",
        command=["dojob",
        WithProperties("cd win64 && xcopy /y /f win\packaging\*.msi c:\\build_archive\\%(buildername)s\\%(branch)s\\%(revision)s &&  md5sums c:/build_archive/%(buildername)s/%(branch)s/%(revision)s")]
        ))

f_win_connector_c_3.addStep(ShellCommand(
        name= "create_upload_dir",
        command=["dojob",
        WithProperties("if not exist \"c:\\bb\\connector_c_3\\build\\%(revision)s\" mkdir c:\\bb\\connector_c_3\\build\\%(revision)s && xcopy /y /f c:\\build_archive\\%(buildername)s\\%(branch)s\\%(revision)s\\* c:\\bb\\connector_c_3\\build\\%(revision)s")]
        ))

addPackageUploadStepWin(f_win_connector_c_3, 'win')

bld_win_connector_c_3 = {
        'name': "win-connector_c_3",
        'slavename': "win-connectors",
        'builddir': "connector_c_3",
        'factory': f_win_connector_c_3,
        'category': "connectors"
}


def bld_linux_connector_c(name, kvm_image):
    linux_connector_c= BuildFactory()
    args= ["--port="+getport(), "--memory="+memory_def, "--user=buildbot", "--smp=4", "--cpu=qemu64"]
    linux_connector_c.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    linux_connector_c.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-build.qcow2",
                 "/kvm/vms/"]))
    linux_connector_c.addStep(Compile(
        description=["building", "linux-connector_c"],
        descriptionDone=["build", "linux-connector_c"],
        timeout=3600,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-build.qcow2"] + args +["vm-tmp-"+getport()+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("""
set -ex
gcc --version
uname -a
rm -rf %(buildername)s
mkdir %(buildername)s
cd %(buildername)s
rm -rf build
#sudo apt-get -y install git
git clone -b %(branch)s "https://github.com/MariaDB/mariadb-connector-c.git" build
cd build
git reset --hard %(revision)s
cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGIT_BUILD_SRCPKG=1 -DPACKAGE_PLATFORM_SUFFIX=$HOSTNAME
cmake --build . --config RelWithDebInfo --target package
make package
ls -l *.tar.gz
ls -l *.zip
"""),
        "= scp -r -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:/home/buildbot/" + name + "/build/mariadb*tar.gz .",
        "= scp -r -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:/home/buildbot/" + name + "/build/mariadb*zip .",
        ]))
    linux_connector_c.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["sh", "-c", WithProperties("if [ -f mariadb*freebsd*tar.gz ]; then basename `ls mariadb*freebsd*tar.gz`;elif [ -f mariadb*64.tar.gz ]; then basename `ls mariadb*64.tar.gz`;else basename `ls mariadb*i386.tar.gz`;fi")],
        ))
    addPackageUploadStep(linux_connector_c, '"%(bindistname)s"')

    linux_connector_c.addStep(SetPropertyFromCommand(
        property="srcdistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*src*tar.gz`")],
        ))
    addPackageUploadStep(linux_connector_c, '"%(srcdistname)s"')

    linux_connector_c.addStep(SetPropertyFromCommand(
        property="zipdistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*src*zip`")],
        ))
    addPackageUploadStep(linux_connector_c, '"%(zipdistname)s"')

    return {'name': name, 'builddir': name,
            'factory': linux_connector_c,
            "slavenames": connector_slaves,
            "category": "connectors"}

bld_freebsd_x64_connector_c= bld_linux_connector_c("freebsd_x64-connector_c", "vm-freebsd101-amd64");
bld_freebsd11_x86_connector_c= bld_linux_connector_c("freebsd11_x86-connector_c", "vm-freebsd11-i386");
bld_freebsd11_x64_connector_c= bld_linux_connector_c("freebsd11_x64-connector_c", "vm-freebsd11-amd64");
# New cc builders
bld_cc_centos7_amd64=bld_linux_connector_c("cc-centos7-amd64", "vm-centos7-amd64");
bld_cc_centos8_amd64=bld_linux_connector_c("cc-centos8-amd64", "vm-centos8-amd64");
bld_cc_rhel9_amd64=bld_linux_connector_c("cc-rhel9-amd64", "vm-rhel9-amd64");
bld_cc_bionic_amd64=bld_linux_connector_c("cc-bionic-amd64", "vm-bionic-amd64");
bld_cc_focal_amd64=bld_linux_connector_c("cc-focal-amd64", "vm-focal-amd64");
bld_cc_impish_amd64=bld_linux_connector_c("cc-impish-amd64", "vm-impish-amd64");
bld_cc_jammy_amd64=bld_linux_connector_c("cc-jammy-amd64", "vm-jammy-amd64");
bld_cc_stretch_amd64=bld_linux_connector_c("cc-stretch-amd64", "vm-stretch-amd64");
bld_cc_buster_amd64=bld_linux_connector_c("cc-buster-amd64", "vm-buster-amd64");
bld_cc_fedora34_amd64=bld_linux_connector_c("cc-fedora34-amd64", "vm-fedora34-amd64");
bld_cc_fedora35_amd64=bld_linux_connector_c("cc-fedora35-amd64", "vm-fedora35-amd64");
bld_cc_fedora36_amd64=bld_linux_connector_c("cc-fedora36-amd64", "vm-fedora36-amd64");
bld_cc_sles12_amd64=bld_linux_connector_c("cc-sles12-amd64", "vm-sles125-amd64");
bld_cc_sles15_amd64=bld_linux_connector_c("cc-sles15-amd64", "vm-sles150-amd64");

# These two are used by below included connectors builders
execfile("/etc/buildbot/builders/server-installation.py");
execfile("/etc/buildbot/builders/connectors-buildsteps.py");

execfile("/etc/buildbot/builders/odbc/linux_builders.py");
execfile("/etc/buildbot/builders/odbc/windows_builder.py");
execfile("/etc/buildbot/builders/odbc/src_builder.py");
execfile("/etc/buildbot/builders/odbc/macos_builder.py");
execfile("/etc/buildbot/builders/conncpp/src_builder.py");
execfile("/etc/buildbot/builders/conncpp/windows_builder.py");
execfile("/etc/buildbot/builders/conncpp/linux_builders.py");


from buildbot.steps.slave import RemoveDirectory

# has been down for a long time
##-------------------------------------------------------------------------------
## SUSE 12 P8 RPM Builder
##-------------------------------------------------------------------------------
#f_p8_suse12_rpm = BuildFactory()
#f_p8_suse12_rpm.addStep(git_checkout)
#
#f_p8_suse12_rpm.addStep(SetPropertyFromCommand(
#        property="distdirname",
#        command=["sh", "-c", WithProperties("pwd")],
#        alwaysRun=True))
#
#f_p8_suse12_rpm.addStep(
#    getCompileStep(["sh", "-c", "git clean -dfX && cmake . -DBUILD_CONFIG=mysql_release -DWITH_JEMALLOC=no -DRPM=suse12 && make -j4 package VERBOSE=1"],
#    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
#        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
#)
#
#f_p8_suse12_rpm.addStep(ShellCommand(
#    description=["archiving"],
#    descriptionDone=["archive"],
#    command=["sh", "-c", WithProperties("""
#set -ex
#rm -Rf rpms
#mkdir -p rpms
#""" + 'mv -vi *.rpm rpms/\n' + """
#cd rpms
#find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
#""")]))
#
#
#addPackageUploadStep(f_p8_suse12_rpm, 'rpms')
#
#f_p8_suse12_rpm.addStep(RemoveDirectory(
#        name="remove_build",
#        dir=WithProperties("%(distdirname)s"),
#        alwaysRun=True));
#
#bld_p8_suse12_rpm = {"name": "p8-suse12-rpm",
#                "slavename": "power8-vlp05",
#                "builddir": "power8-vlp05-rpm",
#                "factory": f_p8_suse12_rpm,
#                "nextBuild": myNextBuild,
#                "category": "experimental",
#                }
#
#
##-------------------------------------------------------------------------------
## SUSE 12 P8 RPM Builder for Galera
##-------------------------------------------------------------------------------
#
#f_p8_suse12_rpm_gal = BuildFactory()
#
#f_p8_suse12_rpm_gal.addStep(SetPropertyFromCommand(
#        property="distdirname",
#        command=["sh", "-c", WithProperties("pwd")],
#        alwaysRun=True))
#
#f_p8_suse12_rpm_gal.addStep(Compile(
#        description=["making", "rpms"],
#        descriptionDone=["make", "rpms"],
#        timeout=7200,
#        warningPattern=gccWarningPattern,
#        warningExtractor=Compile.warnExtractFromRegexpGroups,
#        suppressionFile=WithProperties("compiler_warnings.supp"),
#        env={"TERM": "vt102"},
#        command=["sh", "-c", WithProperties("""
#set -ex
#rm -Rf rpms build
#mkdir rpms
#git clone -b %(branch)s "https://github.com/MariaDB/galera.git" build
#cd build
#git reset --hard %(revision)s
#git submodule init
#git submodule update
#./scripts/build.sh -p
#cp `find *.rpm -maxdepth 1 -type f` ../rpms
#cd ..
#        """),
#        ]))
#
#f_p8_suse12_rpm_gal.addStep(ShellCommand(
#        description=["archiving"],
#        descriptionDone=["archive"],
#        command=["sh", "-c", WithProperties("""
#set -ex
#cd rpms
#find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
#""")]))
#
#addPackageUploadStep(f_p8_suse12_rpm_gal, 'rpms')
#
#f_p8_suse12_rpm_gal.addStep(RemoveDirectory(
#        name="remove_build",
#        dir=WithProperties("%(distdirname)s"),
#        alwaysRun=True));
#
#gal_bld_p8_suse12_rpm = {"name": "p8-suse12-rpm-gal",
#                "slavename": "power8-vlp05",
#                "builddir": "power8-vlp05-rpm-gal",
#                "factory": f_p8_suse12_rpm_gal,
#                "nextBuild": myNextBuild,
#                "category": "galera",
#                }



#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

# test_set: 
# - nm: default only
# - nm-ps: nm + ps
# - full: nm + ps + emb + emb-ps + extra
def getNonVmTest(buildopts, testopts, test_set):

    def mtr_step(name, type, info, args, doRun= True):
        return getMTR(
          name=name,
          test_type=type,
          test_info=info,
          timeout=3600,
          env={"TERM": "vt102", "NO_FEEDBACK_PLUGIN": "1"},
          doStepIf=doRun,
          parallel=16,
          command=["sh", "-c", WithProperties("""
set -xe
cd mysql-test
perl mysql-test-run.pl --verbose-restart --mem --parallel=16 --force --max-test-fail=10 --max-save-core=0 --max-save-datadir=1 """ + args + """ """ + testopts
)])

    f = BuildFactory()
    f.addStep(git_checkout)
    f.addStep(ShellCommand(
            description=["cleanup"],
            descriptionDone=["cleanup"],
            command=["sh", "-c", WithProperties("""
    rm -rf /dev/shm/var_auto_*
    """)]))

    f.addStep(Compile(
        timeout=3600,
        description=["building"],
        descriptionDone=["build"],
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("support-files/compiler_warnings.supp"),
        env={"TERM": "vt102",
              "EXTRA_FLAGS": "-O2 -fno-omit-frame-pointer -Wno-uninitialized -fno-strict-aliasing",
              "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"},
        command=["sh", "-c", WithProperties("""
set -ex
cmake . """ + buildopts + """
make -j8
ldd sql/mysqld sql/mariadbd client/mariadb client/mysql || true
""")]))

    f.addStep(mtr_step("mtr-nm", "nm", "Normal",""))

    if test_set == "nm-ps" or test_set == "full":
        f.addStep(mtr_step("mtr-ps", "ps", "PS protocol","--ps-protocol"))

    if test_set == test_set == "full":
        f.addStep(mtr_step("mtr-emb", "emb", "Embedded","--embedded", branch_is_not_galera))
        f.addStep(mtr_step("mtr-emb-ps", "emb-ps", "Embedded PS protocol","--embedded --ps-protocol", branch_is_not_galera))
        f.addStep(mtr_step("mtr-extra", "xtra", "Some additional test suites","--suite=funcs_1,funcs_2,jp,engines/funcs,engines/iuds --mysqld=--open-files-limit=0 --mysqld=--log-warnings=1"))

    return f

def prepareToBuild(f,vm_img):

    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    f.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))

    f.addStep(ShellCommand(
        description=["rsyncing", "VM"],
        descriptionDone=["rsync", "VM"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        timeout=14400,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+vm_img,
                 "/kvm/vms/"]))

    f.addStep(FileDownload(
        mastersrc=WithProperties("%(tarballpath)s"),
        slavedest=WithProperties("%(distname)s"),
        blocksize=524288,
        ))

    # Extract the compiler warning suppressions file from the source tarball.
    f.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
tar zxf "/tmp/buildcache/%(tarbuildnum)s:%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
exit 0  # best-effort, not fatal if no suppression file
""")]))

    return f

# fips_mode: fips / nofips
def getOpenSslTest(fips_mode, buildopts="", vm_img="vm-focal-amd64-build.qcow2", openssl_version="3.0.1"):

    f= BuildFactory()

    kvm_log = "kernel_"+getport()+".log"
    kvm_args = ["/usr/local/bin/runvm",
                "--port="+getport(), "--user=buildbot",
                "--smp=4", "--cpu=qemu64",
                "--logfile="+kvm_log,
                "--memory="+memory_def,
                ]
    tmp_img = "vm-tmp-"+getport()+".qcow2"

    def mtr_step(name, type, info, fips, args, doRun= True):
        return getMTR(
          name=name,
          test_type=type,
          test_info=info,
          timeout=3600,
          logfiles={"kernel": "kernel_"+getport()+".log", "syslog": "daemon.log"},
          mtr_subdir=".",
          env={"TERM": "vt102", "NO_FEEDBACK_PLUGIN": "1"},
          doStepIf=doRun,
          parallel=16,
          command=kvm_args + [tmp_img,
            WithProperties("""
set -xe
workdir=`pwd`
cd buildbot/build/mysql-test

fips_test_mode=""" + fips + """
if [ "$fips_test_mode" = "fips" ] ; then
  cp lib/openssl.cnf lib/openssl.cnf.bk
  patch -p 2 < $workdir/fips-config-patch.diff
  echo ".include $workdir/openssl3/fipsmodule.cnf" >> lib/openssl.cnf
elif [ -e lib/openssl.cnf.bk ] ; then
  cp lib/openssl.cnf.bk lib/openssl.cnf
fi
cat lib/openssl.cnf
export LD_LIBRARY_PATH=$workdir/openssl3/lib64
ldd ../sql/mysqld ../client/mysql

# All *ssl* tests, removing ./ prefix right away
find . -name '*ssl*.test' | sed -e 's/^\.\///g' > /tmp/test.list
# All tests calling including certain functions (will produce an excessive list, with false positives)
grep -rliE 'encode|des_encrypt|aes_encrypt|md5|sha[12]' * | grep ".test$" >> /tmp/test.list
# Remove .test ending
sed -i 's/\.test$//g' /tmp/test.list
# Remove suite/ and plugin/xxx/ prefixes
sed -i 's/^suite\///g' /tmp/test.list
sed -i 's/^plugin\/[^\/]*\///g' /tmp/test.list
# Replace all /t/ with a dot
sed -i 's/\/t\//\./g' /tmp/test.list
# Only replace the last slash with a dot, so that main/select becomes main.select,
# but spider/oracle/ha becomes spider/oracle.ha
sed -i 's/\/\([^\/\.]*\)*$/\.\\1/g' /tmp/test.list
# Remove plugin and encryption tests, we'll run the whole suites
sed -i '/^plugin\//d' /tmp/test.list
sed -i '/^encryption\//d' /tmp/test.list
cat /tmp/test.list

set +e
sudo apt-get install -y galera-4
perl mysql-test-run.pl --verbose-restart --parallel=6 --vardir=/dev/shm/var --force `cat /tmp/test.list | sort | uniq` {suite/encryption,plugin/*}/{t/,}*.test
res=$?
cp -r /dev/shm/var /home/buildbot/
exit $res
"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+getport()+" "+kvm_scpopt+" buildbot@localhost:daemon.log .",
        WithProperties(
              "!= rm -Rf var/ ; scp -rp -P " + getport() + " " + kvm_scpopt +
              " buildbot@localhost:/home/buildbot/var/ . || :")])

    prepareToBuild(f,vm_img)
    f.addStep(FileDownload(
        name="download openssl3",
        mastersrc=WithProperties("/ds1819/openssl/openssl-"+openssl_version+"-"+fips_mode+".tar.gz"),
        slavedest=WithProperties("openssl3.tar.gz"),
        blocksize=524288,
        ))
    f.addStep(FileDownload(
        name="download patch",
        mastersrc=WithProperties("/ds1819/openssl/fips-config-patch.diff"),
        slavedest=WithProperties("fips-config-patch.diff"),
        blocksize=524288,
        ))

    f.addStep(Compile(
        timeout=7200,
        description=["building"],
        descriptionDone=["build"],
        logfiles={"kernel": kvm_log},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command= kvm_args +
        ["--base-image=/kvm/vms/"+vm_img, tmp_img,
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("= scp -P " + getport() + " "+kvm_scpopt+" openssl3.tar.gz fips-config-patch.diff buildbot@localhost:~/"),
        WithProperties("= scp "+kvm_scpopt+" -P "+getport()+" %(distname)s buildbot@localhost:buildbot/"),
        WithProperties("""
set -xe
workdir=`pwd`
ls -l
df -kT
ls -l
tar zxf openssl3.tar.gz 
mkdir buildbot/build
cd buildbot/build
tar zxf "../%(distname)s" --strip-components=1
cmake . -DWITH_SSL=$workdir/openssl3 """ + buildopts + """
make -j6 VERBOSE=1
ldd sql/mysqld client/mysql || true
""")
]))

    f.addStep(ShellCommand(
        name="install galera",
        description=["installing", "galera"],
        descriptionDone=["install", "galera"],
        command=kvm_args + [tmp_img,
          WithProperties("""
set -ex
curl -LsSO https://r.mariadb.com/downloads/mariadb_repo_setup
chmod uga+x ./mariadb_repo_setup
sudo ./mariadb_repo_setup --mariadb-server-version=10.7 --skip-maxscale --skip-tools
sudo apt-get install -y galera-4
""")]))

    f.addStep(mtr_step("mtr_nm_"+fips_mode, "nm", "Normal (no --ps-protocol) in "+fips_mode+" mode", fips_mode, ""))
    if fips_mode == "fips":
      f.addStep(mtr_step("mtr_nm_fips_disabled", "nm", "Normal (no --ps-protocol) with fips disabled", "fips-disabled", ""))

    return f

def getFulltest(buildcmd, vm_img, slavenames=kvm_slaves):
    f= BuildFactory()

    kvm_log = "kernel_"+getport()+".log"
    kvm_args = ["/usr/local/bin/runvm",
                "--port="+getport(), "--user=buildbot",
                "--smp=4", "--cpu=qemu64",
                "--logfile="+kvm_log,
                "--memory="+memory_def,
                "--kvm=-hdb", "--kvm=vm-blank-20G.qcow2",
                ]
    tmp_img = "vm-tmp-"+getport()+".qcow2"

    def mtr_step(name, type, info, args, doRun= True):
        return getMTR(
          name=name,
          test_type=type, test_info=info,
          logfiles={"kernel": kvm_log},
          mtr_subdir=".",    # Where we scp vardir to
          timeout=5000,
          env={"TERM": "vt102"},
          command=kvm_args + [tmp_img,
            WithProperties("""
set -x
sudo mount /dev/sdb1 /mnt
sudo sysctl fs.aio-max-nr=1048576
cd buildbot/build/%(distdirname)s/mysql-test
NO_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl --verbose-restart --force --retry=3 --max-save-core=0 --max-save-datadir=1 """ + args + """
res=$?
cp -r var/ ~/
ls -l /home/buildbot/
exit $res
"""),
            WithProperties(
              "!= rm -Rf var/ ; scp -rp -P " + getport() + " " + kvm_scpopt +
              " buildbot@localhost:var/ . || :")
          ],
          doStepIf=doRun)

    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    f.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))

    f.addStep(ShellCommand(
        description=["rsyncing", "VM"],
        descriptionDone=["rsync", "VM"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-t", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+vm_img,
                 "bb01.mariadb.net::kvm/vms/vm-blank-20G.qcow2",
                 "/kvm/vms/"]))

    f.addStep(FileDownload(
        mastersrc=WithProperties("%(tarballpath)s"),
        slavedest=WithProperties("%(distname)s"),
        blocksize=524288,
        ))

    # Extract the compiler warning suppressions file from the source tarball.
    f.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
qemu-img create -b /kvm/vms/vm-blank-20G.qcow2 -f qcow2 vm-blank-20G.qcow2
#tar zxf "%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
tar zxf "/tmp/buildcache/%(tarbuildnum)s:%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
exit 0  # best-effort, not fatal if no suppression file
""")]))

    f.addStep(Compile(
        timeout=7200,
        description=["building"],
        descriptionDone=["build"],
        logfiles={"kernel": kvm_log},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command= kvm_args +
        ["--base-image=/kvm/vms/"+vm_img, tmp_img,
        "rm -Rf buildbot && sudo mount /dev/sdb1 /mnt && sudo mkdir /mnt/buildbot && sudo chown buildbot:buildbot /mnt/buildbot && ln -s /mnt/buildbot buildbot",
        WithProperties("= scp "+kvm_scpopt+" -P "+getport()+" %(distname)s buildbot@localhost:buildbot/"),
        WithProperties("""
set -ex
df -kT
mkdir buildbot/build
cd buildbot/build
tar zxf "../%(distname)s"
cd "%(distdirname)s"
""" + buildcmd + "\n"),
         ]))

    f.addStep(getMTR(
        name="mtr-hashicorp",
        doStepIf=branch_is_10_9_or_later,
        description=["running", "hashicorp", "plugin", "tests"],
        descriptionDone=["Hashicorp", "plugin", "MTR", "tests"],
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        logfiles={"kernel": "kernel_"+getport()+".log", "syslog": "daemon.log"},
        mtr_subdir=".",    # Where we scp vardir to
        env={"TERM": "vt102"},
        command=kvm_args + [tmp_img,
          WithProperties("""
set -ex
sudo mount /dev/sdb1 /mnt
if which curl ; then
  curl -O https://raw.githubusercontent.com/MariaDB/mariadb.org-tools/master/buildbot/steps/hashicorp-setup.sh
elif which wget ; then
  wget --timeout=20 https://raw.githubusercontent.com/MariaDB/mariadb.org-tools/master/buildbot/steps/hashicorp-setup.sh -O hashicorp-setup.sh > /dev/null
fi

if ! [ -e ./hashicorp-setup.sh ] ; then
  echo "ERROR: Failed to download hashicorp-setup.sh"
  exit 1
fi

. ./hashicorp-setup.sh

cd buildbot/build/%(distdirname)s/mysql-test
NO_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl --suite=vault --parallel=1 --verbose-restart --force --big
res=$?
cp -r var/ ~/
ls -l /home/buildbot/
exit $res
"""),
          WithProperties(
            "!= rm -Rf var/ ; scp -rp -P " + getport() + " " + kvm_scpopt +
            " buildbot@localhost:var/ . || :")
        ]
    ))

    f.addStep(mtr_step("mtr_emb", "emb", "Embedded",
        "--mem --embedded-server --parallel=4",
        branch_is_not_galera))

    f.addStep(mtr_step("mtr_nm", "nm", "Normal (no --ps-protocol)",
        "--mem --parallel=4"))

    f.addStep(mtr_step("mtr_ps", "ps", "ps-protocol",
        "--mem --parallel=4 --ps-protocol"))

    f.addStep(mtr_step("mtr_ps_emb", "ps-embedded", "--ps --embedded",
        "--ps --embedded --mem --parallel=4"))

    # See TODO-823 for explanation why open-files-limit and log-warnings are here
    f.addStep(mtr_step("mtr_xtra", "xtra", "Some additional test suites",
        "--mem --suite=jp,spider,spider/bg,engines/funcs,engines/iuds --big --parallel=2 --testcase-timeout=120 --mysqld=--open-files-limit=0 --mysqld=--log-warnings=1"))

    f.addStep(mtr_step("mtr_opttrace", "xtra", "Main suite with optimizer trace",
        "--mem --suite=main --parallel=4 --mysqld=--optimizer_trace=enabled=on", doRun=branch_is_10_4_or_later))

    return f


def getBigtest(buildcmd, vm_img, slavenames=kvm_slaves):
    f= BuildFactory()

    kvm_log = "kernel_"+getport()+".log"
    kvm_args = ["/usr/local/bin/runvm",
                "--port="+getport(), "--user=buildbot",
                "--smp=4", "--cpu=qemu64",
                "--logfile="+kvm_log,
                "--memory="+memory_def,
                "--kvm=-hdb", "--kvm=vm-blank-20G.qcow2",
                ]
    tmp_img = "vm-tmp-"+getport()+".qcow2"

    def mtr_step(name, type, info, args, doRun= True):
        return getMTR(
          name=name,
          test_type=type, test_info=info,
          logfiles={"kernel": kvm_log},
          mtr_subdir=".",    # Where we scp vardir to
          timeout=5000,
          env={"TERM": "vt102", "ASAN_OPTIONS": "abort_on_error=1"},
          command=kvm_args + [tmp_img,
            WithProperties("""
set -ex
sudo mount /dev/sdb1 /mnt
sudo sysctl fs.aio-max-nr=1048576
case """ + name + """ in
*galera*)

  case "%(branch)s" in
  *10.[2-3]*)
    GALERA_VERSION=3
    ;;
  *)
    GALERA_VERSION=4
    ;;
  esac

  mkdir galera_download
  cd galera_download
  if ! wget https://hasky.askmonty.org/builds/mariadb-${GALERA_VERSION}.x/latest/kvm-deb-xenial-amd64-gal/debs/ --recursive -np -R "index.html*" -nH --cut-dirs=4 --no-check-certificate ; then
    echo "WARNING: wget exited with a non-zero code, but it may be bogus"
    if ! `ls debs/binary/galera*.deb` ; then
      echo "ERROR: Could not download the Galera library"
      exit 1
    fi
  fi
  mv debs ../buildbot/galera-debs
  cd ..
  rm -rf galera_download
  sudo sh -c 'echo "deb [trusted=yes allow-insecure=yes] file:///home/buildbot/buildbot/galera-debs binary/" >> /etc/apt/sources.list.d/galera-test-repo.list'

  sudo apt-get update
  sudo apt-get install --allow-unauthenticated -y galera-${GALERA_VERSION}
  ;;
esac

cd "buildbot/build/%(distdirname)s/mysql-test"
""" +
              "NO_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl  --verbose-restart " +
              "--force --max-save-core=0 --max-save-datadir=1 --skip-test='rocksdb\..*' " + args + "\n"),
            WithProperties(
              "!= rm -Rf var/ ; scp -rp -P " + getport() + " " + kvm_scpopt +
              " buildbot@localhost:buildbot/build/%(distdirname)s/mysql-test/var/ . || :")
          ],
          doStepIf=doRun)

    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    f.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))

    f.addStep(ShellCommand(
        description=["rsyncing", "VM"],
        descriptionDone=["rsync", "VM"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-t", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+vm_img,
                 "bb01.mariadb.net::kvm/vms/vm-blank-20G.qcow2",
                 "/kvm/vms/"]))

    f.addStep(FileDownload(
        mastersrc=WithProperties("%(tarballpath)s"),
        slavedest=WithProperties("%(distname)s"),
        blocksize=524288,
        ))

    # Extract the compiler warning suppressions file from the source tarball.
    f.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
qemu-img create -b /kvm/vms/vm-blank-20G.qcow2 -f qcow2 vm-blank-20G.qcow2
#tar zxf "%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
tar zxf "/tmp/buildcache/%(tarbuildnum)s:%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
exit 0  # best-effort, not fatal if no suppression file
""")]))

    f.addStep(Compile(
        timeout=7200,
        description=["building"],
        descriptionDone=["build"],
        logfiles={"kernel": kvm_log},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command= kvm_args +
        ["--base-image=/kvm/vms/"+vm_img, tmp_img,
        "rm -Rf buildbot && sudo mount /dev/sdb1 /mnt && sudo mkdir /mnt/buildbot && sudo chown buildbot:buildbot /mnt/buildbot && ln -s /mnt/buildbot buildbot",
        WithProperties("= scp "+kvm_scpopt+" -P "+getport()+" %(distname)s buildbot@localhost:buildbot/"),
        WithProperties("""
set -ex
mkdir buildbot/build
cd buildbot/build
tar zxf "../%(distname)s"
cd "%(distdirname)s"
""" + buildcmd + "\n"),
         ]))

    f.addStep(mtr_step("mtr_emb", "emb-big", "Embedded with --big",
        "--embedded-server --big --big --parallel=2 --testcase-timeout=120",
        branch_is_not_galera))

    f.addStep(mtr_step("mtr_nm", "n-big", "Big (no --ps-protocol)",
        "--big --big --parallel=2 --testcase-timeout=120"))

    f.addStep(mtr_step("mtr_ps", "p-big", "ps-protocol big)",
        "--big --big --ps-protocol --parallel=2 --testcase-timeout=120"))

    f.addStep(mtr_step("mtr_galera", "n-big", "Big (no --ps-protocol)",
        "--suites=galera,wsrep --big --big --parallel=2 --testcase-timeout=120",
        ))

    return f


f_kvm_fulltest= getFulltest(
    'cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system -DWITH_JEMALLOC=auto -DWITH_EMBEDDED_SERVER=1 -DHAVE_EMBEDDED_PRIVILEGE_CONTROL=1 -DWITH_LIBARCHIVE=ON -Wno-dev && make -j5 VERBOSE=1',
    "vm-xenial-amd64-build.qcow2")

# We tried to add bb04 to the list of slaves, but it didn't work,
# see MDEV-10254 for more details
# There was bb05 here, removed (temporarily?)
bld_kvm_fulltest= {
    "name": "kvm-fulltest",
    "slavenames": kvm11_slaves,
    "builddir": "kvm-fulltest",
    "factory": f_kvm_fulltest,
    "nextBuild": myNextBuild,
    "category": "main",
    }

f_kvm_fulltest2= getFulltest(
    'cmake . -DCMAKE_BUILD_TYPE=Debug -DWITH_EMBEDDED_SERVER=1 -DHAVE_EMBEDDED_PRIVILEGE_CONTROL=1 && make -j5 VERBOSE=1',
    "vm-xenial-i386-build.qcow2")

bld_kvm_fulltest2= {
    "name": "kvm-fulltest2",
    "slavenames": kvm11_slaves,
    "builddir": "kvm-fulltest2",
    "factory": f_kvm_fulltest2,
    "nextBuild": myNextBuild,
    "category": "main",
    }

# have been offline for years
#f_kvm_fulltest_big= getBigtest(
#    'cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system -DWITH_JEMALLOC=auto -DWITH_EMBEDDED_SERVER=1 -DHAVE_EMBEDDED_PRIVILEGE_CONTROL=1 -DWITH_ASAN=ON && make -j5 VERBOSE=1',
#    "vm-xenial-amd64-build.qcow2")
#
# bld_kvm_fulltest_big= {
#    "name": "kvm-fulltest-big",
#    "slavenames": ["knielsen-kvm-x86"],
#    "builddir": "kvm-fulltest-big",
#    "factory": f_kvm_fulltest_big,
#    "nextBuild": myNextBuild,
#    "category": "experimental",
#    }
#
#f_kvm_fulltest2_big= getBigtest(
#    'cmake . -DCMAKE_BUILD_TYPE=Debug -DWITH_EMBEDDED_SERVER=1 -DHAVE_EMBEDDED_PRIVILEGE_CONTROL=1 && make -j5 VERBOSE=1',
#    "vm-xenial-i386-build.qcow2")
#
#bld_kvm_fulltest2_big= {
#    "name": "kvm-fulltest2-big",
#    "slavenames": ["knielsen-kvm-x86"],
#    "builddir": "fulltest2-big",
#    "factory": f_kvm_fulltest2_big,
#    "nextBuild": myNextBuild,
#    "category": "experimental",
#    }

f_openssl3_fips_debug= getOpenSslTest('fips','-DCMAKE_BUILD_TYPE=Debug -DPLUGIN_ROCKSDB=NO -DPLUGIN_SPHINX=NO -DPLUGIN_SPIDER=NO -DPLUGIN_MROONGA=NO -DPLUGIN_TOKUDB=NO -DPLUGIN_FEDERATEDX=NO -DPLUGIN_CONNECT=NO -DPLUGIN_FEDERATED=NO -DPLUGIN_COLUMNSTORE=NO')

bld_openssl3_fips_debug= {
    "name": "openssl3-fips-debug",
    "slavenames": kvm_slaves,
    "builddir": "openssl3-fips-debug",
    "factory": f_openssl3_fips_debug,
    "nextBuild": myNextBuild,
    "category": "main",
    }

f_openssl3_nofips_debug= getOpenSslTest('nofips','-DCMAKE_BUILD_TYPE=Debug -DPLUGIN_ROCKSDB=NO -DPLUGIN_SPHINX=NO -DPLUGIN_SPIDER=NO -DPLUGIN_MROONGA=NO -DPLUGIN_TOKUDB=NO -DPLUGIN_FEDERATEDX=NO -DPLUGIN_CONNECT=NO -DPLUGIN_FEDERATED=NO -DPLUGIN_COLUMNSTORE=NO')

bld_openssl3_nofips_debug= {
    "name": "openssl3-nofips-debug",
    "slavenames": kvm_slaves,
    "builddir": "openssl3-nofips-debug",
    "factory": f_openssl3_nofips_debug,
    "nextBuild": myNextBuild,
    "category": "main",
    }


f_fulltest_debug_big_only= getNonVmTest(
    "-DCMAKE_BUILD_TYPE=Debug -DWITH_EMBEDDED_SERVER=1 -DHAVE_EMBEDDED_PRIVILEGE_CONTROL=1 -DPLUGIN_TOKUDB=NO -DWITH_DBUG_TRACE=OFF -DMYSQL_MAINTAINER_MODE=OFF -DCMAKE_C_FLAGS='-O2 -march=native -mtune=native' -DCMAKE_CXX_FLAGS='-O2 -march=native -mtune=native'",
    '--big --big',
    'full'
    )

bld_fulltest_debug_big_only= {
    "name": "fulltest-debug-big-only",
    "slavenames": non_kvm_slaves,
    "builddir": "fulltest-debug-big-only",
    "factory": f_fulltest_debug_big_only,
    "nextBuild": myNextBuild,
    "category": "main",
    }

def getSAN(san_type, cmake_options, vm_img, slavenames=kvm_slaves):

    f= BuildFactory()
    kvm_log = "kernel_"+getport()+".log"
    kvm_args = ["/usr/local/bin/runvm",
                "--port="+getport(), "--user=buildbot",
                "--smp=4", "--cpu=qemu64",
                "--logfile="+kvm_log,
                "--memory="+memory_def,
                ]
    tmp_img = "vm-tmp-"+getport()+".qcow2"

    def mtr_step(name, type, info, args, doRun= True):
        return getMTR(
          name=name,
          test_type=type, test_info=info,
          logfiles={"kernel": kvm_log},
          mtr_subdir=".",    # Where we scp vardir to
          timeout=5000,
          env={"TERM": "vt102"},
          command=kvm_args + [tmp_img,
            WithProperties("""
set -x
cd "buildbot/build/%(distdirname)s/mysql-test"
san_list=skip_list_"""+san_type+""".txt
if [ -e collections/$san_list ] ; then
  skip_list="--skip-test-list=$san_list"
  echo "Test warning"": skip list $san_list will be used"
  cat $san_list
fi
ASAN_OPTIONS="disable_coredump=0:abort_on_error=1" perl mysql-test-run.pl $skip_list --verbose-restart --force --max-save-core=0 --max-save-datadir=1 --vardir=/dev/shm/var --parallel=4 """ + args + """
res=$?
find /dev/shm/var/ -name "core*" -exec rm -f '{}' \;
cp -r /dev/shm/var ~/buildbot/
cd ~/buildbot
tar zcf var.tar.gz var/*/log var/log
exit $res
"""),
            WithProperties(
              "!= rm -Rf var/ var.tar.gz ; scp -rp -P " + getport() + " " + kvm_scpopt +
              " buildbot@localhost:~/buildbot/var* . || :")
          ],
          doStepIf=doRun)

    prepareToBuild(f,vm_img)

    f.addStep(Compile(
        timeout=7200,
        description=["building"],
        descriptionDone=["build"],
        logfiles={"kernel": kvm_log},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command= kvm_args +
        ["--base-image=/kvm/vms/"+vm_img, tmp_img,
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("= scp "+kvm_scpopt+" -P "+getport()+" %(distname)s buildbot@localhost:buildbot/"),
        WithProperties("""
set -x
df -kT
mkdir buildbot/build
cd buildbot/build
tar zxf "../%(distname)s"
cd "%(distdirname)s"
cmake . """ + cmake_options + """
make -j6 VERBOSE=1
""")
]))

    f.addStep(mtr_step("mtr_nm", "nm", "Normal (no --ps-protocol)",""))
    f.addStep(FileUpload(
        slavesrc=WithProperties("var.tar.gz"),
        masterdest=WithProperties("/ds1819/archive/logs/%(buildername)s/%(buildnumber)s-var.tar.gz"),
        mode=0755,
        url=WithProperties("https://hasky.askmonty.org/logs/%(buildername)s/%(buildnumber)s-var.tar.gz"),
        blocksize=524288)
    )

# Let's clean up normal run first, then we'll enable more complicated ones
#    f.addStep(mtr_step("mtr_ps", "ps", "ps-protocol",
#        "--ps-protocol"))

    return f

f_kvm_asan= getSAN('asan','-DCMAKE_BUILD_TYPE=Debug -DWITH_SSL=bundled -DWITH_PCRE=bundled -DWITH_ZLIB=bundled -DWITH_JEMALLOC=auto -DWITH_ASAN=YES',
    "vm-focal-amd64-build.qcow2")

bld_kvm_asan= {
    "name": "kvm-asan",
    "slavenames": kvm11_slaves,
    "builddir": "kvm-asan",
    "factory": f_kvm_asan,
    "nextBuild": myNextBuild,
    "category": "main",
    }

# Spider fails badly with UBSAN
f_kvm_ubsan= getSAN('ubsan','-DCMAKE_BUILD_TYPE=Debug -DPLUGIN_TOKUDB=NO -DPLUGIN_SPIDER=NO -DWITH_SSL=bundled -DWITH_PCRE=bundled -DWITH_ZLIB=bundled -DWITH_JEMALLOC=auto -DWITH_UBSAN=YES -DMYSQL_MAINTAINER_MODE=WARN',
    "vm-focal-amd64-build.qcow2")

bld_kvm_ubsan= {
    "name": "kvm-ubsan",
    "slavenames": kvm11_slaves,
    "builddir": "kvm-ubsan",
    "factory": f_kvm_ubsan,
    "nextBuild": myNextBuild,
    "category": "main",
    }

def getInSourceBuild(cmake_options, vm_img, slavenames=kvm_slaves):

    f= BuildFactory()

    kvm_log = "kernel_"+getport()+".log"
    kvm_args = ["/usr/local/bin/runvm",
                "--port="+getport(), "--user=buildbot",
                "--smp=4", "--cpu=qemu64",
                "--logfile="+kvm_log,
                "--memory="+memory_def,
                ]
    tmp_img = "vm-tmp-"+getport()+".qcow2"

    f.addStep(ShellCommand(
        description=["rsyncing", "VM"],
        descriptionDone=["rsync", "VM"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        timeout=14400,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+vm_img,
                 "/kvm/vms/"]))

    f.addStep(Compile(
        timeout=7200,
        description=["cloning", "and", "building"],
        descriptionDone=["build"],
        logfiles={"kernel": kvm_log},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        env={"TERM": "vt102"},
        command= kvm_args +
        ["--base-image=/kvm/vms/"+vm_img, tmp_img,
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("""
set -xe
df -kT
cd buildbot
rm -rf buildbot/build
mkdir build
cd build
git init
git fetch %(repository)s %(revision)s --depth 1 --recurse-submodules
git checkout FETCH_HEAD
cmake . """ + cmake_options + """
make -j5
""")]))

    return f

f_kvm_bld_nopart_debug= getInSourceBuild(
    '-DPLUGIN_PARTITION=NO -DCMAKE_BUILD_TYPE=Debug -DCMAKE_VERBOSE_MAKEFILE=1',
    "vm-buster-amd64-build.qcow2")

bld_nopart_debug= {
    "name": "kvm-bld-nopart-debug",
    "slavenames": kvm11_slaves,
    "builddir": "kvm-bld-nopart-debug",
    "factory": f_kvm_bld_nopart_debug,
    "nextBuild": myNextBuild,
    "category": "main",
    }

f_kvm_bld_noperfschema= getInSourceBuild(
    '-DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DWITH_EXTRA_CHARSETS=complex -DWITH_SSL=system -DPLUGIN_PERFSCHEMA=NO -DENABLED_PROFILING=OFF -DCMAKE_VERBOSE_MAKEFILE=1',
    "vm-buster-amd64-build.qcow2")

bld_noperfschema = {'name': "kvm-bld-noperfschema",
                'slavenames': kvm11_slaves,
                'builddir': "kvm-bld-noperfschema",
                'factory': f_kvm_bld_noperfschema,
                "nextBuild": myNextBuild,
                "category": "main",
                }

f_kvm_bld_minimal= getInSourceBuild(
    '-DWITH_NONE=1 -DPLUGIN_PARTITION=NO -DPLUGIN_PERFSCHEMA=NO -DPLUGIN_FEEDBACK=NO -DPLUGIN_INNOBASE=NO',
    "vm-buster-amd64-build.qcow2")

bld_minimal = {'name': "kvm-bld-minimal",
                'slavenames': kvm11_slaves,
                'builddir': "kvm-bld-minimal",
                'factory': f_kvm_bld_minimal,
                "nextBuild": myNextBuild,
                "category": "main",
                }

# starfs factories and builders are to be removed from everywhere
# when we no longer need a buildbot history for them
#f_starfs_debug = BuildFactory()
#f_starfs_debug.addStep(git_checkout)
#f_starfs_debug.addStep(getCompileStep(["sh", "-c", "cmake . -DPLUGIN_PARTITION=NO -DCMAKE_BUILD_TYPE=Debug -DCMAKE_VERBOSE_MAKEFILE=1 && make -j3"]))
#
#bld_starfs_debug = {'name': "bld-starfs-debug",
#                'slavenames': ["starfsmenn1", "starfsmenn2"],
#                'builddir': "starfsmenn1",
#                'factory': f_starfs_debug,
#                "nextBuild": myNextBuild,
#                "category": "experimental",
#                }
#
#f_starfs_release = BuildFactory()
#f_starfs_release.addStep(git_checkout)
#f_starfs_release.addStep(getCompileStep(["sh", "-c", "cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DWITH_EXTRA_CHARSETS=complex -DWITH_SSL=system -DPLUGIN_PERFSCHEMA=NO -DENABLED_PROFILING=OFF #-DCMAKE_VERBOSE_MAKEFILE=1 && make -j3"]))
#
#bld_starfs_release = {'name': "bld-starfs-release",
#                'slavenames': ["starfsmenn1", "starfsmenn2"],
#                'builddir': "starfsmenn2",
#                'factory': f_starfs_release,
#                "nextBuild": myNextBuild,
#                "category": "experimental",
#                }
#
#f_starfs_minimal = BuildFactory()
#f_starfs_minimal.addStep(git_checkout)
#f_starfs_minimal.addStep(getCompileStep(["sh", "-c", "cmake . -DWITH_NONE=1 -DPLUGIN_PARTITION=NO -DPLUGIN_PERFSCHEMA=NO -DPLUGIN_FEEDBACK=NO -DPLUGIN_INNOBASE=NO && make -j3"]))
#
#bld_starfs_minimal = {'name': "bld-starfs-minimal",
#                'slavenames': ["starfsmenn1", "starfsmenn2"],
#                'builddir': "starfsmenn3",
#                'factory': f_starfs_minimal,
#                "nextBuild": myNextBuild,
#                "category": "experimental",
#                }

c['builders'] = [
# has been down for a long time or never up
#                bld_p9_rhel7,
# has been off for a long time
#                bld_work_valgrind,
#                bld_vm_valgrind,
                bld_kvm_tarbake_jaunty_x86,
                bld_kvm_rpm_centos73_ppc64,
                bld_kvm_rpm_centos73_ppc64le,
                bld_kvm_rpm_centos74_aarch64,
                bld_kvm_rpm_centos74_amd64,
                bld_kvm_rpm_centos74_amd64_debug,
                bld_kvm_zyp_opensuse150_amd64,
                bld_kvm_zyp_sles11_x86,
                bld_kvm_zyp_sles11_amd64,
                bld_kvm_zyp_sles11sp1_amd64,
                bld_kvm_zyp_sles114_x86, bld_kvm_zyp_sles114_amd64,
# Replaced with sles125
#                bld_kvm_zyp_sles123_amd64,
                bld_kvm_zyp_sles125_amd64,
                bld_kvm_zyp_sles150_amd64,
#                bld_kvm_rpm_fedora_rawhide_amd64,
                bld_kvm_rpm_fedora666_amd64,
                bld_kvm_rpm_fedora36_amd64,
                bld_kvm_rpm_fedora35_amd64,
                bld_kvm_rpm_fedora34_amd64,
                bld_kvm_rpm_rhel9_amd64,
                bld_kvm_rpm_rhel8_amd64,
                bld_kvm_rpm_rhel8_ppc64le,
                bld_kvm_rpm_centos8_amd64,
                bld_kvm_rpm_rocky84_amd64,
                bld_kvm_rpm_alma84_amd64,
                bld_kvm_deb_stretch_amd64, bld_kvm_deb_stretch_x86,
                bld_kvm_deb_stretch_ppc64le,
                bld_kvm_deb_stretch_aarch64,
                bld_kvm_deb_bullseye_amd64,
                bld_kvm_deb_buster_amd64,
                bld_kvm_deb_buster_ppc64le,
                bld_kvm_deb_buster_aarch64,
                bld_kvm_deb_sid_amd64, bld_kvm_deb_sid_x86,
                bld_kvm_deb_bionic_amd64,
                bld_kvm_deb_bionic_ppc64le,
                bld_kvm_deb_bionic_aarch64,
                bld_kvm_deb_focal_amd64,
                bld_kvm_deb_focal_ppc64le,
                bld_kvm_deb_focal_aarch64,
                bld_kvm_deb_impish_amd64,
                bld_kvm_deb_jammy_amd64,
                bld_kvm_bintar_trusty_amd64, bld_kvm_bintar_trusty_x86,
                bld_kvm_bintar_quantal_amd64, bld_kvm_bintar_quantal_x86,
                bld_kvm_bintar_centos5_amd64, bld_kvm_bintar_centos5_x86,
                bld_kvm_bintar_centos6_amd64, bld_kvm_bintar_centos6_x86,
                bld_kvm_bintar_centos74_amd64,
                bld_kvm_bintar_centos7_amd64_openssl,
                bld_kvm_bintar_centos6_amd64_openssl,
                bld_kvm_bintar_centos6_amd64_debug,
                bld_kvm_ports_freebsd123_amd64,
                bld_kvm_ports_freebsd130_amd64,
                bld_winx64_packages,
#                bld_win32_packages,
#                bld_win32_debug,
                bld_winx64_debug,
                bld_kvm_fulltest,
                bld_kvm_fulltest2,
                bld_fulltest_debug_big_only,
# have been offline for years
#                bld_kvm_fulltest_big,
#                bld_kvm_fulltest2_big,
                bld_kvm_asan,
                bld_kvm_ubsan,
                bld_openssl3_fips_debug,
                bld_openssl3_nofips_debug,
                # bld_win_rqg_se,
                # bld_kvm_qa_linux,
                # bld_win_rqg_debug,
                bld_win_connector_c,
                bld_win_connector_c_3,
                bld_freebsd_x64_connector_c,
                bld_freebsd11_x64_connector_c,
                bld_freebsd11_x86_connector_c,
                # New cc builders
                bld_cc_centos7_amd64,
                bld_cc_centos8_amd64,
                bld_cc_rhel9_amd64,
                bld_cc_bionic_amd64,
                bld_cc_focal_amd64,
                bld_cc_impish_amd64,
                bld_cc_jammy_amd64,
                bld_cc_stretch_amd64,
                bld_cc_buster_amd64,
                bld_cc_fedora34_amd64,
                bld_cc_fedora35_amd64,
                bld_cc_fedora36_amd64,
                bld_cc_sles12_amd64,
                bld_cc_sles15_amd64,
                # Current ga c/odbc version
                #bld_linux_x64_connector_odbc,
                bld_src_connector_odbc,
                # Current "new" c/odbc version
                bld_win_connector_odbc_new,
                bld_win_connector_odbc_gnutls,
                bld_centos7_x64_connector_odbc_new,
                bld_centos8_x64_connector_odbc,
                bld_centos8_x64_connector_odbc_rpm,
                bld_centos8_x86_connector_odbc,
                bld_stretch_x64_connector_odbc,
                bld_macos_connector_odbc,
                bld_codbc_sles15_amd64,
                bld_codbc_sles15_amd64_notest,
                bld_codbc_bionic_amd64,
                bld_codbc_focal_amd64,
                bld_codbc_focal_amd64_deb,
                bld_codbc_impish_amd64,
                bld_codbc_jammy_amd64,
                bld_codbc_buster_amd64,
                bld_codbc_fedora34_amd64,
                bld_codbc_fedora35_amd64,
                bld_codbc_fedora36_amd64,
                bld_codbc_rhel9_amd64,
                bld_codbc_sles12_amd64,
                bld_centos7_x86_connector_odbc_new,
                bld_win_connector_cpp,
                bld_centos8_amd64_connector_cpp,
                bld_rhel9_amd64_connector_cpp,
                bld_stretch_amd64_connector_cpp,
                bld_sles15_amd64_connector_cpp,
                bld_bionic_amd64_connector_cpp,
                bld_focal_amd64_connector_cpp,
                bld_impish_amd64_connector_cpp,
                bld_jammy_amd64_connector_cpp,
                bld_buster_amd64_connector_cpp,
                bld_fedora34_amd64_connector_cpp,
                bld_fedora35_amd64_connector_cpp,
                bld_fedora36_amd64_connector_cpp,
                bld_sles12_amd64_connector_cpp,
                bld_centos7_amd64_connector_cpp,
                bld_src_connector_cpp,
# have been down for a long time
#                bld_starfs_debug,
#                bld_starfs_release,
#                bld_starfs_minimal,
                bld_nopart_debug,
                bld_noperfschema,
                bld_minimal,
# has been down for a long time
#                bld_p8_suse12_rpm,

                # galera package builders
                gal_bld_kvm_src_centos8_amd64,
                gal_bld_kvm_rpm_centos73_ppc64,
                gal_bld_kvm_rpm_centos73_ppc64le,
                gal_bld_kvm_rpm_centos74_aarch64,
                gal_bld_kvm_rpm_centos74_amd64,
#                gal_bld_kvm_rpm_fedora_rawhide_amd64,
                gal_bld_kvm_rpm_fedora666_amd64,
                gal_bld_kvm_rpm_fedora36_amd64,
                gal_bld_kvm_rpm_fedora35_amd64,
                gal_bld_kvm_rpm_fedora34_amd64,
                gal_bld_kvm_rpm_rhel9_amd64,
                gal_bld_kvm_rpm_rhel8_amd64,
                gal_bld_kvm_rpm_rhel8_ppc64le,
                gal_bld_kvm_rpm_centos8_amd64,
                gal_bld_kvm_rpm_rocky84_amd64,
                gal_bld_kvm_rpm_alma84_amd64,
                gal_bld_kvm_deb_stretch_amd64, gal_bld_kvm_deb_stretch_x86,
                gal_bld_kvm_deb_stretch_ppc64le,
                gal_bld_kvm_deb_stretch_aarch64,
                gal_bld_kvm_deb_bullseye_amd64,
                gal_bld_kvm_deb_buster_amd64,
                gal_bld_kvm_deb_buster_ppc64le,
                gal_bld_kvm_deb_buster_aarch64,
                gal_bld_kvm_deb_sid_amd64, gal_bld_kvm_deb_sid_x86,
                gal_bld_kvm_deb_trusty_amd64, gal_bld_kvm_deb_trusty_x86,
                gal_bld_kvm_deb_bionic_amd64,
                gal_bld_kvm_deb_bionic_ppc64le,
                gal_bld_kvm_deb_bionic_aarch64,
                gal_bld_kvm_deb_focal_amd64,
                gal_bld_kvm_deb_focal_ppc64le,
                gal_bld_kvm_deb_focal_aarch64,
                gal_bld_kvm_deb_impish_amd64,
                gal_bld_kvm_deb_jammy_amd64,
                gal_bld_kvm_zyp_opensuse150_amd64,
# Replaced with sles125
#                gal_bld_kvm_zyp_sles123_amd64,
                gal_bld_kvm_zyp_sles125_amd64,
                gal_bld_kvm_zyp_sles150_amd64,
# have been down for a long time
#                # Power8
#                gal_bld_p8_suse12_rpm,

                ]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010, allowForce=True))

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8011, allowForce=False,
    change_hook_dialects={ 'github' : True },
    change_hook_auth=["file:changehook.passwd"]))

from buildbot.status import words
irc = words.IRC("irc.freenode.net", "mariabuildbot",
                channels=["maria"],
                password=configDict["cfg"]["ircPassword"],
                notify_events={
                  "exception": 1,
                  "successToFailure": 1,
                  "failureToSuccess": 1,
                },
                allowForce=True,
                )
# Disable it until we fix it to only notify about main trees.
#c["status"].append(irc)


from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="buildbot-reports@hasky.askmonty.org",
                                      extraRecipients=["maria-buildbot-reports@lists.askmonty.org"],
                                      sendToInterestedUsers=False))

####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "MariaDB"
c['projectURL'] = "http://mariadb.org/jira"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.askmonty.org/buildbot/"

c['buildHorizon'] = 350
c['logHorizon'] = 300
c['buildCacheSize'] = 5000
c['changeCacheSize'] = 10000
