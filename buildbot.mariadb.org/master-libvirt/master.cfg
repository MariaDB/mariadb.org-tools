# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from buildbot.process.properties import Property, Properties
from buildbot.steps.shell import ShellCommand, Compile, Test, SetPropertyFromCommand
from buildbot.steps.mtrlogobserver import MTR, MtrLogObserver
from buildbot.steps.source.github import GitHub
from buildbot.process.remotecommand import RemoteCommand
from twisted.internet import defer
import sys
import docker
from datetime import timedelta

sys.setrecursionlimit(10000)

sys.path.insert(0, '/srv/buildbot/mariadb.org-tools/buildbot.mariadb.org')

from utils import *

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Load the slave, database passwords and 3rd-party tokens from an external private file, so
# that the rest of the configuration can be public.
config = { "private": { } }
exec(open("../master-private.cfg").read(), config, { })

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').
c['title'] = "MariaDB CI"
c['titleURL'] = "https://github.com/MariaDB/server"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "https://buildbot.mariadb.org/"

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9990}}

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    'db_url' : config["private"]["db_url"]
}

####### Disable net usage reports from being sent to buildbot.net
c['buildbotNetUsageData'] = None

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = []

# LibVirt workers
c['workers'].append(worker.LibVirtWorker('bb-hz-bbw5-debian-11',
                    config["private"]["worker_pass"]["libvirt"],
                    util.Connection('qemu+ssh://buildbot@100.64.100.20:65001/system'),
                    '/var/lib/libvirt/images/bb-hz-bbw5-debian-11', build_wait_timeout=0, max_builds=1))

c['workers'].append(worker.LibVirtWorker('bb-hz-bbw5-ubuntu-1804',
                    config["private"]["worker_pass"]["libvirt"],
                    util.Connection('qemu+ssh://buildbot@100.64.100.20:65001/system'),
                    '/var/lib/libvirt/images/bb-hz-bbw5-ubuntu-1804', build_wait_timeout=0, max_builds=1))

c['workers'].append(worker.LibVirtWorker('bb-hz-bbw5-fedora-35',
                    config["private"]["worker_pass"]["libvirt"],
                    util.Connection('qemu+ssh://buildbot@100.64.100.20:65001/system'),
                    '/var/lib/libvirt/images/bb-hz-bbw5-fedora-35', build_wait_timeout=0, max_builds=1))

c['workers'].append(worker.LibVirtWorker('buildbot-centos7',
                    config["private"]["worker_pass"]["hz-bbw2-libvirt-debian-10"],
                    util.Connection('qemu+ssh://buildbot@100.64.100.6:65001/system'),
                    '/var/lib/libvirt/images/buildbot-centos7', build_wait_timeout=0, max_builds=1))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

def downloadRpms():
    return ShellCommand(
              name="fetch_rpms",
              description="fetching rpms",
              descriptionDone="fetching rpms...done",
              haltOnFailure=True,
              command=["sh", "-xc", util.Interpolate("""
  wget -r -np -nH --cut-dirs=2 -A *.rpm "https://ci.mariadb.org/%(prop:tarbuildnum)s/%(prop:parentbuildername)s/rpms/" -P .
""")])


def getRpmUpgradeStep():
     return Test(
        name="upgrade",
        haltOnFailure=True,
        description=["testing", "upgrade"],
        descriptionDone=["test", "upgrade"],
        env=envFromProperties(['test_mode', 'test_type', 'branch', 'major_version', 'arch', 'systemdCapability', 'is_main_tree', 'version_name']),
        command=['./rpm-upgrade.sh'])

def getRpmInstallStep():
     return Test(
        name="install",
        haltOnFailure=True,
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        env=envFromProperties(['branch', 'master_branch', 'systemdCapability', 'arch']),
        command=['./rpm-install.sh'])

def getDebGaleraStep(port):
    def if_run_galera_test(step):
        if step.getProperty("sst_mode") == "off":
            return False
        return True
        if not branch_is_10_1_or_later(step):
            return False
        if step.getProperty("branch") == 'bb-10.2-compatibility':
            return False
        if sst_mode == 'xtrabackup-v2':
            if branch_is_10_3_or_later(step):
                return False # because of "The redo log was created with MariaDB 10.3.6"
            if branch_is_10_2_or_later(step):
                return False # because of MDEV-12289, this might be fixable
            if arch not in ['x86', 'i386', 'amd64', 'x86_64']:
                return False # no xtrabackup for other architectures
            if arch in ['x86', 'i386'] and version_name in ['artful','stretch']:
                return False # no 32-bit debs for ubuntu stable and debian 9
        return True

    return Test(
        name="galera",
        warningPattern="Test warning:.*",
        description=["testing", "galera", "SST"],
        descriptionDone=["galera", "SST"],
        timeout=300,
        lazylogfiles=True,
        logfiles={
          "daemon": "/home/buildbot/logs/daemon.log",
          "syslog": "/home/buildbot/logs/syslog",
          "node1": "/home/buildbot/logs/node1.err",
          "node2": "/home/buildbot/logs/node2.err",
          "node3": "/home/buildbot/logs/node3.err",
          "node1.mariabackup.prepare": "/home/buildbot/logs/node1.mariabackup.prepare.log",
          "node2.mariabackup.prepare": "/home/buildbot/logs/node2.mariabackup.prepare.log",
          "node3.mariabackup.prepare": "/home/buildbot/logs/node3.mariabackup.prepare.log",
          "node1.mariabackup.move": "/home/buildbot/logs/node1.mariabackup.move.log",
          "node2.mariabackup.move": "/home/buildbot/logs/node2.mariabackup.move.log",
          "node3.mariabackup.move": "/home/buildbot/logs/node3.mariabackup.move.log",
          "node1.mariabackup.backup": "/home/buildbot/logs/node1.mariabackup.backup.log",
          "node2.mariabackup.backup": "/home/buildbot/logs/node2.mariabackup.backup.log",
          "node4.mariabackup.backup": "/home/buildbot/logs/node4.mariabackup.backup.log"
        },
        doStepIf=if_run_galera_test,
        env=envFromProperties(['version_name', 'master_branch', 'sst_mode', 'arch']),
        command=["./deb-galera.sh"]
    )

def getDebMinorUpgradeStep():
    return Test(
        name="upgrade",
        haltOnFailure=True,
        description=["testing", "upgrade"],
        descriptionDone=["test", "upgrade"],
        env=envFromProperties(['test_mode', 'test_type', 'branch', 'master_branch', 'arch', 'dist_name', 'version_name', 'mariadb_version', 'major_version', 'systemdCapability', 'needsGalera', 'parentbuildername']),
        command=['./deb-upgrade.sh'])

def getDebMajorUpgradeStep():
    return Test(
        name="upgrade",
        haltOnFailure=True,
        description=["testing", "upgrade"],
        descriptionDone=["test", "upgrade"],
        env=envFromProperties(['test_mode', 'test_type', 'branch', 'master_branch', 'arch', 'dist_name', 'version_name', 'mariadb_version', 'major_version', 'systemdCapability', 'needsGalera', 'parentbuildername']),
        command=['./deb-upgrade.sh'])

def getDebInstallStep():
    return Test(
        name="install",
        haltOnFailure=True,
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        env=envFromProperties(['test_mode', 'test_type', 'branch', 'master_branch', 'arch', 'dist_name', 'version_name', 'mariadb_version', 'major_version', 'systemdCapability', 'needsGalera', 'parentbuildername']),
        command=['./deb-install.sh'])

# FACTORY

## f_deb_install
f_deb_install = util.BuildFactory()
f_deb_install.addStep(getScript('deb-install.sh'))
f_deb_install.addStep(getDebInstallStep())
f_deb_install.addStep(getScript('deb-galera.sh'))
f_deb_install.addStep(getDebGaleraStep("2223"))

## f_deb_major_upgrade
f_deb_major_upgrade = util.BuildFactory()
f_deb_major_upgrade.addStep(steps.SetPropertyFromCommand(name="major_version", property="major_version", command=util.Interpolate("sh -c \"echo '%(prop:branch)s' | sed -e \\\"s/.*\\\\(5\\\\.5\\\\|10\\\\.[0-9]\\\\).*/\\\\1/\\\"\"")))
f_deb_major_upgrade.addStep(getScript('deb-upgrade.sh'))
f_deb_major_upgrade.addStep(getDebMajorUpgradeStep())

## f_deb_minor_upgrade
f_deb_minor_upgrade = util.BuildFactory()
f_deb_minor_upgrade.addStep(steps.SetPropertyFromCommand(name="major_version", property="major_version", command=util.Interpolate("sh -c \"echo '%(prop:branch)s' | sed -e \\\"s/.*\\\\(5\\\\.5\\\\|10\\\\.[0-9]\\\\).*/\\\\1/\\\"\"")))
f_deb_minor_upgrade.addStep(getScript('deb-upgrade.sh'))
f_deb_minor_upgrade.addStep(getDebMinorUpgradeStep())

## f_rpm_install
f_rpm_install = util.BuildFactory()
f_rpm_install.addStep(downloadRpms())
f_rpm_install.addStep(getScript('rpm-install.sh'))
f_rpm_install.addStep(getRpmInstallStep())

## f_rpm_upgrade
f_rpm_upgrade = util.BuildFactory()
f_rpm_upgrade.addStep(steps.SetPropertyFromCommand(name="major_version", property="major_version", command=util.Interpolate("sh -c \"echo '%(prop:branch)s' | sed -e \\\"s/.*\\\\(5\\\\.5\\\\|10\\\\.[0-9]\\\\).*/\\\\1/\\\"\"")))
f_rpm_upgrade.addStep(downloadRpms())
f_rpm_upgrade.addStep(getScript('rpm-upgrade.sh'))
f_rpm_upgrade.addStep(getRpmUpgradeStep())

####### BUILDERS LIST
c['builders'] = []

c['builders'].append(
    util.BuilderConfig(name="amd64-debian-11-deb-autobake-install",
      workernames=["bb-hz-bbw5-debian-11"],
      tags=["Ubuntu", "deb", "install", "kvm"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      properties={'systemdCapability': 'yes', 'needsGalera': 'yes', 'dist_name': 'debian', 'version_name': 'bullseye', 'arch': 'amd64'},
      factory=f_deb_install))

c['builders'].append(
    util.BuilderConfig(name="amd64-ubuntu-1804-deb-autobake-install",
      workernames=["bb-hz-bbw5-ubuntu-1804"],
      tags=["Ubuntu", "deb", "install", "kvm"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      properties={'systemdCapability': 'yes', 'needsGalera': 'yes', 'dist_name': 'ubuntu', 'version_name': 'bionic', 'arch': 'amd64'},
      factory=f_deb_install))

c['builders'].append(
    util.BuilderConfig(name="amd64-ubuntu-1804-deb-autobake-major-upgrade",
      workernames=["bb-hz-bbw5-ubuntu-1804"],
      tags=["Ubuntu", "deb", "upgrade", "kvm"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      properties={'systemdCapability': 'yes', 'needsGalera': 'yes', 'dist_name': 'ubuntu', 'version_name': 'bionic', 'arch': 'amd64', 'test_mode': 'server', "test_type": "major"},
      factory=f_deb_major_upgrade))

c['builders'].append(
    util.BuilderConfig(name="amd64-ubuntu-1804-deb-autobake-minor-upgrade",
      workernames=["bb-hz-bbw5-ubuntu-1804"],
      tags=["Ubuntu", "deb", "upgrade", "kvm"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      properties={'systemdCapability': 'yes', 'needsGalera': 'yes', 'dist_name': 'ubuntu', 'version_name': 'bionic', 'arch': 'amd64', 'test_mode': 'all', "test_type": "minor"},
      factory=f_deb_minor_upgrade))

c['builders'].append(
    util.BuilderConfig(name="amd64-centos-7-rpm-autobake-install",
      workernames=["buildbot-centos7"],
      tags=["Centos", "rpm", "install"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      properties={'systemdCapability': 'yes', 'needsGalera': 'yes', 'version_name': '7', 'arch': 'centos74-amd64'},
      factory=f_rpm_install))

c['builders'].append(
    util.BuilderConfig(name="amd64-centos-7-rpm-autobake-major-upgrade",
      workernames=["buildbot-centos7"],
      tags=["Centos", "rpm", "upgrade"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      properties={'systemdCapability': 'yes', 'needsGalera': 'yes', 'version_name': 'centos7', 'arch': 'amd64', "test_type": "major", "test_mode": "server"},
      factory=f_rpm_upgrade))

c['builders'].append(
    util.BuilderConfig(name="amd64-centos-7-rpm-autobake-minor-upgrade",
      workernames=["buildbot-centos7"],
      tags=["Centos", "rpm", "upgrade"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      properties={'systemdCapability': 'yes', 'needsGalera': 'yes', 'version_name': 'centos7', 'arch': 'amd64', "test_type": "minor", "test_mode": "server"},
      factory=f_rpm_upgrade))

c['builders'].append(
    util.BuilderConfig(name="amd64-fedora-35-rpm-autobake-install",
      workernames=["bb-hz-bbw5-fedora-35"],
      tags=["Fedora", "rpm", "install"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      properties={'systemdCapability': 'yes', 'needsGalera': 'yes', 'version_name': '35', 'arch': 'fedora35-amd64'},
      factory=f_rpm_install))

c['logEncoding'] = 'utf-8'

c['multiMaster'] = True

c['mq'] = {  # Need to enable multimaster aware mq. Wamp is the only option for now.
    'type' : 'wamp',
    'router_url': 'ws://buildbot.mariadb.org:8085/ws',
    'realm': 'realm1',
    # valid are: none, critical, error, warn, info, debug, trace
    'wamp_debug_level' : 'info'
}
