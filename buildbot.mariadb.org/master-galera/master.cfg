# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from buildbot.process.properties import Property, Properties
from buildbot.steps.shell import ShellCommand, Compile, Test, SetPropertyFromCommand
from buildbot.steps.mtrlogobserver import MTR, MtrLogObserver
from buildbot.steps.source.github import GitHub
from buildbot.process.remotecommand import RemoteCommand
from twisted.internet import defer
import sys
import docker
from datetime import timedelta

sys.setrecursionlimit(10000)

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Load the slave, database passwords and 3rd-party tokens from an external private file, so
# that the rest of the configuration can be public.
config = { "private": { } }
exec(open("../master-private.cfg").read(), config, { })

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').
c['title'] = "MariaDB CI"
c['titleURL'] = "https://github.com/MariaDB/server"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "https://buildbot.mariadb.org/"

# Custom plugin
# exec(open("grid.py").read())

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9991}}

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    'db_url' : config["private"]["db_url"]
}

####### Disable net usage reports from being sent to buildbot.net
c['buildbotNetUsageData'] = None

####### SCHEDULERS

builders_galera=["gal-amd64-ubuntu-1804", "gal-amd64-ubuntu-2004", "gal-amd64-ubuntu-2110", "gal-amd64-ubuntu-2204", "gal-aarch64-ubuntu-1804", "gal-aarch64-ubuntu-2004", "gal-aarch64-ubuntu-2110", "gal-aarch64-ubuntu-2204", "gal-amd64-rhel-7", "gal-amd64-rhel-8", "gal-amd64-debian-9", "gal-x86-debian-9","gal-amd64-debian-10", "gal-amd64-debian-11", "gal-amd64-debian-sid", "gal-x86-debian-sid", "gal-amd64-fedora-34", "gal-amd64-fedora-35", "gal-amd64-centos-7", "gal-amd64-centos-8", "gal-amd64-opensuse-15", "gal-amd64-opensuse-42", "gal-amd64-sles-12", "gal-amd64-sles-15", "gal-ppc64le-debian-9", "gal-ppc64le-debian-10", "gal-ppc64le-debian-11", "gal-ppc64le-debian-sid", "gal-ppc64le-ubuntu-2004", "gal-ppc64le-ubuntu-2110", "gal-ppc64le-ubuntu-2204", "gal-ppc64le-rhel-7", "gal-ppc64le-rhel-8", "gal-ppc64le-centos-7", "gal-aarch64-fedora-34", "gal-aarch64-fedora-35", "gal-aarch64-centos-7", "gal-aarch64-centos-8", "gal-aarch64-debian-10", "gal-aarch64-debian-11", "gal-aarch64-debian-sid", "gal-aarch64-debian-9", "gal-aarch64-rhel-7", "gal-aarch64-rhel-8", "gal-s390x-ubuntu-2004", "gal-s390x-ubuntu-2204", "gal-s390x-sles-15", "gal-s390x-rhel-8"]

# Configure the Schedulers, which decide how to react to incoming changes.

branches_main=['mariadb-3.x', 'mariadb-4.x', 'bb-*']
savedPackageBranches=['mariadb-3.x', 'mariadb-4.x', 'bb-*']

# git branch filter using fnmatch
import fnmatch
def upstream_branch_fn(branch):
    return branch in branches_main or fnmatch.fnmatch(branch, 'mariadb-3.x') or fnmatch.fnmatch(branch, 'mariadb-4.x') or fnmatch.fnmatch(branch, 'bb-*')
def fnmatch_any(s, list_of_patterns):
    return any(fnmatch.fnmatch(s, p) for p in list_of_patterns)

c['schedulers'] = []

schedulerTrigger = schedulers.AnyBranchScheduler(
        name="s_upstream_galera",
        change_filter=util.ChangeFilter(repository="https://github.com/MariaDB/galera", branch_fn=upstream_branch_fn),
        treeStableTimer=60,
        builderNames=builders_galera)
c['schedulers'].append(schedulerTrigger)

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = []

# Docker workers

workers={}
def addWorker(worker_name_prefix, worker_id, worker_type, dockerfile, jobs=5, save_packages=False, shm_size='15G'):
    worker_name = worker_name_prefix + str(worker_id) + '-docker-galera'
    name = worker_name + worker_type

    i = worker_id
    tls = None
    #if worker_name_prefix.startswith('aarch64'):
    #    tls = docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-arm-bbw' + str(i)+ '.pem', client_cert=('/srv/buildbot/tlscerts/cert-arm-bbw' + str(i) + '.pem', '/srv/buildbot/tlscerts/key-arm-bbw' + str(i) + '.pem'))
    #else:
    #    tls = None

    if worker_name_prefix.startswith('hz'):
        b_name = 'x64-bbw'
    elif worker_name_prefix.startswith('intel'):
        b_name = 'x64-bbw'
    elif worker_name_prefix.startswith('p9'):
        b_name = 'p9-bbw'
    else:
        b_name = worker_name_prefix
    base_name = b_name + '-docker' + worker_type

    if base_name not in workers:
        workers[base_name] = [name]
    else:
        workers[base_name].append(name)

    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages', '/mnt/autofs/master_packages/:/packages']
    # Set master FQDN - for VPN machines it should be 100.64.100.1
    fqdn = 'buildbot.mariadb.org'
    if worker_name_prefix.startswith('intel') or worker_name_prefix.startswith('bg'):
        fqdn = '100.64.100.1'
    if worker_name_prefix.startswith('p9-rhel'):
        fqdn = '10.103.203.6'
    if 'vladbogo' in dockerfile or 'quay' in dockerfile:
        dockerfile_str = None
        image_str = dockerfile
        need_pull = True
    else:
        dockerfile_str = open("dockerfiles/" + dockerfile).read()
        image_str = None
        need_pull = False
    if 'rhel' in worker_type and dockerfile_str is not None and not 'download' in dockerfile:
        dockerfile_str = dockerfile_str % (config["private"]["rhel_sub"]["user"], config["private"]["rhel_sub"]["password"])
    c['workers'].append(worker.DockerLatentWorker(name, None,
                        docker_host=config["private"]["docker_workers"][worker_name[:-7]],
                        image=image_str,
                        dockerfile=dockerfile_str,
                        tls=tls,
                        autopull=True,
                        alwaysPull=need_pull,
                        followStartupLogs=False,
                        masterFQDN=fqdn,
                        build_wait_timeout=0,
                        max_builds=1,
                        hostconfig={ 'shm_size':shm_size},
                        volumes=volumes,
                        properties={ 'jobs':jobs, 'save_packages':save_packages }))


for w_name in ['hz-bbw', 'intel-bbw']:
    if w_name.startswith('hz'):
        jobs = 7
    else:
        jobs = 16
    if w_name == 'hz-bbw':
        addWorker(w_name, 2, '-debian-9', 'debian-9.dockerfile', jobs=jobs, save_packages=True)
        addWorker(w_name, 2, '-debian-9-i386', 'debian-9-i386.dockerfile', jobs=jobs, save_packages=True)
        addWorker(w_name, 2, '-debian-sid', 'debian-sid.dockerfile', jobs=jobs, save_packages=True)
        addWorker(w_name, 2, '-debian-sid-i386', 'debian-sid-i386.dockerfile', jobs=jobs, save_packages=True)
        addWorker(w_name, 2, '-ubuntu-1804', 'ubuntu-1804.dockerfile', jobs=jobs, save_packages=True)
        addWorker(w_name, 2, '-sles-12', 'sles-12-download.dockerfile', jobs=jobs, save_packages=True)
        addWorker(w_name, 2, '-sles-15', 'sles-15-download.dockerfile', jobs=jobs, save_packages=True)
        addWorker(w_name, 2, '-opensuse-42', 'opensuse-42.dockerfile', jobs=jobs, save_packages=True)
        addWorker(w_name, 2, '-valgrind-ubuntu-1804', "valgrind-ubuntu-1804.dockerfile", jobs=jobs, save_packages=False)
        addWorker(w_name, 2, '-icc-ubuntu-2004', "icc-ubuntu-2004-download.dockerfile", jobs=jobs, save_packages=False)
        addWorker(w_name, 2, '-rhel-7', "rhel-7-download.dockerfile", jobs=jobs, save_packages=True)
    #if w_name == 'intel-bbw':
        addWorker(w_name, 2, '-centos-7', 'centos-7.dockerfile', jobs=jobs, save_packages=True)
        addWorker(w_name, 2, '-debian-10', "debian-10.dockerfile", jobs=jobs, save_packages=True)
        addWorker(w_name, 2, '-debian-11', "debian-11.dockerfile", jobs=jobs, save_packages=True)
        addWorker(w_name, 2, '-opensuse-15', 'opensuse-15.dockerfile', jobs=jobs, save_packages=True)
        addWorker(w_name, 2, '-rhel-8', "rhel-8.dockerfile", jobs=jobs, save_packages=True)
        addWorker(w_name, 2, '-ubuntu-2004-clang', 'clang-ubuntu-2004.dockerfile', jobs=jobs, save_packages=True)
        addWorker(w_name, 2, '-ubuntu-2004', "ubuntu-2004.dockerfile", jobs=jobs, save_packages=True)
        addWorker(w_name, 2, '-clang-ubuntu-1804', "clang-ubuntu-1804.dockerfile", jobs=jobs, save_packages=True)
        addWorker(w_name, 2, '-ubuntu-2110', "quay.io/mariadb-foundation/bb-worker:ubuntu21.10", jobs=jobs, save_packages=True)

## Add Power workers
for w_name in ['p9-rhel8-bbw', 'p9-db-bbw']:
    jobs = 16
    addWorker(w_name, 1, '-centos-7', 'ppc-centos-7-download.dockerfile', jobs=jobs, save_packages=True, shm_size='20G')
    addWorker(w_name, 1, '-ubuntu-1804', 'ppc-ubuntu-1804.dockerfile', jobs=jobs, save_packages=True, shm_size='20G')
    addWorker(w_name, 1, '-ubuntu-2004', 'ppc-ubuntu-2004.dockerfile', jobs=jobs, save_packages=True, shm_size='20G')
    addWorker(w_name, 1, '-ubuntu-2110', 'quay.io/mariadb-foundation/bb-worker:ubuntu21.10', jobs=jobs, save_packages=True, shm_size='20G')
    addWorker(w_name, 1, '-ubuntu-2204', 'quay.io/mariadb-foundation/bb-worker:ubuntu22.04', jobs=jobs, save_packages=True, shm_size='20G')
    addWorker(w_name, 1, '-debian-9', 'ppc-debian-9.dockerfile', jobs=jobs, save_packages=True, shm_size='20G')
    addWorker(w_name, 1, '-debian-10', 'ppc-debian-10.dockerfile', jobs=jobs, save_packages=True, shm_size='20G')
    addWorker(w_name, 1, '-debian-11', 'vladbogo/bb:ppc64le-debian-11', jobs=jobs, save_packages=True, shm_size='20G')
    addWorker(w_name, 1, '-debian-sid', 'vladbogo/bb:ppc64le-debian-sid', jobs=jobs, save_packages=True, shm_size='20G')
    addWorker(w_name, 1, '-clang-ubuntu-2004', 'ppc-clang-ubuntu-2004.dockerfile', jobs=jobs, save_packages=True, shm_size='20G')
    addWorker(w_name, 1, '-rhel-7', 'ppc-rhel-7-download.dockerfile', jobs=jobs, save_packages=True, shm_size='20G')
    addWorker(w_name, 1, '-rhel-8', 'ppc-rhel-8-download.dockerfile', jobs=jobs, save_packages=True, shm_size='20G')

## bg-bbw-docker
for i in range(1,6):
    if i == 1:
        jobs = 5
    else:
        jobs = 3

    addWorker('bg-bbw', i, '-clang-ubuntu-1804', "clang-ubuntu-1804.dockerfile", jobs=jobs, save_packages=True)
    addWorker('bg-bbw', i, '-msan-clang-ubuntu-1804', "msan-clang-ubuntu-1804.dockerfile", jobs=jobs, save_packages=False)
    addWorker('bg-bbw', i, '-valgrind-ubuntu-1804', "valgrind-ubuntu-1804.dockerfile", jobs=jobs, save_packages=False)
    addWorker('bg-bbw', i, '-fedora-34', "fedora-34.dockerfile", jobs=jobs, save_packages=True)
    addWorker('bg-bbw', i, '-fedora-35', "quay.io/mariadb-foundation/bb-worker:fedora35", jobs=jobs, save_packages=True)
    addWorker('bg-bbw', i, '-ubuntu-2204', 'quay.io/mariadb-foundation/bb-worker:ubuntu22.04', jobs=jobs, save_packages=True, shm_size='20G')
    addWorker('bg-bbw', i, '-opensuse-15', "opensuse-15.dockerfile", jobs=jobs, save_packages=True)
    addWorker('bg-bbw', i, '-centos-8', "centos-8.dockerfile", jobs=jobs, save_packages=True)
    addWorker('bg-bbw', i, '-x86-ubuntu-1804', "32bit-ubuntu-1804.dockerfile", jobs=jobs, save_packages=False)
    addWorker('bg-bbw', i, '-ubuntu-2004', "ubuntu-2004.dockerfile", jobs=jobs, save_packages=True)
    addWorker('bg-bbw', i, '-debian-10', "debian-10.dockerfile", jobs=jobs, save_packages=True)
    addWorker('bg-bbw', i, '-rhel-8', "rhel-8.dockerfile", jobs=jobs, save_packages=True)
    addWorker('bg-bbw', i, '-centos-7', "centos-7.dockerfile", jobs=jobs, save_packages=True)
    addWorker('bg-bbw', i, '-sles-12', 'sles-12-download.dockerfile', jobs=jobs, save_packages=True)
    addWorker('bg-bbw', i, '-sles-15', 'sles-15-download.dockerfile', jobs=jobs, save_packages=True)

# aarch64-bbw-docker
for i in range(1, 6):
    jobs = 4
    if i == 5:
        jobs = 25
    if i == 4:
        jobs = 8

    if i == 5:
        addWorker('aarch64-bbw', i, '-debian-9', "vladbogo/bb:aarch64-debian-9", jobs=jobs, save_packages=True)
        addWorker('aarch64-bbw', i, '-debian-11', "quay.io/mariadb-foundation/bb-worker:debian11", jobs=jobs, save_packages=True)
        addWorker('aarch64-bbw', i, '-debian-sid', "vladbogo/bb:aarch64-debian-sid", jobs=jobs, save_packages=True)
        addWorker('aarch64-bbw', i, '-rhel-8', "quay.io/mariadb-foundation/bb-worker:rhel8", jobs=jobs, save_packages=True)
        addWorker('aarch64-bbw', i, '-fedora-34', "quay.io/mariadb-foundation/bb-worker:fedora34", jobs=jobs, save_packages=True)
        addWorker('aarch64-bbw', i, '-fedora-35', "quay.io/mariadb-foundation/bb-worker:fedora35", jobs=jobs, save_packages=True)
        addWorker('aarch64-bbw', i, '-ubuntu-2110', "quay.io/mariadb-foundation/bb-worker:ubuntu21.10", jobs=jobs, save_packages=True)
        addWorker('aarch64-bbw', i, '-ubuntu-2204', "quay.io/mariadb-foundation/bb-worker:ubuntu22.04", jobs=jobs, save_packages=True)

    if i == 4 or i == 5:
        addWorker('aarch64-bbw', i, '-debian-10', "quay.io/mariadb-foundation/bb-worker:debian10", jobs=jobs, save_packages=True)
    else:
        addWorker('aarch64-bbw', i, '-debian-10', "quay.io/mariadb-foundation/bb-worker:debian10", jobs=jobs, save_packages=True)
        addWorker('aarch64-bbw', i, '-ubuntu-1804', "quay.io/mariadb-foundation/bb-worker:ubuntu18.04", jobs=jobs, save_packages=True)
        addWorker('aarch64-bbw', i, '-ubuntu-2004', "quay.io/mariadb-foundation/bb-worker:ubuntu20.04", jobs=jobs, save_packages=True)

    if i == 2 or i == 5:
        addWorker('aarch64-bbw', i, '-centos-7', "quay.io/mariadb-foundation/bb-worker:centos7", jobs=jobs, save_packages=True)
        addWorker('aarch64-bbw', i, '-rhel-7', "vladbogo/bb:aarch64-rhel-7", jobs=jobs, save_packages=True)
        addWorker('aarch64-bbw', i, '-centos-8', "quay.io/mariadb-foundation/bb-worker:centos8", jobs=8, save_packages=True)

addWorker('s390x-bbw', 1, '-ubuntu-2004', "quay.io/mariadb-foundation/bb-worker:ubuntu20.04", jobs=8, save_packages=True)
addWorker('s390x-bbw', 1, '-ubuntu-2204', "quay.io/mariadb-foundation/bb-worker:ubuntu22.04", jobs=8, save_packages=True)
addWorker('s390x-bbw', 1, '-rhel-8', "vladbogo/bb:s390x-rhel-8", jobs=8, save_packages=True)
addWorker('s390x-bbw', 2, '-sles-15', "vladbogo/bb:s390x-sles-15", jobs=8, save_packages=True)

####### BUILDERS
# Priority filter based on saved package branches
def nextBuild(bldr, requests):
    return requests[0]

# Save packages for current branch?
def savePackage(step):
    return step.getProperty("save_packages") and fnmatch_any(step.getProperty("branch"), savedPackageBranches)

# ls2list gets the output of ls and returns a list with the files and directories
def ls2list(rc, stdout, stderr):
    lsFilenames = []

    for l in stdout.strip().split('\n'):
        if l != "":
            lsFilenames.append(l.strip())

    return { 'packages' : lsFilenames }

# ls2string gets the output of ls and returns a space delimited string with the files and directories
def ls2string(rc, stdout, stderr):
    lsFilenames = []

    for l in stdout.strip().split('\n'):
        if l != "":
            lsFilenames.append(l.strip())

    return { 'packages' : " ".join(lsFilenames) }

def dpkgDeb():
    return ShellCommand(
            name="dpkg-scanpackages/sources",
            haltOnFailure=True,
            command=["sh", "-xc", util.Interpolate("""set -e
    mkdir -p debs
    find .. -maxdepth 1 -type f -exec cp {} debs/ \;
    cd debs
    ( dpkg-scanpackages . /dev/null && dpkg-scanpackages --type ddeb . /dev/null  )| gzip -9c > Packages.gz
    dpkg-scansources . /dev/null | gzip -9c > Sources.gz
    cd ..
    find debs -type f -exec sha256sum {} \; | sort > sha256sums.txt
""")], doStepIf=lambda step: savePackage(step))

def rpmSave():
    return ShellCommand(
            name="move rpm files",
            haltOnFailure=True,
            command=["sh", "-xc", util.Interpolate("""set -e
    mkdir -p rpms srpms
    cp `find *.rpm -maxdepth 1 -type f` rpms
    find rpms -type f -exec sha256sum {} \; | sort > sha256sums.txt
""")], doStepIf=lambda step: savePackage(step))


@util.renderer
def getArch(props):
    buildername = props.getProperty('buildername')
    return buildername.split('-')[0]

####### FACTORY CODE

## f_deb_build - create source tarball
f_deb_build = util.BuildFactory()
f_deb_build.addStep(steps.ShellCommand(command=["echo", " revision: ", util.Property('revision')]))
f_deb_build.addStep(steps.GitHub(
  repourl=util.Property('repository'),
  mode='full',
  method='clobber',
  workdir='build',
  submodules=True
))
f_deb_build.addStep(steps.ShellCommand(name='build packages', command=["bash", "-xc", util.Interpolate("""set -e
./scripts/build.sh -p""")], workdir='build'))
f_deb_build.addStep(dpkgDeb())
f_deb_build.addStep(steps.ShellCommand(name='save_packages', timeout=7200, haltOnFailure=True, command=util.Interpolate('mkdir -p ' + '/packages/' + '%(prop:branch)s' + '/' + '%(prop:revision)s' + '/' + '%(prop:buildername)s'+ ' && cp -r debs/ sha256sums.txt /packages/' + '%(prop:branch)s' + '/' + '%(prop:revision)s' + '/' + '%(prop:buildername)s' + '/' +  ' && sync /packages/' + '%(prop:branch)s' + '/' + '%(prop:revision)s'), doStepIf=lambda step: savePackage(step)))
f_deb_build.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))

## f_rpm_build - create source tarball
f_rpm_build = util.BuildFactory()
f_rpm_build.addStep(steps.ShellCommand(command=["echo", " revision: ", util.Property('revision')]))
f_rpm_build.addStep(steps.GitHub(
  repourl=util.Property('repository'),
  mode='full',
  method='clobber',
  workdir='build',
  submodules=True
))
f_rpm_build.addStep(steps.ShellCommand(name='build packages', command=["bash", "-xc", "./scripts/build.sh -p"], workdir='build'))
f_rpm_build.addStep(rpmSave())
f_rpm_build.addStep(steps.ShellCommand(name='save_packages', timeout=7200, haltOnFailure=True, command=util.Interpolate('mkdir -p ' + '/packages/' + '%(prop:branch)s' + '/' + '%(prop:revision)s' + '/' + '%(prop:buildername)s'+ ' && cp -r rpms srpms sha256sums.txt' + ' /packages/' + '%(prop:branch)s' + '/' + '%(prop:revision)s' + '/' + '%(prop:buildername)s' + '/' +  ' && sync /packages/' + '%(prop:branch)s' + '/' + '%(prop:revision)s'), doStepIf=lambda step: savePackage(step)))
f_rpm_build.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))

####### LOCKS

hz_bbw2_lock = util.MasterLock('hz_bbw2_lock_gal', maxCount=1)
intel_bbw1_lock = util.MasterLock('intel_bbw1_lock_gal', maxCount=1)
p9_rhel8_bbw1_lock = util.MasterLock('p9_rhel8_bbw1_lock_gal', maxCount=1)
p9_db_bbw1_lock = util.MasterLock('p9_db_bbw1_lock_gal', maxCount=1)
aarch_bbw1_lock = util.MasterLock('aarch64_bbw1_lock_gal', maxCount=1)
aarch_bbw2_lock = util.MasterLock('aarch64_bbw2_lock_gal', maxCount=1)
aarch_bbw3_lock = util.MasterLock('aarch64_bbw3_lock_gal', maxCount=1)
aarch_bbw4_lock = util.MasterLock('aarch64_bbw4_lock_gal', maxCount=1)
apexis_bbw1_lock = util.MasterLock('apexis_bbw1_lock_gal', maxCount=1)
apexis_bbw2_lock = util.MasterLock('apexis_bbw2_lock_gal', maxCount=1)
bg_bbw1_lock = util.MasterLock('bg_bbw1_lock_gal', maxCount=1)
bg_bbw2_lock = util.MasterLock('bg_bbw2_lock_gal', maxCount=1)
bg_bbw3_lock = util.MasterLock('bg_bbw3_lock_gal', maxCount=1)
bg_bbw4_lock = util.MasterLock('bg_bbw4_lock_gal', maxCount=1)
bg_bbw5_lock = util.MasterLock('bg_bbw5_lock_gal', maxCount=1)
win_bbw1_lock = util.MasterLock('win_bbw1_lock_gal', maxCount=1)
win_bbw2_lock = util.MasterLock('win_bbw2_lock_gal', maxCount=1)
s390x_bbw1_lock = util.MasterLock('s390x_bbw1_lock', maxCount=1)
s390x_bbw2_sles_lock = util.MasterLock('s390x_bbw2_sles_lock', maxCount=1)

@util.renderer
def getLocks(props):
    worker_name = props.getProperty('workername', default=None)
    assert worker_name is not None

    if 'hz-bbw2-docker' in worker_name:
        return [hz_bbw2_lock.access('counting')]
    if 'intel-bbw1-docker' in worker_name:
        return [intel_bbw1_lock.access('counting')]
    if 'p9-rhel-bbw1-docker' in worker_name:
        return [p9_rhel8_bbw1_lock.access('counting')]
    if 'p9-db-bbw1-docker' in worker_name:
        return [p9_db_bbw1_lock.access('counting')]
    if 'aarch64-bbw1-docker' in worker_name:
        return [aarch_bbw1_lock.access('counting')]
    if 'aarch64-bbw2-docker' in worker_name:
        return [aarch_bbw2_lock.access('counting')]
    if 'aarch64-bbw3-docker' in worker_name:
        return [aarch_bbw3_lock.access('counting')]
    if 'aarch64-bbw4-docker' in worker_name:
        return [aarch_bbw4_lock.access('counting')]
    if 'fjord1-docker' in worker_name:
        return [apexis_bbw1_lock.access('counting')]
    if 'fjord2-docker' in worker_name:
        return [apexis_bbw2_lock.access('counting')]
    if 'bg-bbw1-docker' in worker_name:
        return [bg_bbw1_lock.access('counting')]
    if 'bg-bbw2-docker' in worker_name:
        return [bg_bbw2_lock.access('counting')]
    if 'bg-bbw3-docker' in worker_name:
        return [bg_bbw3_lock.access('counting')]
    if 'bg-bbw4-docker' in worker_name:
        return [bg_bbw4_lock.access('counting')]
    if 'bg-bbw5-docker' in worker_name:
        return [bg_bbw5_lock.access('counting')]
    if 'bg-bbw5-docker' in worker_name:
        return [bg_bbw5_lock.access('counting')]
    if 'bbw1-docker-windows' in worker_name:
        return [win_bbw1_lock.access('counting')]
    if 'bbw2-docker-windows' in worker_name:
        return [win_bbw2_lock.access('counting')]
    if 's390x-bbw1-docker' in worker_name:
        return [s390x_bbw1_lock.access('counting')]
    if 's390x-bbw2-docker' in worker_name:
        return [s390x_bbw2_sles_lock.access('counting')]

    return []

####### BUILDERS LIST
c['builders'] = []

c['builders'].append(
    util.BuilderConfig(name="gal-amd64-ubuntu-1804",
      workernames=workers["x64-bbw-docker-ubuntu-1804"],
      tags=["Ubuntu", "galera", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-amd64-ubuntu-2004",
      workernames=workers["x64-bbw-docker-ubuntu-2004"],
      tags=["Ubuntu", "galera", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-amd64-ubuntu-2204",
      workernames=workers["bg-bbw-docker-ubuntu-2204"],
      tags=["Ubuntu", "galera", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-amd64-ubuntu-2110",
      workernames=workers["x64-bbw-docker-ubuntu-2110"],
      tags=["Ubuntu", "galera", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-amd64-debian-9",
      workernames=workers["x64-bbw-docker-debian-9"],
      tags=["Debian", "galera", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-x86-debian-9",
      workernames=workers["x64-bbw-docker-debian-9-i386"],
      tags=["Debian", "galera", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-amd64-debian-10",
      workernames=workers["x64-bbw-docker-debian-10"],
      tags=["Debian", "galera", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-amd64-debian-11",
      workernames=workers["x64-bbw-docker-debian-11"],
      tags=["Debian", "galera", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-amd64-debian-sid",
      workernames=workers["x64-bbw-docker-debian-sid"],
      tags=["Debian", "galera", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-x86-debian-sid",
      workernames=workers["x64-bbw-docker-debian-sid-i386"],
      tags=["Debian", "galera", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-amd64-rhel-7",
      workernames=workers["x64-bbw-docker-rhel-7"],
      tags=["RHEL", "galera", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_rpm_build))

c['builders'].append(
    util.BuilderConfig(name="gal-amd64-rhel-8",
      workernames=workers["x64-bbw-docker-rhel-8"],
      tags=["RHEL", "galera", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_rpm_build))

c['builders'].append(
    util.BuilderConfig(name="gal-amd64-fedora-34",
      workernames=workers["bg-bbw-docker-fedora-34"],
      tags=["Fedora", "galera", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_rpm_build))

c['builders'].append(
    util.BuilderConfig(name="gal-amd64-fedora-35",
      workernames=workers["bg-bbw-docker-fedora-35"],
      tags=["Fedora", "galera", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_rpm_build))

c['builders'].append(
    util.BuilderConfig(name="gal-amd64-sles-12",
      workernames=workers["x64-bbw-docker-sles-12"],
      tags=["Fedora", "galera", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_rpm_build))

c['builders'].append(
    util.BuilderConfig(name="gal-amd64-sles-15",
      workernames=workers["x64-bbw-docker-sles-15"],
      tags=["Fedora", "galera", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_rpm_build))

c['builders'].append(
    util.BuilderConfig(name="gal-amd64-centos-7",
      workernames=workers["x64-bbw-docker-centos-7"],
      tags=["Centos", "galera", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_rpm_build))

c['builders'].append(
    util.BuilderConfig(name="gal-amd64-centos-8",
      workernames=workers["bg-bbw-docker-centos-8"],
      tags=["Centos", "galera", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_rpm_build))

c['builders'].append(
    util.BuilderConfig(name="gal-amd64-opensuse-15",
      workernames=workers["x64-bbw-docker-opensuse-15"],
      tags=["OpenSUSE", "galera", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_rpm_build))

c['builders'].append(
    util.BuilderConfig(name="gal-amd64-opensuse-42",
      workernames=workers["x64-bbw-docker-opensuse-42"],
      tags=["OpenSUSE", "galera", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_rpm_build))

c['builders'].append(
    util.BuilderConfig(name="gal-ppc64le-ubuntu-1804",
      workernames=workers["p9-bbw-docker-ubuntu-1804"],
      tags=["Ubuntu", "galera", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-ppc64le-ubuntu-2004",
      workernames=workers["p9-bbw-docker-ubuntu-2004"],
      tags=["Ubuntu", "galera", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-ppc64le-ubuntu-2204",
      workernames=workers["p9-bbw-docker-ubuntu-2204"],
      tags=["Ubuntu", "galera", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-ppc64le-ubuntu-2110",
      workernames=workers["p9-bbw-docker-ubuntu-2110"],
      tags=["Ubuntu", "galera", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-ppc64le-debian-9",
      workernames=workers["p9-bbw-docker-debian-9"],
      tags=["Ubuntu", "galera", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-ppc64le-debian-10",
      workernames=workers["p9-bbw-docker-debian-10"],
      tags=["Ubuntu", "galera", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-ppc64le-debian-11",
      workernames=workers["p9-bbw-docker-debian-11"],
      tags=["Ubuntu", "galera", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-ppc64le-debian-sid",
      workernames=workers["p9-bbw-docker-debian-sid"],
      tags=["Ubuntu", "galera", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-ppc64le-rhel-7",
      workernames=workers["p9-bbw-docker-rhel-7"],
      tags=["RHEL", "galera", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_rpm_build))

c['builders'].append(
    util.BuilderConfig(name="gal-ppc64le-rhel-8",
      workernames=workers["p9-bbw-docker-rhel-8"],
      tags=["RHEL", "galera", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_rpm_build))

c['builders'].append(
    util.BuilderConfig(name="gal-ppc64le-centos-7",
      workernames=workers["p9-bbw-docker-centos-7"],
      tags=["Centos", "galera", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_rpm_build))

c['builders'].append(
    util.BuilderConfig(name="gal-aarch64-ubuntu-1804",
      workernames=workers["aarch64-bbw-docker-ubuntu-1804"],
      tags=["Ubuntu", "galera", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-aarch64-ubuntu-2004",
      workernames=workers["aarch64-bbw-docker-ubuntu-2004"],
      tags=["Ubuntu", "galera", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-aarch64-ubuntu-2204",
      workernames=workers["aarch64-bbw-docker-ubuntu-2204"],
      tags=["Ubuntu", "galera", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-aarch64-ubuntu-2110",
      workernames=workers["aarch64-bbw-docker-ubuntu-2110"],
      tags=["Ubuntu", "galera", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-aarch64-fedora-34",
      workernames=workers["aarch64-bbw-docker-fedora-34"],
      tags=["Fedora", "galera", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_rpm_build))

c['builders'].append(
    util.BuilderConfig(name="gal-aarch64-fedora-35",
      workernames=workers["aarch64-bbw-docker-fedora-35"],
      tags=["Fedora", "galera", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_rpm_build))

c['builders'].append(
    util.BuilderConfig(name="gal-aarch64-centos-7",
      workernames=workers["aarch64-bbw-docker-centos-7"],
      tags=["Centos", "galera", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_rpm_build))

c['builders'].append(
    util.BuilderConfig(name="gal-aarch64-centos-8",
      workernames=workers["aarch64-bbw-docker-centos-8"],
      tags=["Centos", "galera", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_rpm_build))

c['builders'].append(
    util.BuilderConfig(name="gal-aarch64-debian-9",
      workernames=workers["aarch64-bbw-docker-debian-9"],
      tags=["Debian", "galera", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-aarch64-debian-10",
      workernames=workers["aarch64-bbw-docker-debian-10"],
      tags=["Debian", "galera", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-aarch64-debian-11",
      workernames=workers["aarch64-bbw-docker-debian-11"],
      tags=["Debian", "galera", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-aarch64-debian-sid",
      workernames=workers["aarch64-bbw-docker-debian-sid"],
      tags=["Debian", "galera", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-aarch64-rhel-7",
      workernames=workers["aarch64-bbw-docker-rhel-7"],
      tags=["RHEL", "galera", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_rpm_build))

c['builders'].append(
    util.BuilderConfig(name="gal-aarch64-rhel-8",
      workernames=workers["aarch64-bbw-docker-rhel-8"],
      tags=["RHEL", "galera", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_rpm_build))

c['builders'].append(
    util.BuilderConfig(name="gal-s390x-ubuntu-2004",
      workernames=workers["s390x-bbw-docker-ubuntu-2004"],
      tags=["Ubuntu", "galera", "gcc", "s390x"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-s390x-ubuntu-2204",
      workernames=workers["s390x-bbw-docker-ubuntu-2204"],
      tags=["Ubuntu", "galera", "gcc", "s390x"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_deb_build))

c['builders'].append(
    util.BuilderConfig(name="gal-s390x-rhel-8",
      workernames=workers["s390x-bbw-docker-rhel-8"],
      tags=["RHEL", "galera", "gcc", "s390x"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_rpm_build))

c['builders'].append(
    util.BuilderConfig(name="gal-s390x-sles-15",
      workernames=workers["s390x-bbw-docker-sles-15"],
      tags=["SLES", "galera", "gcc", "s390x"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=getLocks,
      factory=f_rpm_build))

c['logEncoding'] = 'utf-8'

c['multiMaster'] = True

c['mq'] = {  # Need to enable multimaster aware mq. Wamp is the only option for now.
    'type' : 'wamp',
    'router_url': 'ws://buildbot.mariadb.org:8085/ws',
    'realm': 'realm1',
    # valid are: none, critical, error, warn, info, debug, trace
    'wamp_debug_level' : 'info'
}
