# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from buildbot.process.properties import Property, Properties
from buildbot.steps.shell import ShellCommand, Compile, Test, SetPropertyFromCommand
from buildbot.steps.mtrlogobserver import MTR, MtrLogObserver
from buildbot.steps.source.github import GitHub
from buildbot.process.remotecommand import RemoteCommand
from twisted.internet import defer
import sys
import docker
from datetime import timedelta

sys.setrecursionlimit(10000)

RELEASABLE_BRANCHES="5.5 10.0 10.1 10.2 10.3 10.4 10.5 bb-5.5-release bb-10.0-release bb-10.1-release bb-10.2-release bb-10.3-release bb-10.4-release bb-10.5-release"

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Load the slave, database passwords and 3rd-party tokens from an external private file, so
# that the rest of the configuration can be public.
config = { "private": { } }
exec(open("master-private.cfg").read(), config, { })

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

#builders_quick=["ubuntu-1404", "ubuntu-1604", "ubuntu-1804", "ubuntu-1804-clang6", "ubuntu-1804-clang10", "asan-ubuntu-1804-clang10", "msan-ubuntu-1804-clang10", "debug-ubuntu-1804", "debian-9", "fedora-28", "fedora-29", "fedora-30", "centos-7", "opensuse-15", "opensuse-42", "pc9-ubuntu-1804", "pc9-clang6-ubuntu-1804", "pc9-clang10-ubuntu-1804", "pc9-without-server-ubuntu-1804", "aarch64-fedora-32", "aarch64-centos-7", "aarch64-debian-10", "aarch64-rhel-7", "windows-1809"]
builders_quick=["ubuntu-1404", "ubuntu-1604", "ubuntu-1804", "ubuntu-2004", "fulltest-ubuntu-2004", "ubuntu-1804-clang6", "ubuntu-1804-clang10", "asan-ubuntu-1804-clang10", "msan-ubuntu-1804-clang10", "32bit-ubuntu-1804", "valgrind-ubuntu-1804", "rhel-8", "debug-ubuntu-1804", "debian-9", "debian-10", "fedora-28", "fedora-29", "fedora-30", "fedora-31", "fedora-32", "centos-7", "centos-8", "opensuse-15", "opensuse-42", "pc9-ubuntu-1804", "pc9-clang6-ubuntu-1804", "pc9-clang10-ubuntu-1804", "pc9-without-server-ubuntu-1804", "aarch64-fedora-32", "aarch64-centos-7", "aarch64-debian-10", "aarch64-rhel-7", "windows-1809", "windows-packages-1809", "win32-1809", "win32-packages-1809"]

builders_autobake=["centos-7-rpm-autobake", "centos-8-rpm-autobake", "fedora-28-rpm-autobake", "fedora-29-rpm-autobake", "fedora-30-rpm-autobake", "fedora-31-rpm-autobake", "fedora-32-rpm-autobake", "ubuntu-1404-deb-autobake", "ubuntu-1804-deb-autobake", "ubuntu-2004-deb-autobake", "ubuntu-1604-deb-autobake", "pc9-ubuntu-1804-deb-autobake", "aarch64-debian-10-deb-autobake", "aarch64-fedora-32-rpm-autobake"]

builders_big=["ubuntu-1804-bigtest"]

builders_install=["ubuntu-1804-deb-autobake-install", "centos-7-rpm-autobake-install"]

builders_upgrade=["ubuntu-1804-deb-autobake-upgrade", "ubuntu-1804-deb-autobake-minor-upgrade", "centos-7-rpm-autobake-upgrade", "centos-7-rpm-autobake-minor-upgrade"]

github_status_builders = ["tarball-docker"] + builders_quick
# TODO add autobake builders

# Remove unstable builders
github_status_builders.remove("ubuntu-1404")
github_status_builders.remove("ubuntu-2004")
github_status_builders.remove("debian-10")
github_status_builders.remove("fedora-31")
github_status_builders.remove("fedora-32")
github_status_builders.remove("centos-8")
github_status_builders.remove("rhel-8")
github_status_builders.remove("fulltest-ubuntu-2004")
github_status_builders.remove("debug-ubuntu-1804")
github_status_builders.remove("asan-ubuntu-1804-clang10")
github_status_builders.remove("msan-ubuntu-1804-clang10")
github_status_builders.remove("32bit-ubuntu-1804")
github_status_builders.remove("valgrind-ubuntu-1804")
github_status_builders.remove("ubuntu-1804-clang6")
github_status_builders.remove("ubuntu-1804-clang10")
github_status_builders.remove("pc9-clang10-ubuntu-1804")
github_status_builders.remove("pc9-clang6-ubuntu-1804")

c['services'] = []
context = util.Interpolate("buildbot/%(prop:buildername)s")
gs = reporters.GitHubStatusPush(token=config["private"]["gh_mdbci"]["access_token"],
                                context=context,
                                startDescription='Build started.',
                                endDescription='Build done.',
                                verbose=True,
                                builders=github_status_builders)
c['services'].append(gs)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "MariaDB CI"
c['titleURL'] = "https://github.com/MariaDB/server"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "https://buildbot.mariadb.org/"

# minimalistic config to activate web UI
c['www'] = dict(port=8010, plugins=dict(waterfall_view={}, console_view={}, grid_view={}), custom_templates_dir='templates')

# Plain username auth
#c['www']['authz'] = util.Authz(allowRules=[util.AnyControlEndpointMatcher(role="admins")],
#                               roleMatchers=[util.RolesFromUsername(roles=["admins"], usernames=["admin"])])
#c['www']['auth'] = util.UserPasswordAuth({'admin': config["private"]["user_pass"]["admin"]})

# Github Auth, allow control for MariaDB affiliated accounts
c['www']['authz'] = util.Authz(
  allowRules=[
    util.AnyControlEndpointMatcher(role="MariaDB", defaultDeny=True)
  ],
  roleMatchers=[
    util.RolesFromGroups()
  ]
)
c['www']['auth'] = util.GitHubAuth(config["private"]["gh_mdbauth"]["client"], config["private"]["gh_mdbauth"]["secret"])

# Sponsor plugin
exec(open("sponsor.py").read())

# Custom plugin
# exec(open("grid.py").read())

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    'db_url' : config["private"]["db_url"]
}

mtrDbPool = util.EqConnectionPool("MySQLdb", config["private"]["db_host"], config["private"]["db_user"], config["private"]["db_password"], config["private"]["db_mtr_db"])

####### Disable net usage reports from being sent to buildbot.net
c['buildbotNetUsageData'] = None

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = []

# Normal workers

def mkWorker(name, **kwargs):
    return worker.Worker(name, config["private"]["worker_pass"][name], **kwargs)

hz_bbw1_worker = mkWorker("hz-bbw1-ubuntu1804")
c['workers'].append(hz_bbw1_worker)

# LibVirt workers
c['workers'].append(worker.LibVirtWorker('buildbot-debian10',
                    config["private"]["worker_pass"]["hz-bbw1-libvirt-debian-10"],
                    util.Connection('qemu+ssh://buildbot@95.216.39.88:65001/session?socket=/run/libvirt/libvirt-sock'),
                    '/var/lib/libvirt/images/buildbot-debian10', build_wait_timeout=0))

c['workers'].append(worker.LibVirtWorker('buildbot-ubuntu1804',
                    config["private"]["worker_pass"]["hz-bbw1-libvirt-debian-10"],
                    util.Connection('qemu+ssh://buildbot@95.216.39.88:65001/session?socket=/run/libvirt/libvirt-sock'),
                    '/var/lib/libvirt/images/buildbot-ubuntu1804', build_wait_timeout=0))

c['workers'].append(worker.LibVirtWorker('buildbot-centos7',
                    config["private"]["worker_pass"]["hz-bbw1-libvirt-debian-10"],
                    util.Connection('qemu+ssh://buildbot@95.216.39.88:65001/session?socket=/run/libvirt/libvirt-sock'),
                    '/var/lib/libvirt/images/buildbot-centos7', build_wait_timeout=0))

# Docker workers

## hz-bbw1-docker
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-tarball-debian-9", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/debian-9.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'1G' },
                    properties={ 'jobs':4, 'save_packages':True }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-debian-9", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/debian-9.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':True }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-ubuntu-1404", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/ubuntu-1404.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':True }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-ubuntu-1604", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/ubuntu-1604.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':True }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-ubuntu-1804", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/ubuntu-1804.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':True }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-fedora-28", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/fedora-28.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':True }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-fedora-29", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/fedora-29.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':True }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-fedora-30", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/fedora-30.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':True }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-centos-7", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/centos-7.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':True }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-opensuse-15", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/opensuse-15.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':True }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-opensuse-42", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/opensuse-42.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':True }))

## apexis-bbw1-docker
c['workers'].append(worker.DockerLatentWorker("fjord1-docker-ubuntu-1804", None,
                    docker_host=config["private"]["docker_workers"]["apexis-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-apexis1.pem', client_cert=('/srv/buildbot/tlscerts/cert-apexis1.pem', '/srv/buildbot/tlscerts/key-apexis1.pem')),
                    dockerfile=open("dockerfiles/clang-ubuntu-1804.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/opt/mariadb-buildbot/ccache:/mnt/ccache', '/opt/mariadb-buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':True }))

c['workers'].append(worker.DockerLatentWorker("fjord2-docker-ubuntu-1804", None,
                    docker_host=config["private"]["docker_workers"]["apexis-bbw2-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-apexis2.pem', client_cert=('/srv/buildbot/tlscerts/cert-apexis2.pem', '/srv/buildbot/tlscerts/key-apexis2.pem')),
                    dockerfile=open("dockerfiles/clang-ubuntu-1804.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/opt/mariadb-buildbot/ccache:/mnt/ccache', '/opt/mariadb-buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':True }))

## pc9-bbw1-docker
c['workers'].append(worker.DockerLatentWorker("pc9-bbw1-docker-ubuntu-1804", None,
                    docker_host=config["private"]["docker_workers"]["pc9-bbw1-docker"],
                    dockerfile=open("dockerfiles/ppc-ubuntu-1804.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-pc9.pem', client_cert=('/srv/buildbot/tlscerts/cert-pc9.pem', '/srv/buildbot/tlscerts/key-pc9.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'20G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':14, 'save_packages':True }))

c['workers'].append(worker.DockerLatentWorker("pc9-clang-bbw1-docker-ubuntu-1804", None,
                    docker_host=config["private"]["docker_workers"]["pc9-bbw1-docker"],
                    dockerfile=open("dockerfiles/ppc-clang-ubuntu-1804.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-pc9.pem', client_cert=('/srv/buildbot/tlscerts/cert-pc9.pem', '/srv/buildbot/tlscerts/key-pc9.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'20G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':14, 'save_packages':True }))

## bg-bbw1-docker
c['workers'].append(worker.DockerLatentWorker("bg-clang-bbw1-docker-ubuntu-1804", None,
                    docker_host=config["private"]["docker_workers"]["bg-bbw1-docker"],
                    dockerfile=open("dockerfiles/clang-ubuntu-1804.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-bg-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-bg-bbw1.pem', '/srv/buildbot/tlscerts/key-bg-bbw1.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':5, 'save_packages':True }))

c['workers'].append(worker.DockerLatentWorker("bg-msan-clang-bbw1-docker-ubuntu-1804", None,
                    docker_host=config["private"]["docker_workers"]["bg-bbw1-docker"],
                    dockerfile=open("dockerfiles/msan-clang-ubuntu-1804.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-bg-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-bg-bbw1.pem', '/srv/buildbot/tlscerts/key-bg-bbw1.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':5, 'save_packages':False }))

c['workers'].append(worker.DockerLatentWorker("bg-bbw1-docker-ubuntu-1804", None,
                    docker_host=config["private"]["docker_workers"]["bg-bbw1-docker"],
                    dockerfile=open("dockerfiles/valgrind-ubuntu-1804.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-bg-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-bg-bbw1.pem', '/srv/buildbot/tlscerts/key-bg-bbw1.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':5, 'save_packages':False }))

c['workers'].append(worker.DockerLatentWorker("bg-bbw1-docker-fedora-31", None,
                    docker_host=config["private"]["docker_workers"]["bg-bbw1-docker"],
                    dockerfile=open("dockerfiles/fedora-31.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-bg-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-bg-bbw1.pem', '/srv/buildbot/tlscerts/key-bg-bbw1.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':5, 'save_packages':True }))

c['workers'].append(worker.DockerLatentWorker("bg-bbw1-docker-fedora-32", None,
                    docker_host=config["private"]["docker_workers"]["bg-bbw1-docker"],
                    dockerfile=open("dockerfiles/fedora-32.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-bg-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-bg-bbw1.pem', '/srv/buildbot/tlscerts/key-bg-bbw1.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':5, 'save_packages':True }))

c['workers'].append(worker.DockerLatentWorker("bg-bbw1-docker-centos-8", None,
                    docker_host=config["private"]["docker_workers"]["bg-bbw1-docker"],
                    dockerfile=open("dockerfiles/centos-8.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-bg-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-bg-bbw1.pem', '/srv/buildbot/tlscerts/key-bg-bbw1.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':5, 'save_packages':True }))

c['workers'].append(worker.DockerLatentWorker("bg-bbw1-docker-ubuntu-2004", None,
                    docker_host=config["private"]["docker_workers"]["bg-bbw1-docker"],
                    dockerfile=open("dockerfiles/ubuntu-2004.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-bg-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-bg-bbw1.pem', '/srv/buildbot/tlscerts/key-bg-bbw1.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':5, 'save_packages':True }))

c['workers'].append(worker.DockerLatentWorker("bg-bbw1-docker-debian-10", None,
                    docker_host=config["private"]["docker_workers"]["bg-bbw1-docker"],
                    dockerfile=open("dockerfiles/debian-10.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-bg-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-bg-bbw1.pem', '/srv/buildbot/tlscerts/key-bg-bbw1.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':5, 'save_packages':True }))

c['workers'].append(worker.DockerLatentWorker("bg-32bit-bbw1-docker-ubuntu-1804", None,
                    docker_host=config["private"]["docker_workers"]["bg-bbw1-docker"],
                    dockerfile=open("dockerfiles/32bit-ubuntu-1804.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-bg-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-bg-bbw1.pem', '/srv/buildbot/tlscerts/key-bg-bbw1.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':5, 'save_packages':False }))

c['workers'].append(worker.DockerLatentWorker("bg-bbw1-docker-rhel-8", None,
                    docker_host=config["private"]["docker_workers"]["bg-bbw1-docker"],
                    dockerfile=open("dockerfiles/rhel-8.dockerfile").read() % (config["private"]["rhel_sub"]["user"], config["private"]["rhel_sub"]["password"]),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-bg-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-bg-bbw1.pem', '/srv/buildbot/tlscerts/key-bg-bbw1.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':5, 'save_packages':True }))

## aarch-bbw1-docker
c['workers'].append(worker.DockerLatentWorker("aarch64-bbw1-docker-fedora-30", None,
                    docker_host=config["private"]["docker_workers"]["aarch-bbw1-docker"],
                    dockerfile=open("dockerfiles/aarch-fedora-30.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-arm-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-arm-bbw1.pem', '/srv/buildbot/tlscerts/key-arm-bbw1.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':8, 'save_packages':True }))

c['workers'].append(worker.DockerLatentWorker("aarch64-bbw1-docker-centos-7", None,
                    docker_host=config["private"]["docker_workers"]["aarch-bbw1-docker"],
                    dockerfile=open("dockerfiles/aarch64-centos-7.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-arm-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-arm-bbw1.pem', '/srv/buildbot/tlscerts/key-arm-bbw1.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':8, 'save_packages':True }))

c['workers'].append(worker.DockerLatentWorker("aarch64-bbw1-docker-debian-10", None,
                    docker_host=config["private"]["docker_workers"]["aarch-bbw1-docker"],
                    dockerfile=open("dockerfiles/aarch64-debian-10.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-arm-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-arm-bbw1.pem', '/srv/buildbot/tlscerts/key-arm-bbw1.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':8, 'save_packages':True }))

c['workers'].append(worker.DockerLatentWorker("aarch64-bbw1-docker-rhel-7", None,
                    docker_host=config["private"]["docker_workers"]["aarch-bbw1-docker"],
                    dockerfile=open("dockerfiles/aarch64-rhel-7.dockerfile").read() % (config["private"]["rhel_sub"]["user"], config["private"]["rhel_sub"]["password"]),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-arm-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-arm-bbw1.pem', '/srv/buildbot/tlscerts/key-arm-bbw1.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':8, 'save_packages':True }))

## aarch-bbw2-docker
c['workers'].append(worker.DockerLatentWorker("aarch64-bbw2-docker-fedora-32", None,
                    docker_host=config["private"]["docker_workers"]["aarch-bbw2-docker"],
                    dockerfile=open("dockerfiles/aarch64-fedora-32.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-arm-bbw2.pem', client_cert=('/srv/buildbot/tlscerts/cert-arm-bbw2.pem', '/srv/buildbot/tlscerts/key-arm-bbw2.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':8, 'save_packages':True }))

c['workers'].append(worker.DockerLatentWorker("aarch64-bbw2-docker-centos-7", None,
                    docker_host=config["private"]["docker_workers"]["aarch-bbw2-docker"],
                    dockerfile=open("dockerfiles/aarch64-centos-7.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-arm-bbw2.pem', client_cert=('/srv/buildbot/tlscerts/cert-arm-bbw2.pem', '/srv/buildbot/tlscerts/key-arm-bbw2.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':8, 'save_packages':True }))

c['workers'].append(worker.DockerLatentWorker("aarch64-bbw2-docker-debian-10", None,
                    docker_host=config["private"]["docker_workers"]["aarch-bbw2-docker"],
                    dockerfile=open("dockerfiles/aarch64-debian-10.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-arm-bbw2.pem', client_cert=('/srv/buildbot/tlscerts/cert-arm-bbw2.pem', '/srv/buildbot/tlscerts/key-arm-bbw2.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':8, 'save_packages':True }))

c['workers'].append(worker.DockerLatentWorker("aarch64-bbw2-docker-rhel-7", None,
                    docker_host=config["private"]["docker_workers"]["aarch-bbw2-docker"],
                    dockerfile=open("dockerfiles/aarch64-rhel-7.dockerfile").read() % (config["private"]["rhel_sub"]["user"], config["private"]["rhel_sub"]["password"]),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-arm-bbw2.pem', client_cert=('/srv/buildbot/tlscerts/cert-arm-bbw2.pem', '/srv/buildbot/tlscerts/key-arm-bbw2.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':8, 'save_packages':True }))

## aarch-bbw3-docker
c['workers'].append(worker.DockerLatentWorker("aarch64-bbw3-docker-fedora-30", None,
                    docker_host=config["private"]["docker_workers"]["aarch-bbw3-docker"],
                    dockerfile=open("dockerfiles/aarch-fedora-30.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-arm-bbw3.pem', client_cert=('/srv/buildbot/tlscerts/cert-arm-bbw3.pem', '/srv/buildbot/tlscerts/key-arm-bbw3.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':8, 'save_packages':True }))

c['workers'].append(worker.DockerLatentWorker("aarch64-bbw3-docker-centos-7", None,
                    docker_host=config["private"]["docker_workers"]["aarch-bbw3-docker"],
                    dockerfile=open("dockerfiles/aarch64-centos-7.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-arm-bbw3.pem', client_cert=('/srv/buildbot/tlscerts/cert-arm-bbw3.pem', '/srv/buildbot/tlscerts/key-arm-bbw3.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':8, 'save_packages':True }))

c['workers'].append(worker.DockerLatentWorker("aarch64-bbw3-docker-debian-10", None,
                    docker_host=config["private"]["docker_workers"]["aarch-bbw3-docker"],
                    dockerfile=open("dockerfiles/aarch64-debian-10.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-arm-bbw3.pem', client_cert=('/srv/buildbot/tlscerts/cert-arm-bbw3.pem', '/srv/buildbot/tlscerts/key-arm-bbw3.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':8, 'save_packages':True }))

c['workers'].append(worker.DockerLatentWorker("aarch64-bbw3-docker-rhel-7", None,
                    docker_host=config["private"]["docker_workers"]["aarch-bbw3-docker"],
                    dockerfile=open("dockerfiles/aarch64-rhel-7.dockerfile").read() % (config["private"]["rhel_sub"]["user"], config["private"]["rhel_sub"]["password"]),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-arm-bbw3.pem', client_cert=('/srv/buildbot/tlscerts/cert-arm-bbw3.pem', '/srv/buildbot/tlscerts/key-arm-bbw3.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':8, 'save_packages':True }))




## windows-bbw1-docker
c['workers'].append(worker.DockerLatentWorker("bbw1-docker-windows-1809", None,
                    docker_host=config["private"]["docker_workers"]["windows-bbw1-docker"],
                    dockerfile=open("dockerfiles/windows.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-win.pem', client_cert=('/srv/buildbot/tlscerts/cert-win.pem', '/srv/buildbot/tlscerts/key-win.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    #volumes=['C:\packages:C:\packages'],
                    properties={ 'jobs':2, 'save_packages':True }))

## bm-bbw1-docker
c['workers'].append(worker.DockerLatentWorker("bm-bbw1-docker-ubuntu-1804", None,
                    docker_host=config["private"]["docker_workers"]["bm-bbw1-docker"],
                    dockerfile=open("dockerfiles/ubuntu-1804.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache'],
                    properties={ 'save_packages':False }))


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

####### GitHub hooks

# GitHub webhook receiver
c['www']['change_hook_dialects'] = {
        'github': {
                'secret': config["private"]["gh_secret"],
                'strict': True,
        }
}

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

branches_main=['5.5', '5.5-galera', '10.0', '10.0-galera', '10.1', '10.2', '10.3', '10.4', '10.5', '10.6']
# The trees for which we save binary packages.
savedPackageBranches= ["5.5", "10.0", "10.1", "10.2", "10.3", "10.4", "10.5",
                       "bb-*-release", "bb-10.2-compatibility", "st-*"]

# git branch filter using fnmatch
import fnmatch
def upstream_branch_fn(branch):
    return branch in branches_main or fnmatch.fnmatch(branch, 'bb-*') or fnmatch.fnmatch(branch, 'st-*') or fnmatch.fnmatch(branch, "refs/pull/*")
def staging_branch_fn(branch):
    return fnmatch.fnmatch(branch, 'st-*')
def fnmatch_any(s, list_of_patterns):
    return any(fnmatch.fnmatch(s, p) for p in list_of_patterns)

c['schedulers'] = []

# upstream scheduling
schedulerTarball = schedulers.SingleBranchScheduler(
    name="s_upstream_tarball",
    change_filter=util.ChangeFilter(repository="https://github.com/MariaDB/server", branch_fn=upstream_branch_fn),
    treeStableTimer=120,
    builderNames=["tarball-docker"])
c['schedulers'].append(schedulerTarball)

schedulerPlatforms = schedulers.Triggerable( name="s_upstream_all",
    builderNames=builders_quick)
c['schedulers'].append(schedulerPlatforms)

schedulerPackages = schedulers.Triggerable( name="s_packages",
    builderNames=builders_autobake)
c['schedulers'].append(schedulerPackages)

schedulerBigtests = schedulers.Triggerable( name="s_bigtest",
    builderNames=builders_big)
c['schedulers'].append(schedulerBigtests)

schedulerInstall = schedulers.Triggerable( name="s_install",
    builderNames=builders_install)
c['schedulers'].append(schedulerInstall)

schedulerUpgrade = schedulers.Triggerable( name="s_upgrade",
    builderNames=builders_upgrade)
c['schedulers'].append(schedulerUpgrade)
#--

# Other schedulers

# github.com/shinnok/server
c['schedulers'].append(schedulers.SingleBranchScheduler( name="s_shinnok_bb",
    change_filter=util.ChangeFilter(repository="https://github.com/shinnok/server", branch_re='bb-.*'),
    treeStableTimer=120,
    builderNames=["tarball-docker"]))

'''
c['schedulers'].append(schedulers.Triggerable( name="s_shinnok_all",
    builderNames=builders_quick))
'''
#--

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

# mariadb version supported platforms
supportedPlatforms = {}
supportedPlatforms["5.5"] =  ["centos-5","centos-6","centos-7","aarch64-centos-7","debian-7",                                                                                            "sles-11","sles-12","ubuntu-1404"]
supportedPlatforms["10.0"] = ["centos-5","centos-6","centos-7","aarch64-centos-7","debian-7","debian-8",                                                     "opensuse-42",              "sles-11","sles-12","ubuntu-1404","ubuntu-1604"]
supportedPlatforms["10.1"] = ["centos-5","centos-6","centos-7","aarch64-centos-7","debian-7","debian-8","debian-9","aarch64-debian-10","aarch64-rhel-7",                                          "opensuse-42",              "sles-11","sles-12","ubuntu-1404","ubuntu-1604","ubuntu-1804", "ubuntu-1804-clang6", "ubuntu-1804-clang10", "pc9-ubuntu-1804"]
supportedPlatforms["10.2"] = ["centos-5","centos-6","centos-7","aarch64-centos-7","debian-7","debian-8","debian-9","aarch64-debian-10","aarch64-rhel-7","fedora-27","fedora-28",                  "opensuse-42","opensuse-15","sles-11","sles-12","ubuntu-1404","ubuntu-1604","ubuntu-1804", "ubuntu-1804-clang6", "ubuntu-1804-clang10", "pc9-ubuntu-1804"]
supportedPlatforms["10.3"] = [           "centos-6","centos-7","aarch64-centos-7","debian-7","debian-8","debian-9","aarch64-debian-10","aarch64-rhel-7","fedora-27","fedora-28",                  "opensuse-42","opensuse-15","sles-11","sles-12","ubuntu-1404","ubuntu-1604","ubuntu-1804", "ubuntu-1804-clang6", "ubuntu-1804-clang10", "asan-ubuntu-1804-clang10", "debug-ubuntu-1804", "pc9-ubuntu-1804", "pc9-clang6-ubuntu-1804", "pc9-clang10-ubuntu-1804", "pc9-without-server-ubuntu-1804"]
supportedPlatforms["10.4"] = [           "centos-6","centos-7","aarch64-centos-7","debian-7","debian-8","debian-9","aarch64-debian-10","aarch64-rhel-7","fedora-28","fedora-29",                  "opensuse-42","opensuse-15","sles-11","sles-12","ubuntu-1404","ubuntu-1604","ubuntu-1804", "ubuntu-1804-clang6", "ubuntu-1804-clang10", "asan-ubuntu-1804-clang10", "debug-ubuntu-1804", "pc9-ubuntu-1804", "pc9-clang6-ubuntu-1804", "pc9-clang10-ubuntu-1804", "pc9-without-server-ubuntu-1804"]
#supportedPlatforms["10.5"] = [           "centos-6","centos-7","aarch64-centos-7","debian-7","debian-8","debian-9","aarch64-debian-10","aarch64-rhel-7","fedora-29","fedora-30","aarch64-fedora-32","opensuse-42","opensuse-15","sles-11","sles-12","ubuntu-1604","ubuntu-1804", "ubuntu-1804-clang6", "ubuntu-1804-clang10", "asan-ubuntu-1804-clang10", "msan-ubuntu-1804-clang10", "32bit-ubuntu-1804", "valgrind-ubuntu-1804", "debug-ubuntu-1804", "pc9-ubuntu-1804", "pc9-clang6-ubuntu-1804", "pc9-clang10-ubuntu-1804", "pc9-without-server-ubuntu-1804", "windows-1809"]
supportedPlatforms["10.5"] = [           "centos-6","centos-7","centos-8","aarch64-centos-7","debian-7","debian-8","debian-9","debian-10","aarch64-debian-10","aarch64-rhel-7","fedora-29","fedora-30","fedora-31","fedora-32","aarch64-fedora-32","opensuse-42","opensuse-15","sles-11","sles-12","ubuntu-1604","ubuntu-1804","ubuntu-2004","fulltest-ubuntu-2004", "ubuntu-1804-clang6", "ubuntu-1804-clang10", "rhel-8", "asan-ubuntu-1804-clang10", "msan-ubuntu-1804-clang10", "debug-ubuntu-1804", "pc9-ubuntu-1804", "pc9-clang6-ubuntu-1804", "pc9-clang10-ubuntu-1804", "pc9-without-server-ubuntu-1804", "windows-1809", "windows-packages-1809", "win32-1809", "win32-packages-1809"]
supportedPlatforms["10.6"] = [           "centos-6","centos-7","centos-8","aarch64-centos-7","debian-7","debian-8","debian-9","debian-10","aarch64-debian-10","aarch64-rhel-7","fedora-29","fedora-30","fedora-31","fedora-32","aarch64-fedora-32","opensuse-42","opensuse-15","sles-11","sles-12","ubuntu-1604","ubuntu-1804","ubuntu-2004","ubuntu-1804-clang6", "ubuntu-1804-clang10", "asan-ubuntu-1804-clang10", "debug-ubuntu-1804", "pc9-ubuntu-1804", "pc9-clang6-ubuntu-1804", "pc9-clang10-ubuntu-1804", "pc9-without-server-ubuntu-1804", "windows-1809"]

# Check and set list of builders for branch
def hasBuilders(step):
    waitIfStaging(step)

    mBranch = step.getProperty("master_branch")
    if len(supportedPlatforms[mBranch]) < 1:
        return False

    platformBuilderNames = []
    for platform in supportedPlatforms[mBranch]:
        for builder in c['builders']:
            if builder.name == platform:
                platformBuilderNames.append(builder.name)
    if len(platformBuilderNames) < 1:
        return False
    platformBuilderNames.sort()
    schedulerPlatforms.builderNames = platformBuilderNames
    return True

# Check and set autobake builders for branch
def hasAutobakes(step):
    packagesBuilderNames = []
    for builder in c['builders']:
        if builder.name.startswith(str(step.getProperty("buildername"))) and builder.name.endswith("-autobake"):
            packagesBuilderNames.append(builder.name)
    if len(packagesBuilderNames) < 1:
        return False
    packagesBuilderNames.sort()
    schedulerPackages.builderNames = packagesBuilderNames
    return True

# Check and set install builders for branch
def hasInstalls(step):
    packagesBuilderNames = []
    for builder in c['builders']:
        if builder.name.startswith(str(step.getProperty("buildername"))) and builder.name.endswith("-install"):
            packagesBuilderNames.append(builder.name)
    if len(packagesBuilderNames) < 1:
        return False
    packagesBuilderNames.sort()
    schedulerInstall.builderNames = packagesBuilderNames
    return True

# Check and set install builders for branch
def hasUpgrades(step):
    packagesBuilderNames = []
    for builder in c['builders']:
        if builder.name.startswith(str(step.getProperty("parentbuildername"))) and builder.name.endswith("-upgrade"):
            packagesBuilderNames.append(builder.name)
    if len(packagesBuilderNames) < 1:
        return False
    packagesBuilderNames.sort()
    schedulerUpgrade.builderNames = packagesBuilderNames
    return True

# Check and set bigtest builders for branch
def hasBigtest(step):
    bigtestBuilderNames = []
    for builder in c['builders']:
        if builder.name.startswith(str(step.getProperty("buildername"))) and builder.name.endswith("-bigtest"):
            bigtestBuilderNames.append(builder.name)
    if len(bigtestBuilderNames) < 1:
        return False
    bigtestBuilderNames.sort()
    schedulerBigtests.builderNames = bigtestBuilderNames
    return True

# Priority filter based on saved package branches
def nextBuild(bldr, requests):
    for r in requests:
        if hasattr(r, 'source') and fnmatch_any(r.source.branch, savedPackageBranches):
            return r
    return requests[0]

class FakeBuild(object):
    properties = Properties()

class FakeStep(object):
    build = FakeBuild()

@defer.inlineCallbacks
def shell(command, worker, builder):
    args = {
        'command': command,
        'logEnviron': False,
        'workdir': "/srv/buildbot/worker",
        'want_stdout': False,
        'want_stderr': False,
    }
    cmd = RemoteCommand('shell', args, stdioLogName=None)
    cmd.worker = worker
    yield cmd.run(FakeStep(), worker.conn, builder.name)
    return cmd.rc

@defer.inlineCallbacks
def canStartBuild(builder, wfb, request):
    worker=wfb.worker
    if worker.name != hz_bbw1_worker.name:
        return True
    # check worker load over the last 5 minutes
    rc = yield shell(
        'test "$(cut -d" " -f2 /proc/loadavg | cut -d. -f1)" -le "$(( $(nproc) / 2 ))"',
        worker, builder)
    if rc != 0:
        log.msg('loadavg is too high to take new builds',
                system=repr(worker))
        worker.putInQuarantine()
        return False

    worker.quarantine_timeout = 180
    worker.putInQuarantine()
    worker.resetQuarantine()
    return True

# Save packages for current branch?
def savePackage(step):
    return step.getProperty("save_packages") and fnmatch_any(step.getProperty("branch"), savedPackageBranches)

# ls2list gets the output of ls and returns a list with the files and directories
def ls2list(rc, stdout, stderr):
    lsFilenames = []

    for l in stdout.strip().split('\n'):
        if l != "":
            lsFilenames.append(l.strip())

    return { 'packages' : lsFilenames }

# checks if the list of files is empty
def hasFiles(step):
  if len(step.getProperty("packages")) < 1:
    return False
  else:
    return True

def filterBranch(step):
  if '10.5' in step.getProperty("branch"):
        return False
  if '10.6' in step.getProperty("branch"):
        return False
  return True

# check if branch is a staging branch
def isStagingBranch(step):
  if staging_branch_fn(step.getProperty("branch")):
    return True
  else:
    return False

# returns true if build is succeeding
def ifStagingSucceeding(step):
  if isStagingBranch(step):
    step.setProperty("build_results", step.build.results)
    return step.build.results in (SUCCESS, WARNINGS)
  else:
    return False

# set step's waitForFinish to True if staging branch
def waitIfStaging(step):
  if isStagingBranch(step):
    step.waitForFinish = True

def downloadSourceTarball():
    return ShellCommand(
             name="fetch_tarball",
             description="fetching source tarball",
             descriptionDone="fetching source tarball...done",
             haltOnFailure=True,
             command=["sh", "-xc", util.Interpolate("""
  d=/mnt/packages/
  f="%(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz"
  find $d -type f -mtime +2 | xargs -r rm -v
  flock "$d$f" wget -cO "$d$f" "https://ci.mariadb.org/%(prop:tarbuildnum)s/%(prop:mariadb_version)s.tar.gz"
""")])
# curl fails range-bytes download miserably due to https://github.com/curl/curl/issues/1163
# what I tried:
# flock "$d$f" curl --fail -C - -o "$d$f" "https://ci.mariadb.org/%(prop:tarbuildnum)s/%(prop:mariadb_version)s.tar.gz"
# ret=$? ; test $ret -eq 22 || test $ret -eq 0

def downloadDebs():
    return ShellCommand(
              name="fetch_debs",
              description="fetching debs",
              descriptionDone="fetching debs...done",
              haltOnFailure=True,
              command=["sh", "-xc", util.Interpolate("""
  mkdir -p debs/binary debs/source
  wget -r -np -nH --cut-dirs=2 -A *.deb "https://ci.mariadb.org/%(prop:tarbuildnum)s/%(prop:parentbuildername)s/" -P debs/binary
""")])

def downloadRpms():
    return ShellCommand(
              name="fetch_rpms",
              description="fetching rpms",
              descriptionDone="fetching rpms...done",
              haltOnFailure=True,
              command=["sh", "-xc", util.Interpolate("""
  mkdir -p debs/binary debs/source
  wget -r -np -nH --cut-dirs=2 -A *.rpm "https://ci.mariadb.org/%(prop:tarbuildnum)s/%(prop:parentbuildername)s/" -P rpms/
""")])


@util.renderer
def mtrJobsMultiplier(props):
    jobs = props.getProperty('jobs', default=20)
    return jobs * 2

@util.renderer
def dockerfile(props):
    worker = props.getProperty('workername')
    return "https://github.com/MariaDB/mariadb.org-tools/tree/master/buildbot.mariadb.org/dockerfiles/" + "-".join(worker.split('-')[-2:]) + '.dockerfile'


DEVELOPMENT_BRANCH="10.6"

def getRpmUpgradeStep():
     return Test(
        name="upgrade",
        haltOnFailure=True,
        description=["testing", "upgrade"],
        descriptionDone=["test", "upgrade"],
        command=["bash", "-xc", util.Interpolate("""
		set -xv
		test_mode=%(prop:test_mode)s
		test_type=%(prop:test_type)s
		case %(prop:branch)s in
		*galera*)
		  if [[ "$test_mode" == "all" ]] ; then
		    echo "Upgrade warning: the test in 'all' mode is not executed for galera branches"
		    exit
		  fi
		  ;;
		*%(kw:development_branch)s*)
		  if [[ "$test_mode" != "server" ]] ; then
		    echo "Upgrade warning: the test in 'all' or 'deps' mode is not executed for non-stable branches"
		    exit
		  fi
		  ;;
		esac
		package_version=`ls rpms/MariaDB-server-[0-9]* | head -n 1 | sed -e 's/.*MariaDB-server-\([0-9]*\.[0-9]*\.[0-9]*\).*/\\1/'`
		major_version=%(prop:major_version)s
		prev_major_version=$major_version
		# For now we rely on major_version being 10.1 or higher, can add a check later
		if [[ "$test_type" == "major" ]] ; then
		    minor_version_num=`echo $major_version | sed -e 's/10\.\([0-9]*\)/\\1/'`
		    ((prev_minor_version_num = minor_version_num - 1))
		    prev_major_version=10.$prev_minor_version_num
		fi
		arch=%(prop:arch)s
		distro=%(prop:version_name)s
		if [[ "$distro" == "sles123" ]] ; then
		    distro="sles12"
		fi
		repo_dist_arch=$distro-$arch
		echo "Architecture and distribution based on VM name: $repo_dist_arch"
		echo "Test properties"
		echo "  Systemd capability     %(prop:systemdCapability)s"
		echo "  Test type              $test_type"
		echo "  Test mode              $test_mode"
		echo "  Major version          $major_version"
		echo "  Previous major version $prev_major_version"
		#===============
		# This test can be performed in four modes:
		# - 'server' -- only mariadb-server is installed (with whatever dependencies it pulls) and upgraded.
		# - 'all'    -- all provided packages are installed and upgraded, except for Columnstore
		# - 'deps'   -- only a limited set of main packages is installed and upgraded,
		#               to make sure upgrade does not require new dependencies
		# - 'columnstore' -- mariadb-server and mariadb-plugin-columnstore are installed
		#===============
		echo "Current test mode: $test_mode"
		#============
		# Environment
		#============
		rpm -qa | grep -iE 'maria|mysql|galera'
		cat /etc/*release
		uname -a
		df -kT
		#========================================
		# Check whether a previous version exists
		#========================================
		if ! wget http://yum.mariadb.org/$prev_major_version/$repo_dist_arch/repodata -O repodata.list
		then
		  echo "Upgrade warning: could not find the 'repodata' folder for a previous version in MariaDB repo, skipping the test"
		  exit
		fi
		#===============================================
		# Define the list of packages to install/upgrade
		#===============================================
		case $test_mode in
		all|deps|columnstore)
		  primary_xml=`grep 'primary.xml.gz' repodata.list | sed -e 's/.*href="\(.*-primary.xml\)\.gz\".*/\\1/'`
		  wget http://yum.mariadb.org/$prev_major_version/$repo_dist_arch/repodata/$primary_xml.gz
		  if [[ $? != 0 ]] ; then
		    echo "ERROR: Couldn't download primary.xml.gz from the repository"
		    exit 1
		  fi
		  gunzip $primary_xml.gz
		  if [[ "$test_mode" == "all" ]] ; then
		    if grep -i columnstore $primary_xml > /dev/null ; then
		      echo "Upgrade warning: Due to MCOL-4120 and other issues, Columnstore upgrade will be tested separately"
		    fi
		    package_list=`grep -A 1 '<package type="rpm"' $primary_xml | grep MariaDB | grep -viE 'galera|columnstore' | sed -e 's/<name>//' | sed -e 's/<\/name>//' | sort | uniq | xargs`
		  elif [[ "$test_mode" == "deps" ]] ; then
		    package_list=`grep -A 1 '<package type="rpm"' $primary_xml | grep -iE 'MariaDB-server|MariaDB-test|MariaDB-client|MariaDB-common|MariaDB-compat' | sed -e 's/<name>//' | sed -e 's/<\/name>//' | sort | uniq | xargs`
		  elif [[ "$test_mode" == "columnstore" ]] ; then
		    if ! grep columnstore $primary_xml > /dev/null ; then
		      echo "Upgrade warning: Columnstore was not found in the released packages, the test will not be run"
		      exit
		    fi
		    package_list="MariaDB-server MariaDB-columnstore-engine"
		  fi
		  if [[ $arch == ppc* ]] ; then
		    package_list=`echo $package_list | xargs -n1 | sed -e 's/MariaDB-compat//gi' | xargs`
		  fi
		  ;;
		server)
		  package_list="MariaDB-server MariaDB-client"
		  ;;
		*)
		  echo "ERROR: unknown test mode: $test_mode"
		  exit 1
		esac
		echo "Package_list: $package_list"
		#======================================================================
		# Prepare yum/zypper configuration for installation of the last release
		#======================================================================
		if which zypper ; then
		  package_manager=zypper
		  repo_location=/etc/zypp/repos.d
		  install_command="zypper --no-gpg-checks install --from mariadb -y"
		  cleanup_command="zypper clean --all"
		  remove_command="zypper remove -y"
		  # Since there is no reasonable "upgrade" command in zypper which would
		  # pick up RPM files needed to upgrade existing packages, we have to use "install".
		  # However, if we run "install *.rpm", it will install all packages, regardless
		  # the test mode, and we will get a lot of differences in contents after upgrade
		  # (more plugins, etc.). So, instead for each package that we are going to install,
		  # we'll also find an RPM file which provides it, and will use its name in
		  # in the "upgrade" (second install) command
		  if [[ "$test_mode" == "all" ]] ; then
		    rm -f rpms/*columnstore*.rpm
		    rpms_for_upgrade="rpms/*.rpm"
		    case "%(prop:branch)s" in
		    *10.[2-9]*)
		      ;;
		    *)
		      echo "Upgrade warning: Due to MDEV-14560 (only fixed in 10.2+) an extra service restart will be performed after upgrade"
		      extra_restart_after_upgrade="yes"
		      ;;
		    esac
		  else
		    rpms_for_upgrade=""
		    extra_restart_after_upgrade="yes"
		    for p in $package_list ; do
		      for f in rpms/*.rpm ; do
			if rpm -qp $f --provides | grep -i "^$p =" ; then
			  rpms_for_upgrade="$rpms_for_upgrade $f"
			  break
			fi
		      done
		    done
		  fi
		  upgrade_command="zypper --no-gpg-checks install -y $rpms_for_upgrade"
		# As of now (February 2018), RPM packages do not support major upgrade.
		# To imitate it, we will remove previous packages and install new ones.
		elif which yum ; then
		  package_manager=yum
		  repo_location=/etc/yum.repos.d
		  install_command="yum -y --nogpgcheck install"
		  cleanup_command="yum clean all"
		  upgrade_command="yum -y --nogpgcheck upgrade rpms/*.rpm"
		  if [[ "$test_type" == "major" ]] ; then
		    upgrade_command="yum -y --nogpgcheck install rpms/*.rpm"
		  fi
		  if yum autoremove 2>&1 |grep -q 'need to be root'; then
		    remove_command="yum -y autoremove"
		  else
		    remove_command="yum -y remove"
		  fi
		else
		  echo "ERROR: could not find package manager"
		  exit 1
		fi
		if [[ "$test_mode" == "columnstore" ]] ; then
		  echo "Upgrade warning: Due to MCOL-4120 an extra service restart will be performed after upgrade"
		  extra_restart_after_upgrade="yes"
		fi
		extra_restart_after_upgrade="yes"
		ls $repo_location/* | grep -iE '(maria|galera)' | xargs -r sudo rm -f
		sudo sh -c "echo '[mariadb]
name=MariaDB
baseurl=http://yum.mariadb.org/$prev_major_version/$repo_dist_arch
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > $repo_location/MariaDB.repo"
		# Add fix for MDEV-20673 to rhel8/centos8 repo
		case $HOSTNAME in
		  rhel8*|centos8*) sudo sh -c "echo 'module_hotfixes = 1' >> $repo_location/MariaDB.repo";;
		esac
		# Workaround for TODO-1479 (errors upon reading from SUSE repos)
		#sudo rm -rf /etc/zypp/repos.d/SUSE_Linux_Enterprise_Server_12_SP3_x86_64:SLES12-SP3-Updates.repo /etc/zypp/repos.d/SUSE_Linux_Enterprise_Server_12_SP3_x86_64:SLES12-SP3-Pool.repo
		sudo sh -c "$cleanup_command"
		#=========================
		# Install previous release
		#=========================
		sudo sh -c "$install_command $package_list"
		if [[ $? -ne 0 ]] ; then
		  echo "ERROR: Installation of a previous release failed, see the output above"
		  exit 1
		fi
		#==========================================================================
		# Start the server, check that it is functioning and create some structures
		#==========================================================================
		case `expr "$prev_major_version" '<' "10.1"`"%(prop:systemdCapability)s" in
		0yes)
		  sudo systemctl start mariadb
		  if [[ "$distro" != *"sles"* ]] && [[ "$distro" != *"suse"* ]] ; then
		    sudo systemctl enable mariadb
		  else
		    echo "Upgrade warning: due to MDEV-23044 mariadb service won't be enabled in the test"
		  fi
		  sudo systemctl status mariadb --no-pager
		  ;;
		*)
		  sudo /etc/init.d/mysql start
		  ;;
		esac
		if [[ $? -ne 0 ]] ; then
		  echo "ERROR: Server startup failed"
		  sudo cat /var/log/messages | grep -iE 'mysqld|mariadb'
		  sudo cat /var/lib/mysql/*.err
		  exit 1
		fi
		if [[ "$prev_major_version" > "10.3" ]] ; then
		# 10.4+ uses unix_socket by default, hence sudo,
		# and also might have simple_password_check plugin, hence non-default password
		  sudo mysql -e "set password= PASSWORD('S1mpl-pw')"
		  password_option="-pS1mpl-pw"
		fi
		# All the commands below should succeed
		set -e
		mysql -uroot $password_option -e "CREATE DATABASE db"
		mysql -uroot $password_option -e "CREATE TABLE db.t_innodb(a1 SERIAL, c1 CHAR(8)) ENGINE=InnoDB; INSERT INTO db.t_innodb VALUES (1,'foo'),(2,'bar')"
		mysql -uroot $password_option -e "CREATE TABLE db.t_myisam(a2 SERIAL, c2 CHAR(8)) ENGINE=MyISAM; INSERT INTO db.t_myisam VALUES (1,'foo'),(2,'bar')"
		mysql -uroot $password_option -e "CREATE TABLE db.t_aria(a3 SERIAL, c3 CHAR(8)) ENGINE=Aria; INSERT INTO db.t_aria VALUES (1,'foo'),(2,'bar')"
		mysql -uroot $password_option -e "CREATE TABLE db.t_memory(a4 SERIAL, c4 CHAR(8)) ENGINE=MEMORY; INSERT INTO db.t_memory VALUES (1,'foo'),(2,'bar')"
		mysql -uroot $password_option -e "CREATE ALGORITHM=MERGE VIEW db.v_merge AS SELECT * FROM db.t_innodb, db.t_myisam, db.t_aria"
		mysql -uroot $password_option -e "CREATE ALGORITHM=TEMPTABLE VIEW db.v_temptable AS SELECT * FROM db.t_innodb, db.t_myisam, db.t_aria"
		mysql -uroot $password_option -e "CREATE PROCEDURE db.p() SELECT * FROM db.v_merge"
		mysql -uroot $password_option -e "CREATE FUNCTION db.f() RETURNS INT DETERMINISTIC RETURN 1"
		if [[ "$test_mode" == "columnstore" ]] ; then
		  mysql -uroot $password_option -e "CREATE TABLE db.t_columnstore(a INT, c VARCHAR(8)) ENGINE=ColumnStore; SHOW CREATE TABLE db.t_columnstore; INSERT INTO db.t_columnstore VALUES (1,'foo'),(2,'bar')"
		fi
		set +e
		#====================================================================================
		# Store information about server version and available plugins/engines before upgrade
		#====================================================================================
		mysql -uroot $password_option --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.old
		old_version=`cat /tmp/version.old`
		# If the tested branch has the same version as the public repository,
		# upgrade won't work properly. For releasable branches, we will return an error
		# urging to bump the version number. For other branches, we will abort the test
		# with a warning (which nobody will read). This is done upon request from
		# development, as temporary branches might not be rebased in a timely manner
		if [ "$package_version" == "$old_version" ] ; then
		    echo "ERROR: Server version $package_version has already been released. Bump the version number!"
		    for b in %(kw:releasable_branches)s ; do
			if [ "$b" == "%(prop:branch)s" ] ; then
			    exit 1
			fi
		    done
		    echo "Upgrade warning: The test will be skipped, as upgrade will not work properly"
		    exit
		fi
		mysql -uroot $password_option --skip-column-names -e "select engine, support, transactions, savepoints from information_schema.engines" | sort > /tmp/engines.old
		case "$prev_major_version" in
		5.5)
		  mysql -uroot $password_option --skip-column-names -e "show plugins" | sort > /tmp/plugins.old
		  ;;
		10.[0-9])
		  mysql -uroot $password_option --skip-column-names -e "select plugin_name, plugin_status, plugin_type, plugin_library, plugin_license from information_schema.all_plugins" | sort > /tmp/plugins.old
		  ;;
		*)
		  echo "ERROR: unknown major version: $prev_major_version"
		  exit 1
		  ;;
		esac
		# Store dependency information for old binaries/libraries:
		# - names starting with "mysql*" in the directory where mysqld is located;
		# - names starting with "mysql*" in the directory where mysql is located;
		# - everything in the plugin directories installed by any MariaDB packages
		set +x
		for i in `sudo which mysqld | sed -e 's/mysqld$/mysql\*/'` `which mysql | sed -e 's/mysql$/mysql\*/'` `rpm -ql \`rpm -qa | grep MariaDB | xargs\` | grep -v 'mysql-test' | grep -v '/debug/' | grep '/plugin/' | sed -e 's/[^\/]*$/\*/' | sort | uniq | xargs`; do echo "=== $i" ; ldd $i | sort | sed 's/(.*)//' ; done > /home/buildbot/ldd.old
		set -x
		#======================================================================
		# Prepare yum/zypper configuration for installation of the new packages
		#======================================================================
		set -e
		if [[ "$test_type" == "major" ]] ; then
		  echo
		  echo "Remove old packages for major upgrade"
		  echo
		  packages_to_remove=`rpm -qa | grep 'MariaDB-' | awk -F'-' '{print $1"-"$2}' | xargs`
		  sudo sh -c "$remove_command $packages_to_remove"
		  rpm -qa | grep -iE 'maria|mysql' || true
		fi
		if [[ "$test_mode" == "deps" ]] ; then
		  sudo mv $repo_location/MariaDB.repo /tmp
		  sudo rm -rf $repo_location/*
		  sudo mv /tmp/MariaDB.repo $repo_location/
		  sudo sh -c "$cleanup_command"
		fi
		#=========================
		# Install the new packages
		#=========================
		# Between 10.3 and 10.4(.2), required galera version changed from galera(-3) to galera-4.
		# It means that there will be no galera-4 in the "old" repo, and it's not among the local RPMs.
		# So, we need to add a repo for it
		if [[ "$test_type" == "major" ]] && [[ "$major_version" > "10.3" ]] && [[ "$prev_major_version" < "10.4" ]] ; then
		  sudo sh -c "echo '[galera]
name=Galera
baseurl=http://yum.mariadb.org/galera/repo4/rpm/$repo_dist_arch
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > $repo_location/galera.repo"
		fi
		sudo sh -c "$upgrade_command"
		set +e
		#===================================================
		# Check that no old packages have left after upgrade
		#===================================================
		# The check is only performed for all-package-upgrade, because
		# for selective ones some implicitly installed packages might not be upgraded
		if [[ "$test_mode" == "all" ]] ; then
		  if [ "%(prop:is_main_tree)s" == "yes" ] ; then
		    rpm -qa | grep -iE 'mysql|maria' | grep `cat /tmp/version.old`
		  else
		    rpm -qa | grep -iE 'mysql|maria' | grep `cat /tmp/version.old` | grep -v debuginfo
		  fi
		  if [[ $? -eq 0 ]] ; then
		    echo "ERROR: Old packages have been found after upgrade"
		    exit 1
		  fi
		fi
		#================================
		# Optionally (re)start the server
		#================================
		set -e
		if [ "$test_type" == "major" ] ; then
		  case "%(prop:systemdCapability)s" in
		  yes)
		    sudo systemctl start mariadb
		    ;;
		  no)
		    sudo /etc/init.d/mysql start
		    ;;
		  esac
		elif [ -n "$extra_restart_after_upgrade" ] ; then
		  case "%(prop:systemdCapability)s" in
		  yes)
		    sudo systemctl restart mariadb
		    ;;
		  no)
		    sudo /etc/init.d/mysql restart
		    ;;
		  esac
		fi
		#================================
		# Make sure that the new server is running
		#================================
		if mysql -uroot $password_option -e "select @@version" | grep "$old_version" ; then
		  echo "ERROR: The server was not upgraded or was not restarted after upgrade"
		  exit 1
		fi
		#=====================================================================================
		# Run mysql_upgrade for non-GA branches (minor upgrades in GA branches shouldn't need it)
		#=====================================================================================
		if [[ "$major_version" == %(kw:development_branch)s ]] || [[ "$test_type" == "major" ]] ; then
		  mysql_upgrade -uroot $password_option
		fi
		set +e
		#=====================================================================================
		# Check that the server is functioning and previously created structures are available
		#=====================================================================================
		# All the commands below should succeed
		set -e
		mysql -uroot $password_option -e "select @@version, @@version_comment"
		mysql -uroot $password_option -e "SHOW TABLES IN db"
		mysql -uroot $password_option -e "SELECT * FROM db.t_innodb; INSERT INTO db.t_innodb VALUES (3,'foo'),(4,'bar')"
		mysql -uroot $password_option -e "SELECT * FROM db.t_myisam; INSERT INTO db.t_myisam VALUES (3,'foo'),(4,'bar')"
		mysql -uroot $password_option -e "SELECT * FROM db.t_aria; INSERT INTO db.t_aria VALUES (3,'foo'),(4,'bar')"
		echo "If the next INSERT fails with a duplicate key error,"
		echo "it is likely because the server was not upgraded or restarted after upgrade"
		mysql -uroot $password_option -e "SELECT * FROM db.t_memory; INSERT INTO db.t_memory VALUES (1,'foo'),(2,'bar')"
		mysql -uroot $password_option -e "SELECT COUNT(*) FROM db.v_merge"
		mysql -uroot $password_option -e "SELECT COUNT(*) FROM db.v_temptable"
		mysql -uroot $password_option -e "CALL db.p()"
		mysql -uroot $password_option -e "SELECT db.f()"
		if [[ "$test_mode" == "columnstore" ]] ; then
		  mysql -uroot $password_option -e "SELECT * FROM db.t_columnstore; INSERT INTO db.t_columnstore VALUES (3,'foo'),(4,'bar')"
		fi
		set +e
		#===================================================================================
		# Store information about server version and available plugins/engines after upgrade
		#===================================================================================
		set -e
		mysql -uroot $password_option --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.new
		mysql -uroot $password_option --skip-column-names -e "select engine, support, transactions, savepoints from information_schema.engines" | sort > /tmp/engines.new
		cat /tmp/engines.new
		case "$major_version" in
		5.5)
		  mysql -uroot $password_option --skip-column-names -e "show plugins" | sort > /tmp/plugins.new
		  ;;
		10.[0-9])
		  mysql -uroot $password_option --skip-column-names -e "select plugin_name, plugin_status, plugin_type, plugin_library, plugin_license from information_schema.all_plugins" | sort > /tmp/plugins.new
		  ;;
		esac
		# Dependency information for new binaries/libraries
		set +x
		for i in `sudo which mysqld | sed -e 's/mysqld$/mysql\*/'` `which mysql | sed -e 's/mysql$/mysql\*/'` `rpm -ql \`rpm -qa | grep MariaDB | xargs\` | grep -v 'mysql-test' | grep -v '/debug/' | grep '/plugin/' | sed -e 's/[^\/]*$/\*/' | sort | uniq | xargs`; do echo "=== $i" ; ldd $i | sort | sed 's/(.*)//' ; done > /home/buildbot/ldd.new
		set -x
		case "%(prop:systemdCapability)s" in
		yes)
		  ls -l /usr/lib/systemd/system/mariadb.service
		  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
		  ls -l /etc/init.d/mysql || true
		  systemctl status mariadb.service --no-pager
		  systemctl status mariadb --no-pager
		  # Not done for SUSE due to MDEV-23044
		  if [[ "$distro" != *"sles"* ]] && [[ "$distro" != *"suse"* ]] ; then
		    # Major upgrade for RPMs is remove / install, so previous configuration
		    # could well be lost
		    if [[ "$test_type" == "major" ]] ; then
		      sudo systemctl enable mariadb
		    fi
		    systemctl is-enabled mariadb
		    systemctl status mysql --no-pager
		    systemctl status mysqld --no-pager
		  fi
		  ;;
		no)
		  echo "Steps related to systemd will be skipped"
		  ;;
		*)
		  echo "ERROR: It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
		  exit 1
		  ;;
		esac
		set +e
		# Until %(kw:development_branch)s is GA, the list of plugins/engines might be unstable, skipping the check
		# For major upgrade, no point to do the check at all
		if [[ "$major_version" != %(kw:development_branch)s ]] && [[ "$test_type" != "major" ]] ; then
		  # This output is for informational purposes
		  diff -u /tmp/engines.old /tmp/engines.new
		  diff -u /tmp/plugins.old /tmp/plugins.new
		  # Only fail if there are any disappeared/changed engines or plugins
		  disappeared_or_changed=`comm -23 /tmp/engines.old /tmp/engines.new | wc -l`
		  if [[ $disappeared_or_changed -ne 0 ]] ; then
		    echo "ERROR: the lists of engines in the old and new installations differ"
		    exit 1
		  fi
		  disappeared_or_changed=`comm -23 /tmp/plugins.old /tmp/plugins.new | wc -l`
		  if [[ $disappeared_or_changed -ne 0 ]] ; then
		    echo "ERROR: the lists of available plugins in the old and new installations differ"
		    exit 1
		  fi
		  if [ "$test_mode" == "all" ] ; then
		    set -o pipefail
		    if wget --timeout=20 --no-check-certificate https://raw.githubusercontent.com/MariaDB/mariadb.org-tools/master/buildbot/baselines/ldd.${major_version}.${distro}.${arch} -O /tmp/ldd.baseline > /dev/null ; then
		      ldd_baseline=/tmp/ldd.baseline
		    else
		      ldd_baseline=/home/buildbot/ldd.old
		    fi
		    diff -U1000 $ldd_baseline /home/buildbot/ldd.new | ( grep -E '^[-+]|^ =' || true )
		    if [[ $? -ne 0 ]] ; then
		      echo "ERROR: something has changed in the dependencies of binaries or libraries. See the diff above"
		      exit 1
		    fi
		  fi
		  set +o pipefail
		fi
		diff -u /tmp/version.old /tmp/version.new
		if [[ $? -eq 0 ]] ; then
		  echo "ERROR: server version has not changed after upgrade"
		  echo "It can be a false positive if we forgot to bump version after release,"
		  echo "or if it is a development tree is based on an old version"
		  exit 1
		fi
		echo "Done"
""", development_branch=DEVELOPMENT_BRANCH, releasable_branches=RELEASABLE_BRANCHES)])

	
def getRpmInstallStep():
     return Test(
        name="install",
        haltOnFailure=True,
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        command=["bash", "-xc", util.Interpolate("""
		set -ex
		df -kT
		case "%(prop:branch)s" in
		*mdev10416*)
		  sudo cat /etc/sysconfig/selinux | grep SELINUX || true
		  sudo sh -c \"PATH=$PATH:/usr/sbin getenforce || true\"
		  sudo sh -c \"PATH=$PATH:/usr/sbin setenforce Enforcing || true\"
		  sudo sh -c \"PATH=$PATH:/usr/sbin getenforce || true\"
		  ;;
		esac
		rpm -qa | { grep -iE 'maria|mysql|galera' || true; }
		# Try several times, to avoid sporadic "The requested URL returned error: 404"
		made_cache=0
		for i in 1 2 3 4 5 ; do
		  sudo rm -rf /var/cache/yum/*
		  sudo yum clean all
		  case $HOSTNAME in
		    rhel8*) sudo subscription-manager refresh ;;
		  esac
		  if sudo yum makecache ; then
		    made_cache=1
		    break
		  else
		    sleep 5
		  fi
		done
		if [ "$made_cache" != "1" ] ; then
		  echo "Failed to make cache"
		  exit 1
		fi
		sudo yum search mysql | { grep "^mysql" || true; }
		sudo yum search maria | { grep "^maria" || true; }
		sudo yum search percona | { grep percona || true; }
		case "%(prop:branch)s" in
		# 10.1+ branches; 3.x is for MDEV-17688, 10.2 with 3.x connector
		*10.[1-9]*|*3.[0-9]*)
		  sudo sh -c "echo '[galera]
name=galera
baseurl=http://yum.mariadb.org/galera/repo/rpm/%(prop:arch)s
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/yum.repos.d/galera.repo"
		  # Update galera.repo to point at either the galera-3 or galera-4 test repo
		  case "%(prop:branch)s" in
		  *10.[1-3]*)
		    sudo sed -i 's/repo/repo3/' /etc/yum.repos.d/galera.repo
		    ;;
		  *10.[4-9]*)
		    sudo sed -i 's/repo/repo4/' /etc/yum.repos.d/galera.repo
		    ;;
		  esac
		  sudo cat /etc/yum.repos.d/galera.repo
		  sudo yum -y --nogpgcheck install rpms/*.rpm
		  case "%(prop:systemdCapability)s" in
		  yes)
		    if ! sudo systemctl start mariadb ; then
		      sudo journalctl -lxn 500 --no-pager | grep -iE 'mysqld|mariadb'
		      sudo systemctl -l status mariadb.service --no-pager
		      exit 1
		    fi
		    ;;
		  no)
		    sudo /etc/init.d/mysql restart
		    ;;
		  *)
		    echo "It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
		    ;;
		  esac
		  if [[ "%(prop:branch)s" == *"10."[4-9]* ]] ; then
		    echo "Uninstallation of Cracklib plugin may fail if it wasn't installed, it's quite all right"
		    if sudo mysql -e "uninstall soname 'cracklib_password_check.so'" ; then
		      reinstall_cracklib_plugin="YES"
		    fi
		    sudo mysql -e "set password=''"
		  fi
		  mysql -uroot -e 'drop database if exists test; create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t;'
		  if ls rpms/*.rpm | grep -i columnstore > /dev/null 2>&1 ; then
		    mysql --verbose -uroot -e "create database cs; use cs; create table cs.t_columnstore (a int, b char(8)); insert into cs.t_columnstore select seq, concat('val',seq) from seq_1_to_10; select * from cs.t_columnstore"
		    sudo systemctl restart mariadb
		    mysql --verbose -uroot -e "select * from cs.t_columnstore; update cs.t_columnstore set b = 'updated'"
		    sudo systemctl restart mariadb-columnstore
		    mysql --verbose -uroot -e "update cs.t_columnstore set a = a + 10; select * from cs.t_columnstore"
		  fi
		# Check if the build is WSREP-aware. It might be not, if it was built
		# with WITH_WSREP=OFF
		  if sudo mysqld --help --verbose 2>&1 | grep wsrep > /dev/null ; then
		    galera_path=`echo /usr/lib*/galera*/libgalera_smm.so`
		    # Half-initialization of galera makes further shutdown hang, removed set global wsrep_cluster_address="gcomm://"
		    mysql -uroot -e 'set global wsrep_provider="'$galera_path'"; show status like "wsrep%%"'
		  fi
		  ;;
		# 5.5-galera, 10.0-galera and alike
		*galera*)
		  sudo sh -c "echo '[galera]
		name=galera
		baseurl=http://yum.mariadb.org/galera/repo/rpm/%(prop:arch)s"
		gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
		gpgcheck=1' > /etc/yum.repos.d/galera.repo"
		  sudo cat /etc/yum.repos.d/galera.repo
		  sudo sh -c "echo '[mariadb]
		name=MariaDB
		baseurl=http://yum.mariadb.org/$(cat /tmp/VERSION)/%(prop:arch)s"
		gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
		gpgcheck=1' > /etc/yum.repos.d/MariaDB.repo"
		  sudo cat /etc/yum.repos.d/MariaDB.repo
		  sudo yum -y --nogpgcheck install rpms/*.rpm
		  sudo /etc/init.d/mysql restart
		  galera_path=`echo /usr/lib*/galera*/libgalera_smm.so`
		  mysql -uroot -e 'use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t;set global wsrep_provider="'$galera_path'"; set global wsrep_cluster_address="gcomm://";show status like "wsrep%%"'
		  ;;
		# 5.5/10.0 non-Galera branches
		*)
		  sudo yum -y --nogpgcheck install rpms/*.rpm
		  sudo /etc/init.d/mysql restart
		  mysql -uroot -e "use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t"
		  ;;
		esac
		echo "Test for MDEV-18563, MDEV-18526"
		set +e
		case "%(prop:systemdCapability)s" in
		yes)
		  sudo systemctl stop mariadb
		  ;;
		no)
		  sudo /etc/init.d/mysql stop
		  ;;
		esac
		sleep 1
		sudo pkill -9 mysqld
		for p in /bin /sbin /usr/bin /usr/sbin /usr/local/bin /usr/local/sbin ; do
		  if test -x $p/mysql_install_db ; then
		    sudo $p/mysql_install_db --no-defaults --user=mysql --plugin-maturity=unknown
		  else
		    echo "$p/mysql_install_db does not exist"
		  fi
		done
		sudo mysql_install_db --no-defaults --user=mysql --plugin-maturity=unknown
		set +e
		echo "All done"
""")])


def getDebMinorUpgradeStep():
     return Test(
        name="upgrade",
        haltOnFailure=True,
        description=["testing", "upgrade"],
        descriptionDone=["test", "upgrade"],
        command=["bash", "-xc", util.Interpolate("""
		set -x
		test_mode=%(prop:test_mode)s
		test_type=%(prop:test_type)s

		case "%(prop:branch)s" in
		*galera*)
		  if [[ "$test_mode" == "all" ]] ; then
		    echo "Upgrade warning: the test in 'all' mode is not executed for galera branches"
		    exit
		  fi
		  ;;
		*%(kw:development_branch)s*)
		  if [[ "$test_mode" != "server" ]] ; then
		    echo "Upgrade warning: For non-stable branches the test is only run in 'test' mode"
		    exit
		  fi
		  ;;
		esac
		arch=%(prop:arch)s
		if [[ "$arch" == "ppc64le" ]] ; then
		  arch=ppc64el
		elif [[ "$arch" == "x86" ]] ; then
		  arch=i386
		fi
		dist_name=%(prop:dist_name)s
		version_name=%(prop:version_name)s
		major_version=%(prop:major_version)s

		prev_major_version=$major_version
		# For now we rely on major_version being 10.1 or higher, can add a check later
		if [[ "$test_type" == "major" ]] ; then
		    minor_version_num=`echo $major_version | sed -e 's/10\.\([0-9]*\)/\\1/'`
		    ((prev_minor_version_num = minor_version_num - 1))
		    prev_major_version=10.$prev_minor_version_num
		fi


		echo "Architecture, distribution and version based on VM name: $arch $dist_name $version_name"
		echo "Test properties"
		echo "  Systemd capability %(prop:systemdCapability)s"
		echo "  Major version %(prop:major_version)s"
		echo "  Previous major version $prev_major_version"
		#===============
		# This test can be performed in four modes:
		# - 'server' -- only mariadb-server is installed (with whatever dependencies it pulls) and upgraded.
		# - 'all'    -- all provided packages are installed and upgraded, except for Columnstore
		# - 'deps'   -- only a limited set of main packages is installed and upgraded,
		#               to make sure upgrade does not require new dependencies
		# - 'columnstore' -- mariadb-server and mariadb-plugin-columnstore are installed
		#===============
		echo "Current test mode: $test_mode"
		#============
		# Environment
		#============
		dpkg -l | grep -iE 'maria|mysql|galera'
		lsb_release -a
		uname -a
		df -kT
		#========================================
		# Check whether a previous version exists
		#========================================
		if ! wget http://mirror.netinch.com/pub/mariadb/repo/$prev_major_version/$dist_name/dists/$version_name/main/binary-$arch/Packages
		then
		  echo "Upgrade warning: could not find the 'Packages' file for a previous version in MariaDB repo, skipping the test"
		  exit
		fi
		#===============================================
		# Define the list of packages to install/upgrade
		#===============================================
		case $test_mode in
		all)
		  if grep -i columnstore Packages > /dev/null ; then
		    echo "Upgrade warning: Due to MCOL-4120 (Columnstore leaves the server shut down) and other bugs Columnstore upgrade is tested separately"
		  fi
		  package_list=`grep -B 1 'Source: mariadb-' Packages | grep 'Package:' | grep -vE 'galera|spider|columnstore' | awk '{print $2}' | sort | uniq | xargs`
		  if grep -i spider Packages > /dev/null ; then
		    echo "Upgrade warning: Due to MDEV-14622 Spider will be installed separately after the server"
		    spider_package_list=`grep -B 1 'Source: mariadb-' Packages | grep 'Package:' | grep 'spider' | awk '{print $2}' | sort | uniq | xargs`
		  fi
		  if grep -i tokudb Packages > /dev/null ; then
		    # For the sake of installing TokuDB, disable hugepages
		    sudo sh -c "echo never > /sys/kernel/mm/transparent_hugepage/enabled" || true
		  fi
		  ;;
		deps)
		  package_list="mariadb-server mariadb-client mariadb-common mariadb-test mysql-common libmysqlclient18"
		  ;;
		server)
		  package_list=mariadb-server
		  ;;
		columnstore)
		  if ! grep columnstore Packages > /dev/null ; then
		    echo "Upgrade warning: Columnstore was not found in packages, the test will not be run"
		    exit
		  fi
		  package_list="mariadb-server "`grep -B 1 'Source: mariadb-' Packages | grep 'Package:' | grep 'columnstore' | awk '{print $2}' | sort | uniq | xargs`
		  ;;
		*)
		  echo "ERROR: unknown test mode: $test_mode"
		  exit 1
		esac
		echo "Package_list: $package_list"
		#======================================================================
		# Prepare apt source configuration for installation of the last release
		#======================================================================
		sudo sh -c "echo 'deb [trusted=yes] http://mirror.netinch.com/pub/mariadb/repo/$prev_major_version/$dist_name $version_name main' > /etc/apt/sources.list.d/mariadb_upgrade.list"
		# We need to pin directory to ensure that installation happens from MariaDB repo
		# rather than from the default distro repo
		sudo sh -c "echo 'Package: *' > /etc/apt/preferences.d/release"
		sudo sh -c "echo 'Pin: origin mirror.netinch.com' >> /etc/apt/preferences.d/release"
		sudo sh -c "echo 'Pin-Priority: 1000' >> /etc/apt/preferences.d/release"
		sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup
		sudo sh -c 'grep -v "^deb .*file" /etc/apt/sources.list.backup | grep -v "^deb-src .*file" > /etc/apt/sources.list'
		# Sometimes apt-get update fails because the repo is being updated.
		res=1
		for i in 1 2 3 4 5 6 7 8 9 10 ; do
		  if sudo apt-get update ; then
		    res=0
		    break
		  fi
		  echo "Upgrade warning: apt-get update failed, retrying ($i)"
		  sleep 10
		done
		if [[ $res -ne 0 ]] ; then
		  echo "ERROR: apt-get update failed"
		  exit $res
		fi
		function get_columnstore_logs () {
		  if [[ "$test_mode" == "columnstore" ]] ; then
		    echo "Storing Columnstore logs in columnstore_logs"
		    set +ex
		    # It is done in such a weird way, because Columnstore currently makes its logs hard to read
		    for f in `sudo ls /var/log/mariadb/columnstore | xargs` ; do
		      f=/var/log/mariadb/columnstore/$f
		      echo "----------- $f -----------" >> /home/buildbot/columnstore_logs
		      sudo cat $f 1>> /home/buildbot/columnstore_logs 2>&1
		    done
		    for f in /tmp/columnstore_tmp_files/* ; do
		      echo "----------- $f -----------" >> /home/buildbot/columnstore_logs
		      sudo cat $f >> /home/buildbot/columnstore_logs 2>&1
		    done
		  fi
		}
		#=========================
		# Install previous release
		#=========================
		# Debian installation/upgrade/startup always attempts to execute mysql_upgrade, and
		# also run mysqlcheck and such. Due to MDEV-14622, they are subject to race condition,
		# and can be executed later or even omitted.
		# We will wait till they finish, to avoid any clashes with SQL we are going to execute
		function wait_for_mysql_upgrade () {
		  set +x
		  res=1
		  for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ; do
		    if ps -ef | grep -iE 'mysql_upgrade|mysqlcheck|mysqlrepair|mysqlanalyze|mysqloptimize|mariadb-upgrade|mariadb-check' | grep -v grep ; then
		      sleep 2
		    else
		      res=0
		      break
		    fi
		  done
		  set -x
		  if [[ $res -ne 0 ]] ; then
		    echo "ERROR: mysql_upgrade or alike have not finished in reasonable time"
		  fi
		}
		sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get -o Dpkg::Options::=--force-confnew install --allow-unauthenticated -y $package_list"
		if [[ $? -ne 0 ]] ; then
		  echo "ERROR: Installation of a previous release failed, see the output above"
		  exit 1
		fi
		wait_for_mysql_upgrade
		if [ -n "$spider_package_list" ] ; then
		  sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get -o Dpkg::Options::=--force-confnew install --allow-unauthenticated -y $spider_package_list"
		  if [[ $? -ne 0 ]] ; then
		    echo "ERROR: Installation of Spider from the previous release failed, see the output above"
		    exit 1
		  fi
		  wait_for_mysql_upgrade
		fi
		# To avoid confusing errors in further logic, do an explicit check
		# whether the service is up and running
		if [[ "%(prop:systemdCapability)s" == "yes" ]] ; then
		  if ! sudo systemctl status mariadb --no-pager ; then
		    sudo journalctl -xe --no-pager
		    get_columnstore_logs
		    echo "ERROR: mariadb service didn't start properly after installation"
		    exit 1
		  fi
		fi
		if [[ "$test_mode" == "all" ]] && [[ "%(prop:branch)s" == *"10."[5-9]* ]] ; then
		  echo "Upgrade warning: Due to MDEV-23061, an extra server restart is needed"
		  sudo systemctl restart mariadb
		fi
		#================================================================
		# Check that the server is functioning and create some structures
		#================================================================
		if [[ "%(prop:branch)s" == *"10."[4-9]* ]] ; then
		# 10.4+ uses unix_socket by default
		  sudo mysql -e "set password=password('rootpass')"
		else
		# Even without unix_socket, on some of VMs the password might be not pre-created as expected. This command should normally fail.
		  mysql -uroot -e "set password = password('rootpass')" >> /dev/null 2>&1
		fi
		# All the commands below should succeed
		set -e
		mysql -uroot -prootpass -e "CREATE DATABASE db"
		mysql -uroot -prootpass -e "CREATE TABLE db.t_innodb(a1 SERIAL, c1 CHAR(8)) ENGINE=InnoDB; INSERT INTO db.t_innodb VALUES (1,'foo'),(2,'bar')"
		mysql -uroot -prootpass -e "CREATE TABLE db.t_myisam(a2 SERIAL, c2 CHAR(8)) ENGINE=MyISAM; INSERT INTO db.t_myisam VALUES (1,'foo'),(2,'bar')"
		mysql -uroot -prootpass -e "CREATE TABLE db.t_aria(a3 SERIAL, c3 CHAR(8)) ENGINE=Aria; INSERT INTO db.t_aria VALUES (1,'foo'),(2,'bar')"
		mysql -uroot -prootpass -e "CREATE TABLE db.t_memory(a4 SERIAL, c4 CHAR(8)) ENGINE=MEMORY; INSERT INTO db.t_memory VALUES (1,'foo'),(2,'bar')"
		mysql -uroot -prootpass -e "CREATE ALGORITHM=MERGE VIEW db.v_merge AS SELECT * FROM db.t_innodb, db.t_myisam, db.t_aria"
		mysql -uroot -prootpass -e "CREATE ALGORITHM=TEMPTABLE VIEW db.v_temptable AS SELECT * FROM db.t_innodb, db.t_myisam, db.t_aria"
		mysql -uroot -prootpass -e "CREATE PROCEDURE db.p() SELECT * FROM db.v_merge"
		mysql -uroot -prootpass -e "CREATE FUNCTION db.f() RETURNS INT DETERMINISTIC RETURN 1"
		if [[ "$test_mode" == "columnstore" ]] ; then
		  if ! mysql -uroot -prootpass -e "CREATE TABLE db.t_columnstore(a INT, c VARCHAR(8)) ENGINE=ColumnStore; SHOW CREATE TABLE db.t_columnstore; INSERT INTO db.t_columnstore VALUES (1,'foo'),(2,'bar')" ; then
		    get_columnstore_logs
		    exit 1
		  fi
		fi
		set +e
		#====================================================================================
		# Store information about server version and available plugins/engines before upgrade
		#====================================================================================
		if [[ "$test_mode" == "all" ]] ; then
		  # Due to MDEV-14560, we have to restart the server to get the full list of engines
		  # MDEV-14560 is fixed in 10.2
		  if [[ "$prev_major_version" != *"10."[2-9]* ]] ; then
		    case "%(prop:systemdCapability)s" in
		    yes)
		      sudo systemctl restart mariadb
		      ;;
		    no)
		      sudo /etc/init.d/mysql restart
		      ;;
		    esac
		  fi
		fi
		mysql -uroot -prootpass --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.old
		mysql -uroot -prootpass --skip-column-names -e "select engine, support, transactions, savepoints from information_schema.engines" | sort > /tmp/engines.old
		case "$prev_major_version" in
		5.5)
		  mysql -uroot -prootpass --skip-column-names -e "show plugins" | sort > /tmp/plugins.old
		  ;;
		10.[0-9])
		  mysql -uroot -prootpass --skip-column-names -e "select plugin_name, plugin_status, plugin_type, plugin_library, plugin_license from information_schema.all_plugins" | sort > /tmp/plugins.old
		  ;;
		*)
		  echo "ERROR: unknown major version: $prev_major_version"
		  exit 1
		  ;;
		esac
		# Store dependency information for old binaries/libraries:
		# - names starting with "mysql*" in the directory where mysqld is located;
		# - names starting with "mysql*" in the directory where mysql is located;
		# - everything in the plugin directories installed by any MariaDB packages
		set +x
		for i in `sudo which mysqld | sed -e 's/mysqld$/mysql\*/'` `which mysql | sed -e 's/mysql$/mysql\*/'` `dpkg-query -L \`dpkg -l | grep mariadb | awk '{print $2}' | xargs\` | grep -v 'mysql-test' | grep -v '/debug/' | grep '/plugin/' | sed -e 's/[^\/]*$/\*/' | sort | uniq | xargs` ; do echo "=== $i"; ldd $i | sort | sed 's/(.*)//' ; done > /buildbot/ldd.old
		set -x
		#=========================================
		# Restore apt configuration for local repo
		#=========================================
		cd debs
		dpkg-scanpackages binary /dev/null | gzip -9c > binary/Packages.gz
		dpkg-scansources source /dev/null | gzip -9c > source/Sources.gz
		cd ..

		chmod -cR go+r debs

		if [ -e debs/binary/Packages.gz ] ; then
		    gunzip debs/binary/Packages.gz
		fi

		if [ "%(prop:needsGalera)s" == "yes" ]
		then
		  if ! wget http://yum.mariadb.org/galera/repo/deb/dists/$(version_name)
		  # Override the location of the library for versions which don't have their own
		  then
		    if [ "$dist_name" == "debian" ] ; then
		      sudo sh -c "echo 'deb [trusted=yes] http://yum.mariadb.org/galera/repo/deb stretch main' > /etc/apt/sources.list.d/galera-test-repo.list"
		    else
		      sudo sh -c "echo 'deb [trusted=yes] http://yum.mariadb.org/galera/repo/deb xenial main' > /etc/apt/sources.list.d/galera-test-repo.list"
		    fi
		  else
		    sudo sh -c "echo 'deb [trusted=yes] http://yum.mariadb.org/galera/repo/deb $version_name main' > /etc/apt/sources.list.d/galera-test-repo.list"
		  fi
		  # Update galera-test-repo.list to point at either the galera-3 or galera-4 test repo
		  case "%(prop:branch)s" in
		  *10.[1-3]*)
		    sudo sed -i 's/repo/repo3/' /etc/apt/sources.list.d/galera-test-repo.list
		    ;;
		  *10.[4-9]*)
		    sudo sed -i 's/repo/repo4/' /etc/apt/sources.list.d/galera-test-repo.list
		    ;;
		  esac
		fi

		if [[ "$test_mode" == "deps" ]] ; then
		  # For the dependency check, only keep the local repo
		  sudo sh -c "grep -iE 'deb .*file|deb-src .*file' /etc/apt/sources.list.backup > /etc/apt/sources.list"
		  sudo rm -rf /etc/apt/sources.list.d/*
		else
		  sudo cp /etc/apt/sources.list.backup /etc/apt/sources.list
		  sudo rm /etc/apt/sources.list.d/mariadb_upgrade.list
		fi
		sudo rm /etc/apt/preferences.d/release
		sudo sh -c "echo 'deb [trusted=yes] file:$(pwd)/debs binary/' >> /etc/apt/sources.list"
		# Sometimes apt-get update fails because the repo is being updated.
		res=1
		for i in 1 2 3 4 5 6 7 8 9 10 ; do
		  if sudo apt-get update ; then
		    res=0
		    break
		  fi
		  echo "Upgrade warning: apt-get update failed, retrying ($i)"
		  sleep 10
		done
		if [[ $res -ne 0 ]] ; then
		  echo "ERROR: apt-get update failed"
		  exit $res
		fi
		#=========================
		# Install the new packages
		#=========================
		sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get -o Dpkg::Options::=--force-confnew install --allow-unauthenticated -y $package_list"
		if [[ $? -ne 0 ]] ; then
		  echo "ERROR: Installation of the new packages failed, see the output above"
		  exit 1
		fi
		wait_for_mysql_upgrade
		if [ -n "$spider_package_list" ] ; then
		  sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get -o Dpkg::Options::=--force-confnew install --allow-unauthenticated -y $spider_package_list"
		  if [[ $? -ne 0 ]] ; then
		    echo "ERROR: Installation of the new Spider packages failed, see the output above"
		    exit 1
		  fi
		  wait_for_mysql_upgrade
		fi
		if [[ "$test_mode" == "columnstore" ]] ; then
		  echo "Upgrade warning: Due to MCOL-4120 an extra server restart is needed"
		  sudo systemctl restart mariadb
		fi
		#==========================================================
		# Wait till mysql_upgrade, mysqlcheck and such are finished
		#==========================================================
		# Again, wait till mysql_upgrade is finished, to avoid clashes;
		# and for non-stable versions, it might be necessary, so run it again
		# just in case it was omitted
		wait_for_mysql_upgrade
		# run mysql_upgrade for non GA branches
		if [[ "%(prop:major_version)s" == %(kw:development_branch)s ]] ; then
		  mysql_upgrade -uroot -prootpass
		fi
		#================================
		# Make sure that the new server is running
		#================================
		if mysql -uroot -prootpass -e "select @@version" | grep `cat /tmp/version.old` ; then
		  echo "ERROR: The server was not upgraded or was not restarted after upgrade"
		  exit 1
		fi
		#===================================================
		# Check that no old packages have left after upgrade
		#===================================================
		# The check is only performed for all-package-upgrade, because
		# for selective ones some implicitly installed packages might not be upgraded
		if [[ "$test_mode" == "all" ]] ; then
		  if dpkg -l | grep -iE 'mysql|maria' | grep `cat /tmp/version.old` ; then
		    echo "ERROR: Old packages have been found after upgrade"
		    exit 1
		  fi
		fi
		#=====================================================================================
		# Check that the server is functioning and previously created structures are available
		#=====================================================================================
		# All the commands below should succeed
		set -e
		mysql -uroot -prootpass -e "select @@version, @@version_comment"
		mysql -uroot -prootpass -e "SHOW TABLES IN db"
		mysql -uroot -prootpass -e "SELECT * FROM db.t_innodb; INSERT INTO db.t_innodb VALUES (3,'foo'),(4,'bar')"
		mysql -uroot -prootpass -e "SELECT * FROM db.t_myisam; INSERT INTO db.t_myisam VALUES (3,'foo'),(4,'bar')"
		mysql -uroot -prootpass -e "SELECT * FROM db.t_aria; INSERT INTO db.t_aria VALUES (3,'foo'),(4,'bar')"
		echo "If the next INSERT fails with a duplicate key error,"
		echo "it is likely because the server was not upgraded or restarted after upgrade"
		mysql -uroot -prootpass -e "SELECT * FROM db.t_memory; INSERT INTO db.t_memory VALUES (1,'foo'),(2,'bar')"
		mysql -uroot -prootpass -e "SELECT COUNT(*) FROM db.v_merge"
		mysql -uroot -prootpass -e "SELECT COUNT(*) FROM db.v_temptable"
		mysql -uroot -prootpass -e "CALL db.p()"
		mysql -uroot -prootpass -e "SELECT db.f()"
		if [[ "$test_mode" == "columnstore" ]] ; then
		  if ! mysql -uroot -prootpass -e "SELECT * FROM db.t_columnstore; INSERT INTO db.t_columnstore VALUES (3,'foo'),(4,'bar')" ; then
		    get_columnstore_logs
		    exit 1
		  fi
		fi
		set +e
		#===================================================================================
		# Store information about server version and available plugins/engines after upgrade
		#===================================================================================
		set -e
		mysql -uroot -prootpass --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.new
		mysql -uroot -prootpass --skip-column-names -e "select engine, support, transactions, savepoints from information_schema.engines" | sort > /tmp/engines.new
		case "%(prop:major_version)s" in
		5.5)
		  mysql -uroot -prootpass --skip-column-names -e "show plugins" | sort > /tmp/plugins.new
		  ;;
		10.[0-9])
		  mysql -uroot -prootpass --skip-column-names -e "select plugin_name, plugin_status, plugin_type, plugin_library, plugin_license from information_schema.all_plugins" | sort > /tmp/plugins.new
		  ;;
		esac
		# Dependency information for new binaries/libraries
		set +x
		for i in `sudo which mysqld | sed -e 's/mysqld$/mysql\*/'` `which mysql | sed -e 's/mysql$/mysql\*/'` `dpkg-query -L \`dpkg -l | grep mariadb | awk '{print $2}' | xargs\` | grep -v 'mysql-test' | grep -v '/debug/' | grep '/plugin/' | sed -e 's/[^\/]*$/\*/' | sort | uniq | xargs` ; do echo "=== $i"; ldd $i | sort | sed 's/(.*)//' ; done > /home/buildbot/ldd.new
		set -x
		case "%(prop:systemdCapability)s" in
		yes)
		  ls -l /lib/systemd/system/mariadb.service
		  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
		  ls -l /etc/init.d/mysql || true
		  systemctl --no-pager status mariadb.service
		  systemctl --no-pager status mariadb
		  systemctl --no-pager status mysql
		  systemctl --no-pager status mysqld
		  systemctl --no-pager is-enabled mariadb
		  ;;
		no)
		  echo "Steps related to systemd will be skipped"
		  ;;
		*)
		  echo "ERROR: It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
		  exit 1
		  ;;
		esac
		set +e
		# This output is for informational purposes
		diff -u /tmp/engines.old /tmp/engines.new
		diff -u /tmp/plugins.old /tmp/plugins.new
		case "%(prop:branch)s" in
		*%(kw:development_branch)s*)
		  echo "Until %(kw:development_branch)s is GA, the list of plugins/engines might be unstable, skipping the check"
		  ;;
		*)
		  # Only fail if there are any disappeared/changed engines or plugins
		  disappeared_or_changed=`comm -23 /tmp/engines.old /tmp/engines.new | wc -l`
		  if [[ $disappeared_or_changed -ne 0 ]] ; then
		    echo "ERROR: the lists of engines in the old and new installations differ"
		    exit 1
		  fi
                  if [[ "$test_type" == "minor" ]] ; then
		  	disappeared_or_changed=`comm -23 /tmp/plugins.old /tmp/plugins.new | wc -l`
		  	if [[ $disappeared_or_changed -ne 0 ]] ; then
		    		echo "ERROR: the lists of plugins in the old and new installations differ"
		    		exit 1
		  	fi
		  fi
		  set -o pipefail
		  if [ "$test_mode" == "all" ] ; then
		    set -o pipefail
		    if wget --timeout=20 --no-check-certificate https://raw.githubusercontent.com/MariaDB/mariadb.org-tools/master/buildbot/baselines/ldd.%(prop:major_version)s.${version_name}.${arch} -O /tmp/ldd.baseline > /dev/null ; then
		      ldd_baseline=/tmp/ldd.baseline
		    else
		      ldd_baseline=/buildbot/ldd.old
		    fi
		    diff -U1000 $ldd_baseline /home/buildbot/ldd.new | ( grep -E '^[-+]|^ =' || true )
		    if [[ $? -ne 0 ]] ; then
		      echo "ERROR: something has changed in the dependencies of binaries or libraries. See the diff above"
		      exit 1
		    fi
		  fi
		  set +o pipefail
		  ;;
		esac
		diff -u /tmp/version.old /tmp/version.new
		if [[ $? -eq 0 ]] ; then
		  echo "ERROR: server version has not changed after upgrade"
		  echo "It can be a false positive if we forgot to bump version after release,"
		  echo "or if it is a development tree is based on an old version"
		  exit 1
		fi
""", development_branch=DEVELOPMENT_BRANCH)])	

def getDebUpgradeStep():
     return Test(
        name="upgrade",
        haltOnFailure=True,
        description=["testing", "upgrade"],
        descriptionDone=["test", "upgrade"],
        command=["bash", "-xc", util.Interpolate("""
		set -ex

		dpkg -l | grep -iE 'maria|mysql|galera' || true
		old_ver=`dpkg -l | grep -iE 'mysql-server-|mariadb-server-' | head -1 | awk '{print $2}' | sed -e "s/.*\(mysql\|mariadb\)-server-\(5\.[567]\|10\.[0-9]\).*/\\1-\\2/"`

		# version_arch is "trusty-ppc64le" etc.
		version_arch='%(prop:version_name)s'
		dist_name='%(prop:dist_name)s'
		version_name='%(prop:version_name)s'

		sudo sh -c "echo 'deb [trusted=yes] file:$(pwd)/debs binary/' >> /etc/apt/sources.list"

		cd debs
		dpkg-scanpackages binary /dev/null | gzip -9c > binary/Packages.gz
		dpkg-scansources source /dev/null | gzip -9c > source/Sources.gz
		cd ..

		chmod -cR go+r debs

		if [ -e debs/binary/Packages.gz ] ; then
		    gunzip debs/binary/Packages.gz
		fi

		package_version=`ls debs/binary/mariadb-server_* | head -n 1 | sed -e 's/.*mariadb-server_\([0-9]*\.[0-9]*\.[0-9]*\).*/\\1/'`
		packages_to_install="mariadb-server mariadb-client libmariadbclient18"

		case "$old_ver-%(prop:mariadb_version)s" in
		mysql-5.7-10.[0-1])
		  echo "Upgrade warning: cannot downgrade from InnoDB 5.7 to 5.6"
		  exit
		  ;;
		mysql-5.[67]-5.5)
		  echo "Upgrade warning: cannot downgrade from InnoDB $old_ver to 5.5"
		  exit
		  ;;
		mariadb-10.[0-9]-5.5)
		  echo "Upgrade warning: Downgrade from $old_ver to 5.5 is not expected to work"
		  exit
		  ;;
		mariadb-10.[0-9]-10.[0-9])
		  if [[ "$old_ver" > "mariadb-%(prop:mariadb_version)s" ]] ; then
		    echo "Upgrade warning: Downgrade from $old_ver to %(prop:major_version)s is not expected to work"
		    exit
		  fi
		  if [[ "$old_ver" == "mariadb-%(prop:mariadb_version)s" ]]
		  then
		    # 3rd column is the package version, e.g. 10.1.23-9+deb9u1 vs 10.1.23+maria-1~stretch
		    if ! dpkg -l | grep -i mariadb-server- | head -1 | awk '{print $3}' | grep maria
		    then
		      echo "Upgrade warning: MDEV-11979 - cannot upgrade from Debian packages to MariaDB packages of the same major version"
		      exit
		    fi
		  fi
		  ;;
		mysql*-8.0-*)
		  echo "Upgrade warning: live upgrade from MySQL 8.0 is not supported, re-installation with dump/restore will be performed instead"
		  replace_incompatible_version=8.0
		  ;;
		*)
		  echo "Upgrade from MySQL $old_ver to MariaDB %(prop:mariadb_version)s will be attempted"
		  ;;
		esac
		if [ "%(prop:needsGalera)s" == "yes" ]
		then
		  if ! wget http://yum.mariadb.org/galera/repo/deb/dists/$(version_name)
		  # Override the location of the library for versions which don't have their own
		  then
		    if [ "$dist_name" == "debian" ] ; then
		      sudo sh -c "echo 'deb [trusted=yes] http://yum.mariadb.org/galera/repo/deb stretch main' > /etc/apt/sources.list.d/galera-test-repo.list"
		    else
		      sudo sh -c "echo 'deb [trusted=yes] http://yum.mariadb.org/galera/repo/deb xenial main' > /etc/apt/sources.list.d/galera-test-repo.list"
		    fi
		  else
		    sudo sh -c "echo 'deb [trusted=yes] http://yum.mariadb.org/galera/repo/deb $version_name main' > /etc/apt/sources.list.d/galera-test-repo.list"
		  fi
		  # Update galera-test-repo.list to point at either the galera-3 or galera-4 test repo
		  case "%(prop:branch)s" in
		  *10.[1-3]*)
		    sudo sed -i 's/repo/repo3/' /etc/apt/sources.list.d/galera-test-repo.list
		    ;;
		  *10.[4-9]*)
		    sudo sed -i 's/repo/repo4/' /etc/apt/sources.list.d/galera-test-repo.list
		    ;;
		  esac
		fi
		chmod -cR go+r debs
		# Sometimes apt-get update fails because the repo is being updated.
		for i in 1 2 3 4 5 6 7 8 9 10 ; do
		  if sudo apt-get update ; then
		    break
		  fi
		  echo "Upgrade warning: apt-get update failed, retrying ($i)"
		  sleep 10
		done
		# On some of VMs the password might be not pre-created as expected
		if mysql -uroot -e "set password = password('rootpass')" ; then
		  echo "The password has now been set"
		# Or, Debian packages local root might be using unix_socket plugin even with older versions.
		# Change it to the normal password authentication
		elif sudo mysql -uroot -e "update mysql.user set plugin = 'mysql_native_password'; flush privileges; set password = password('rootpass')" ; then
		  echo "The error above does not mean a test failure, it's one of expected outcomes"
		  echo "Unix socket authentication has been unset"
		else
		  echo "Errors above do not mean a test failure, it's one of expected outcomes"
		fi
		mysql -uroot -prootpass -e "CREATE DATABASE if not exists mytest"
		mysql -uroot -prootpass -e "use mytest; drop table if exists upgrade_test; create table upgrade_test (pk int primary key auto_increment, c char(64), v varchar(2048), d date, t time, dt datetime, ts timestamp) engine=InnoDB; begin; insert into upgrade_test values (null, 'test', 'test', date(now()), time(now()), now(), now());  insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; commit" --force
		mysql -uroot -prootpass --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.old
		old_version=`cat /tmp/version.old`
		# If the tested branch has the same version as the public repository,
		# upgrade won't work properly. For releasable branches, we will return an error
		# urging to bump the version number. For other branches, we will abort the test
		# with a warning (which nobody will read). This is done upon request from
		# development, as temporary branches might not be rebased in a timely manner
		if [ "$package_version" == "$old_version" ] ; then
		    echo "ERROR: Server version $package_version has already been released. Bump the version number!"
		    for b in %(kw:releasable_branches)s ; do
			if [ "$b" == "%(prop:branch)s" ] ; then
			    exit 1
			fi
		    done
		    echo "The test will be skipped, as upgrade will not work properly"
		    exit 0
		fi
		mysql -uroot -prootpass -e "CREATE DATABASE autoinc; CREATE TABLE autoinc.t_autoinc(a SERIAL) ENGINE=InnoDB SELECT 42 a"
		mysql -uroot -prootpass -e "CREATE TABLE autoinc.t_autoinc2(a SERIAL) ENGINE=InnoDB; BEGIN; INSERT INTO autoinc.t_autoinc2 VALUES (NULL),(NULL); ROLLBACK; SHOW CREATE TABLE autoinc.t_autoinc2 \G"
		if [ -n "$replace_incompatible_version" ] ; then
		  mysqldump -uroot -prootpass -E --triggers --routines --databases mytest autoinc > ~/mysql.dump
		# See notes in MDEV-21179, possibly more adjustments will have to be added here with time
		  sed -i 's/utf8mb4_0900_ai_ci/utf8mb4_general_ci/g' ~/mysql.dump
		  sudo apt-get purge -y `dpkg -l | grep mysql | grep "$replace_incompatible_version" | grep -E '^ii' | awk '{ print $2 }' | xargs`
		# On some reason apt-get purge for 8.0.18 doesn't remove /var/lib/mysql, maybe because mysql-common-5.8 remains
		  sudo mv /var/lib/mysql /var/lib/mysql.backup.$replace_incompatible_version || true
		fi
		sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y $packages_to_install"
		if [ -n "$replace_incompatible_version" ] ; then
		# Since we re-installed system tables, we need to adjust the password again
		  if sudo mysql -uroot -e "set password = password('rootpass')" ; then
		    echo "The password has now been set"
		  elif sudo mysql -uroot -e "update mysql.user set plugin = 'mysql_native_password'; flush privileges; set password = password('rootpass')" ; then
		    echo "The error above does not mean a test failure, it's one of expected outcomes"
		    echo "Unix socket authentication has been unset"
		  else
		    echo "Errors above do not mean a test failure, it's one of expected outcomes"
		  fi
		  mysql -uroot -prootpass < ~/mysql.dump
		fi
		mysql -uroot -prootpass --skip-column-names -e "INSERT INTO autoinc.t_autoinc SET a=NULL;  SELECT COUNT(*) Expect_2 FROM autoinc.t_autoinc WHERE a>=42"
		echo "Prior to MDEV-6076, the next SELECT would return 1. After MDEV-6076, it should be 3"
		mysql -uroot -prootpass --skip-column-names -e "INSERT INTO autoinc.t_autoinc2 VALUES (NULL); SELECT * FROM autoinc.t_autoinc2"
		mysql -uroot -prootpass -e "select @@version, @@version_comment"
		mysql -uroot -prootpass --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.new
		echo "The next line must show a difference between versions, otherwise it's a failure"
		echo "It can be a false positive if we forgot to bump version after release,"
		echo "or if the tree is based on an old version"
		! diff -u  /tmp/version.old  /tmp/version.new
		sudo cat /var/lib/mysql/mysql_upgrade_info | awk -F'-' '{ print $1 }' > /tmp/version.upgrade
		# mysql_upgrade is run automatically in deb packages
		# TODO: something weird goes on with mysql_upgrade, to be checked later
		#diff -u /tmp/version.new /tmp/version.upgrade
		cat /tmp/version.new
		cat /tmp/version.upgrade
		case "%(prop:systemdCapability)s" in
		yes)
		  ls -l /lib/systemd/system/mariadb.service
		  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
		  ls -l /etc/init.d/mysql || true
		  systemctl --no-pager status mariadb.service
		  systemctl --no-pager status mariadb
		  systemctl --no-pager status mysql
		  systemctl --no-pager status mysqld
		  systemctl --no-pager is-enabled mariadb
		  sudo systemctl --no-pager restart mariadb
		  systemctl --no-pager status mariadb
		  sudo journalctl -lxn 500 --no-pager | grep -iE 'mysqld|mariadb'
		  # It does not do the same as systemctl now
		  # /etc/init.d/mysql status
		  ;;
		no)
		  echo "Steps related to systemd will be skipped"
		  ;;
		*)
		  echo "It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
		  ;;
		esac
		mysql -uroot -prootpass -e "use mytest; select count(*) from upgrade_test"
		# Workaround for MDEV-20298
		# and for libdbd-mariadb-perl not "pretending" to be DBD:mysql
		#if ! dpkg -l | grep -E 'libdbd-mysql-perl|libdbd-mariadb-perl' ; then
		if ! dpkg -l | grep libdbd-mysql-perl ; then
		  sudo apt-get install -y libdbd-mysql-perl
		fi
		perl -MDBD::mysql -e print
""", releasable_branches=RELEASABLE_BRANCHES)])

def getDebInstallStep():
     return Test(
        name="install",
        haltOnFailure=True,
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        command=["bash", "-xc", util.Interpolate("""
		set -ex
		df -kT
		arch="amd64"
		dpkg -l | grep -iE 'maria|mysql|galera' || true
		# We want a clean installation here
		dpkg -l | grep -iE 'maria|mysql|galera' | awk '{print $2}' | xargs sudo apt-get remove -y
		dpkg -l | grep -iE 'maria|mysql|galera' | awk '{print $2}' | xargs sudo apt-get purge -y

		if [ '"%(prop:needsGalera)s"' == "yes" ]
		then
		  if ! wget http://yum.mariadb.org/galera/repo/deb/dists/"+version_name+"
		  # Override the location of the library for versions which don't have their own
		  then
		    if [ "$dist_name" == "debian" ] ; then
		      sudo sh -c "echo 'deb [trusted=yes] http://yum.mariadb.org/galera/repo/deb stretch main' > /etc/apt/sources.list.d/galera-test-repo.list"
		    else
		      sudo sh -c "echo 'deb [trusted=yes] http://yum.mariadb.org/galera/repo/deb xenial main' > /etc/apt/sources.list.d/galera-test-repo.list"
		    fi
		  else
		    sudo sh -c "echo 'deb [trusted=yes] http://yum.mariadb.org/galera/repo/deb "+version_name+" main' > /etc/apt/sources.list.d/galera-test-repo.list"
		  fi
		  # Update galera-test-repo.list to point at either the galera-3 or galera-4 test repo
		  case "%(prop:branch)s" in
		  *10.[1-3]*)
		    sudo sed -i 's/repo/repo3/' /etc/apt/sources.list.d/galera-test-repo.list
		    ;;
		  *10.[4-9]*)
		    sudo sed -i 's/repo/repo4/' /etc/apt/sources.list.d/galera-test-repo.list
		    ;;
		  esac
		fi

		sudo sh -c "echo 'deb [trusted=yes] file:$(pwd)/debs binary/' >> /etc/apt/sources.list"

		cd debs
		dpkg-scanpackages binary /dev/null | gzip -9c > binary/Packages.gz
		dpkg-scansources source /dev/null | gzip -9c > source/Sources.gz
		cd ..

		chmod -cR go+r debs

		if [ -e debs/binary/Packages.gz ] ; then
		    gunzip debs/binary/Packages.gz
		fi
		# Due to MDEV-14622 and its effect on Spider installation,
		# Spider has to be installed separately after the server
		package_list=`grep -B 1 'Source: mariadb-' debs/binary/Packages | grep 'Package:' | grep -vE 'galera|spider|columnstore' | awk '{print $2}' | xargs`
		if grep -i spider debs/binary/Packages > /dev/null ; then
		  spider_package_list=`grep -B 1 'Source: mariadb-' debs/binary/Packages | grep 'Package:' | grep 'spider' | awk '{print $2}' | xargs`
		fi
		if grep -i columnstore debs/binary/Packages > /dev/null ; then
		  if [[ "$arch" == "x86" ]] ; then
		    echo "Upgrade warning: Due to MCOL-4123, Columnstore won't be installed on x86"
		  else
		    columnstore_package_list=`grep -B 1 'Source: mariadb-' debs/binary/Packages | grep 'Package:' | grep 'columnstore' | awk '{print $2}' | xargs`
		  fi
		fi
		# Sometimes apt-get update fails because the repo is being updated.
		for i in 1 2 3 4 5 6 7 8 9 10 ; do
		  if sudo apt-get update ; then
		    break
		  fi
		  echo "Upgrade warning: apt-get update failed, retrying ($i)"
		  sleep 10
		done
		sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y $package_list $columnstore_package_list"
		# MDEV-14622: Wait for mysql_upgrade running in the background to finish
		res=1
		for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ; do
		if ps -ef | grep -iE 'mysql_upgrade|mysqlcheck|mysqlrepair|mysqlanalyze|mysqloptimize|mariadb-upgrade|mariadb-check' | grep -v grep ; then
		  sleep 2
		else
		  res=0
		  break
		fi
		done
		if [[ $res -ne 0 ]] ; then
		  echo "Upgrade warning: mysql_upgrade or alike have not finished in reasonable time, different problems may occur"
		fi
		# To avoid confusing errors in further logic, do an explicit check
		# whether the service is up and running
		if [[ "%(prop:systemdCapability)s" == "yes" ]] ; then
		  if ! sudo systemctl status mariadb --no-pager ; then
		    sudo journalctl -xe --no-pager
		    echo "Upgrade warning: mariadb service isn't running properly after installation"
		    if echo $package_list | grep columnstore ; then
		      echo "It is likely to be caused by ColumnStore problems upon installation, getting the logs"
		      set +e
		      # It is done in such a weird way, because Columnstore currently makes its logs hard to read
		      for f in `sudo ls /var/log/mariadb/columnstore | xargs` ; do
			f=/var/log/mariadb/columnstore/$f
			echo "----------- $f -----------"
			sudo cat $f
		      done
		      for f in /tmp/columnstore_tmp_files/* ; do
			echo "----------- $f -----------"
			sudo cat $f
		      done
		    fi
		    echo "ERROR: mariadb service didn't start properly after installation"
		    exit 1
		  fi
		fi
		# Due to MDEV-14622 and its effect on Spider installation,
		# Spider has to be installed separately after the server
		if [ -n "$spider_package_list" ] ; then
		  sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y $spider_package_list"
		fi

		# Unix socket
		if [[ "%(prop:branch)s" == *"10."[4-9]* ]] ; then
  			sudo mysql -e "set password=password('rootpass')"
		fi
		mysql --verbose -uroot -prootpass -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test; create user galera identified by 'gal3ra123'; grant all on *.* to galera;"
		mysql -uroot -prootpass -e "select @@version"
		echo "Test for MDEV-18563, MDEV-18526"
		set +e
		case "%(prop:systemdCapability)s" in
		yes)
		  sudo systemctl stop mariadb
		  ;;
		no)
		  sudo /etc/init.d/mysql stop
		  ;;
		esac
		sleep 1
		sudo pkill -9 mysqld
		for p in /bin /sbin /usr/bin /usr/sbin /usr/local/bin /usr/local/sbin ; do
		  if test -x $p/mysql_install_db ; then
		    sudo $p/mysql_install_db --no-defaults --user=mysql --plugin-maturity=unknown
		  else
		    echo "$p/mysql_install_db does not exist"
		  fi
		done
		sudo mysql_install_db --no-defaults --user=mysql --plugin-maturity=unknown
		set +e
		## Install mariadb-test for further use
		#sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y mariadb-test"
		if dpkg -l | grep -i spider > /dev/null ; then
		  echo "Upgrade warning: Workaround for MDEV-22979, otherwise server hangs further in SST steps"
		  sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get remove --allow-unauthenticated -y mariadb-plugin-spider" || true
		  sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get purge --allow-unauthenticated -y mariadb-plugin-spider" || true
		fi
		if dpkg -l | grep -i columnstore > /dev/null ; then
		  echo "Upgrade warning: Workaround for a bunch of Columnstore bugs, otherwise mysqldump in SST steps fails when Columnstore returns errors"
		  sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get remove --allow-unauthenticated -y mariadb-plugin-columnstore" || true
		  sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get purge --allow-unauthenticated -y mariadb-plugin-columnstore" || true
		fi
""")])

####### FACTORY CODE

## f_tarball - create source tarball
f_tarball = util.BuildFactory()
f_tarball.addStep(steps.SetProperty(property="dockerfile", value=util.Interpolate("%(kw:url)s", url=dockerfile), description="dockerfile"))
f_tarball.addStep(steps.ShellCommand(command=["echo", " revision: ", util.Property('revision')]))
f_tarball.addStep(steps.GitHub(
  repourl=util.Property('repository'),
  mode='full',
  method='clobber',
  workdir='build/server',
  shallow=True,
  submodules=True
))
f_tarball.addStep(steps.Compile(command=["cmake","../server"], workdir='build/mkdist', description="cmake"))
f_tarball.addStep(steps.Compile(command=["make", "dist"], workdir='build/mkdist', description="make dist"))
f_tarball.addStep(steps.SetPropertyFromCommand(property="mariadb_version", command="basename mariadb-*.tar.gz .tar.gz", workdir="build/mkdist"))
f_tarball.addStep(steps.SetPropertyFromCommand(property="master_branch", command=util.Interpolate("echo " + "%(prop:mariadb_version)s" + " | cut -d'-' -f 2 | cut -d'.' -f 1,2")))
f_tarball.addStep(steps.ShellCommand(command=util.Interpolate("mkdir %(prop:buildnumber)s"), workdir="build/mkdist"))
f_tarball.addStep(steps.ShellCommand(command=util.Interpolate("mv %(prop:mariadb_version)s" +".tar.gz" + " %(prop:buildnumber)s"), workdir="build/mkdist"))
f_tarball.addStep(steps.SetPropertyFromCommand(command="ls -1 *", extract_fn=ls2list, workdir=util.Interpolate("build/mkdist/" + "%(prop:buildnumber)s")))
f_tarball.addStep(steps.DirectoryUpload(workersrc=util.Interpolate('%(prop:builddir)s' + '/build/mkdist/' + '%(prop:buildnumber)s'),
    masterdest=util.Interpolate('/srv/buildbot/packages/' + '%(prop:buildnumber)s'), url=util.Interpolate('https://ci.mariadb.org/' + "%(prop:buildnumber)s"), urlText="Download", doStepIf=hasFiles))
f_tarball.addStep(steps.Trigger(schedulerNames=['s_upstream_all'], waitForFinish=False, updateSourceStamp=False,
    set_properties={"tarbuildnum" : Property("buildnumber"), "mariadb_version" : Property("mariadb_version"), "master_branch" : Property("master_branch")},
    doStepIf=hasBuilders))
f_tarball.addStep(steps.SetPropertyFromCommand(command=util.Interpolate("echo " + "%(prop:master_branch)s" + "-staging"), property="staging_branch"))
f_tarball.addStep(steps.ShellSequence( commands=[
    util.ShellArg(command="git config --global user.email '" + config["private"]["gh_mdbci"]["email"] + "'"),
    util.ShellArg(command="git config --global user.name '" + config["private"]["gh_mdbci"]["name"] + "'"),
    util.ShellArg(command="git remote set-url origin https://" + config["private"]["gh_mdbci"]["access_token"] + ":x-oauth-basic@github.com/MariaDB/server"),
    util.ShellArg(command=util.Interpolate("git remote set-branches --add origin %(prop:staging_branch)s"), logfile="rebase"),
    util.ShellArg(command=util.Interpolate("git fetch origin %(prop:staging_branch)s && git checkout %(prop:staging_branch)s && git checkout %(prop:branch)s && git pull --unshallow"), logfile="rebase"),
    # check if there are new merges and if so do a merge, otherwise rebase
    util.ShellArg(command=util.Interpolate("if [[ $(git --no-pager log --merges %(prop:staging_branch)s..%(prop:branch)s) ]]; then git merge %(prop:staging_branch)s; else git rebase %(prop:staging_branch)s; fi"), logfile="rebase")],
    workdir="build/server", haltOnFailure="true", doStepIf=isStagingBranch))
f_tarball.addStep(steps.ShellSequence( commands=[
    util.ShellArg(command=util.Interpolate("git checkout " + "%(prop:staging_branch)s"), logfile="rebase"),
    util.ShellArg(command=util.Interpolate("git merge %(prop:branch)s"), logfile="rebase")], workdir="build/server", haltOnFailure="true", doStepIf=ifStagingSucceeding))
f_tarball.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))

## f_quick_build
f_quick_build = util.BuildFactory()
f_quick_build.addStep(steps.SetProperty(property="dockerfile", value=util.Interpolate("%(kw:url)s", url=dockerfile), description="dockerfile"))
f_quick_build.addStep(steps.ShellCommand(command="ls -la"))
f_quick_build.addStep(downloadSourceTarball())
f_quick_build.addStep(steps.ShellCommand(command="ls -la"))
f_quick_build.addStep(steps.ShellCommand(command=util.Interpolate("tar -xvzf /mnt/packages/%(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz --strip-components=1")))
f_quick_build.addStep(steps.ShellCommand(command="ls -la"))
# build steps
f_quick_build.addStep(steps.Compile(command=
    ["sh", "-c", util.Interpolate("export PATH=/usr/lib/ccache:/usr/lib64/ccache:$PATH && cmake . -DCMAKE_BUILD_TYPE=%(kw:build_type)s -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=%(kw:c_compiler)s -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER=%(kw:cxx_compiler)s -DPLUGIN_TOKUDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_SPIDER=NO -DPLUGIN_OQGRAPH=NO -DPLUGIN_PERFSCHEMA=%(kw:perf_schema)s -DPLUGIN_SPHINX=NO %(kw:additional_args)s && make -j%(kw:jobs)s package", perf_schema=util.Property('perf_schema', default='YES'), build_type=util.Property('build_type', default='RelWithDebInfo'), jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'), c_compiler=util.Property('c_compiler', default='gcc'), cxx_compiler=util.Property('cxx_compiler', default='g++'), additional_args=util.Property('additional_args', default='') )], env={'CCACHE_DIR':'/mnt/ccache'}, haltOnFailure="true"))

f_quick_build.addStep(steps.MTR(command=
    ["sh", "-c", util.Interpolate("cd mysql-test && exec perl mysql-test-run.pl --verbose-restart --force --retry=3 --max-save-core=1 --max-save-datadir=1 --max-test-fail=20 --mem --parallel=$(expr %(kw:jobs)s \* 2)", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], timeout=7200, haltOnFailure="true", parallel=mtrJobsMultiplier, dbpool=mtrDbPool, autoCreateTables=True))
## trigger packages
f_quick_build.addStep(steps.Trigger(schedulerNames=['s_packages'], waitForFinish=False, updateSourceStamp=False,
    set_properties={"tarbuildnum" : Property("tarbuildnum"), "mariadb_version" : Property("mariadb_version"), "master_branch" : Property("master_branch")}, doStepIf=hasAutobakes))
## trigger bigtest
f_quick_build.addStep(steps.Trigger(schedulerNames=['s_bigtest'], waitForFinish=False, updateSourceStamp=False,
    set_properties={"tarbuildnum" : Property("tarbuildnum"), "mariadb_version" : Property("mariadb_version"), "master_branch" : Property("master_branch")}, doStepIf=hasBigtest))
# create package and upload to master
f_quick_build.addStep(steps.SetPropertyFromCommand(command="basename mariadb-*-linux-*.tar.gz", property="mariadb_binary"), doStepIf=savePackage)
f_quick_build.addStep(steps.FileUpload(workersrc=util.Interpolate("%(prop:mariadb_binary)s"), masterdest=util.Interpolate('/srv/buildbot/packages/' + '%(prop:tarbuildnum)s' + "/" + '%(prop:buildername)s' + "/" + "%(prop:mariadb_binary)s"), mode=0o755, url=util.Interpolate('https://ci.mariadb.org/' + "%(prop:tarbuildnum)s" + "/" + '%(prop:buildername)s' + "/"), urlText="Download", doStepIf=savePackage))
f_quick_build.addStep(steps.ShellCommand(name="cleanup", command="rm -fr * .* 2> /dev/null", alwaysRun=True))

## f_32b_quick_build
f_32b_quick_build = util.BuildFactory()
f_32b_quick_build.addStep(steps.SetProperty(property="dockerfile", value=util.Interpolate("%(kw:url)s", url=dockerfile), description="dockerfile"))
f_32b_quick_build.addStep(downloadSourceTarball())
f_32b_quick_build.addStep(steps.ShellCommand(command=util.Interpolate("tar -xvzf /mnt/packages/%(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz --strip-components=1")))
# build steps
f_32b_quick_build.addStep(steps.Compile(command=
    ["sh", "-c", util.Interpolate("export PATH=/usr/lib/ccache:/usr/lib64/ccache:$PATH && cmake . -DCMAKE_SYSTEM_LIBRARY_PATH=/usr/lib/i386-linux-gnu/ -DCMAKE_LIBRARY_PATH=/usr/lib/i386-linux-gnu/ -DCMAKE_FIND_ROOT_PATH=/usr/lib/i386-linux-gnu -DCMAKE_LIBRARY_ARCHITECTURE=i386 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER=g++ -DWITH_EMBEDDED_SERVER=OFF -DWITH_SAFEMALLOC=OFF -DWITH_WSREP=OFF -DPLUGIN_ARCHIVE=NO -DPLUGIN_TOKUDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_SPIDER=NO -DPLUGIN_OQGRAPH=NO -DPLUGIN_CONNECT=NO -DPLUGIN_SPHINX=NO -DWITH_SSL=bundled -DWITH_ZLIB=system -DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32 && make -j%(kw:jobs)s package", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)') )], env={'CCACHE_DIR':'/mnt/ccache'}, haltOnFailure="true"))

f_32b_quick_build.addStep(steps.MTR(command=
    ["sh", "-c", util.Interpolate("cd mysql-test && exec perl mysql-test-run.pl --verbose-restart --force --retry=3 --max-save-core=1 --max-save-datadir=1 --max-test-fail=20 --mem --parallel=$(expr %(kw:jobs)s \* 2)", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], timeout=7200, haltOnFailure="true", parallel=mtrJobsMultiplier, dbpool=mtrDbPool, autoCreateTables=True))
# create package and upload to master
f_32b_quick_build.addStep(steps.SetPropertyFromCommand(command="basename mariadb-*-linux-*.tar.gz", property="mariadb_binary"))
f_32b_quick_build.addStep(steps.FileUpload(workersrc=util.Interpolate("%(prop:mariadb_binary)s"), masterdest=util.Interpolate('/srv/buildbot/packages/' + '%(prop:tarbuildnum)s' + "/" + '%(prop:buildername)s' + "/" + "%(prop:mariadb_binary)s"), mode=0o755, url=util.Interpolate('https://ci.mariadb.org/' + "%(prop:tarbuildnum)s" + "/" + '%(prop:buildername)s' + "/"), urlText="Download", doStepIf=savePackage))
f_32b_quick_build.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))

## f_asan_build
f_asan_build = util.BuildFactory()
f_asan_build.addStep(steps.SetProperty(property="dockerfile", value=util.Interpolate("%(kw:url)s", url=dockerfile), description="dockerfile"))
f_asan_build.addStep(downloadSourceTarball())
f_asan_build.addStep(steps.ShellCommand(command=util.Interpolate("tar -xvzf /mnt/packages/%(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz --strip-components=1")))
# build steps
f_asan_build.addStep(steps.ShellCommand(command='echo "leak:libtasn1\nleak:libgnutls\nleak:libgmp" > mysql-test/lsan.supp', doStepIf=filterBranch))
f_asan_build.addStep(steps.ShellCommand(command='cat mysql-test/lsan.supp', doStepIf=filterBranch))
f_asan_build.addStep(steps.Compile(command=
    ["sh", "-c", util.Interpolate('cmake . -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=clang-10 -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_FLAGS="-O2 -msse4.2 -Wno-unused-command-line-argument -fdebug-macro" -DCMAKE_CXX_FLAGS="-O2 -msse4.2 -Wno-unused-command-line-argument -fdebug-macro" -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=Debug -DWITH_ASAN=YES -DPLUGIN_TOKUDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_OQGRAPH=NO -DPLUGIN_ROCKSDB=NO -DPLUGIN_CONNECT=NO -DWITH_SAFEMALLOC=OFF -DWITH_ZLIB=bundled -DWITH_SSL=bundled -DWITH_PCRE=system && make -j%(kw:jobs)s package', jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], haltOnFailure="true"))
f_asan_build.addStep(steps.MTR(command=
    ["sh", "-c", util.Interpolate('cd mysql-test && MTR_FEEDBACK_PLUGIN=1 ASAN_OPTIONS="abort_on_error=1" LSAN_OPTIONS="print_suppressions=0,suppressions=`pwd`/lsan.supp" perl mysql-test-run.pl --verbose-restart --force --retry=3 --max-save-core=1 --max-save-datadir=1 --max-test-fail=20 --mem --parallel=$(expr %(kw:jobs)s \* 2)', jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], timeout=7200, haltOnFailure="true", parallel=mtrJobsMultiplier, dbpool=mtrDbPool, autoCreateTables=True))
f_asan_build.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))

## f_msan_build
f_msan_build = util.BuildFactory()
f_msan_build.addStep(steps.SetProperty(property="dockerfile", value=util.Interpolate("%(kw:url)s", url=dockerfile), description="dockerfile"))
f_msan_build.addStep(downloadSourceTarball())
f_msan_build.addStep(steps.ShellCommand(command=util.Interpolate("tar -xvzf /mnt/packages/%(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz --strip-components=1")))
# build steps
f_msan_build.addStep(steps.ShellCommand(command='ls /mariadb/llvm-toolchain-10-10.0.1/libc++msan/lib'))
f_msan_build.addStep(steps.Compile(command=
    ["sh", "-c", util.Interpolate('cmake -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=clang-10 -DCMAKE_CXX_COMPILER=clang++-10 -DCMAKE_C_FLAGS="-O2 -march=native -mtune=native -Wno-unused-command-line-argument -fdebug-macro" -DCMAKE_CXX_FLAGS="-stdlib=libc++ -O2 -march=native -mtune=native -Wno-unused-command-line-argument -fdebug-macro" -DWITH_EMBEDDED_SERVER=OFF -DWITH_UNIT_TESTS=OFF -DCMAKE_BUILD_TYPE=Debug -DWITH_INNODB_BZIP2=OFF -DWITH_INNODB_LZ4=OFF -DWITH_INNODB_LZMA=OFF -DWITH_INNODB_LZO=OFF -DWITH_INNODB_SNAPPY=OFF -DPLUGIN_ARCHIVE=NO -DPLUGIN_TOKUDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_OQGRAPH=NO -DPLUGIN_ROCKSDB=NO -DPLUGIN_CONNECT=NO -DPLUGIN_SPIDER=NO -DWITH_SAFEMALLOC=OFF -DWITH_ZLIB=bundled -DWITH_SSL=bundled -DWITH_PCRE=bundled -DHAVE_LIBAIO_H=0 -DWITH_MSAN=ON && make -j%(kw:jobs)s package', jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], haltOnFailure="true"))
f_msan_build.addStep(steps.MTR(command=
    ["sh", "-c", util.Interpolate('cd mysql-test && LD_LIBRARY_PATH=/mariadb/llvm-toolchain-10-10.0.1/libc++msan/lib MSAN_OPTIONS=abort_on_error=1 ./mtr --big-test --force --retry=0 --parallel=$(expr %(kw:jobs)s \* 2)', jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], timeout=7200, haltOnFailure="true", parallel=mtrJobsMultiplier, dbpool=mtrDbPool, autoCreateTables=True))
f_msan_build.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))

## f_valgrind_build
f_valgrind_build = util.BuildFactory()
f_valgrind_build.addStep(steps.SetProperty(property="dockerfile", value=util.Interpolate("%(kw:url)s", url=dockerfile), description="dockerfile"))
f_valgrind_build.addStep(downloadSourceTarball())
f_valgrind_build.addStep(steps.ShellCommand(command=util.Interpolate("tar -xvzf /mnt/packages/%(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz --strip-components=1")))
# build steps
f_valgrind_build.addStep(steps.Compile(command=
    ["sh", "-c", util.Interpolate('cmake . -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DENABLE_ASSEMBLER=1 -DWITH_EXTRA_CHARSETS=complex -DENABLE_THREAD_SAFE_CLIENT=1 -DWITH_BIG_TABLES=1 -DWITH_PLUGIN_ARIA=1 -DWITH_ARIA_TMP_TABLES=1 -DWITH_JEMALLOC=NO=1 -DCMAKE_BUILD_TYPE=Debug -DSECURITY_HARDENED=OFF -DWITH_VALGRIND=1 -DWITH_SSL=bundled -DWITH_MAX=AUTO -DWITH_EMBEDDED_SERVER=1 -DWITH_LIBEVENT=bundled -DPLUGIN_PLUGIN_FILE_KEY_MANAGEMENT=NO -DPLUGIN_ROCKSDB=DYNAMIC -DPLUGIN_TEST_SQL_DISCOVERY=DYNAMIC -DPLUGIN_TOKUDB=NO -DPLUGIN_ROCKSDB=NO -DENABLE_LOCAL_INFILE=1 && make -j%(kw:jobs)s package', jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], haltOnFailure="true"))
f_valgrind_build.addStep(steps.MTR(command=
    ["sh", "-c", util.Interpolate('cd mysql-test && perl mysql-test-run.pl --valgrind-mysqld --valgrind-option=--leak-check=summary --force --retry=0 --max-save-core=1 --max-save-datadir=1 --max-test-fail=20 --mem --parallel=$(expr %(kw:jobs)s \* 2)', jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], timeout=7200, haltOnFailure="true", parallel=mtrJobsMultiplier, dbpool=mtrDbPool, autoCreateTables=True))
f_valgrind_build.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))

## f_big_test
f_big_test = util.BuildFactory()
f_big_test.addStep(steps.SetProperty(property="dockerfile", value=util.Interpolate("%(kw:url)s", url=dockerfile), description="dockerfile"))
# get the source tarball and extract it
f_big_test.addStep(steps.FileDownload(mastersrc=util.Interpolate("/srv/buildbot/packages/" + "%(prop:tarbuildnum)s" + "/" + "%(prop:mariadb_version)s" + ".tar.gz"),
    workerdest=util.Interpolate("%(prop:mariadb_version)s" + ".tar.gz")))
f_big_test.addStep(steps.ShellCommand(command=util.Interpolate("tar -xvzf " + "%(prop:mariadb_version)s" + ".tar.gz --strip-components=1")))
# build steps
f_big_test.addStep(steps.Compile(command=
    ["sh", "-c", util.Interpolate("export PATH=/usr/lib/ccache:/usr/lib64/ccache:$PATH && cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo  -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DPLUGIN_ROCKSDB=NO -DPLUGIN_TOKUDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_SPIDER=NO -DPLUGIN_OQGRAPH=NO -DPLUGIN_SPHINX=NO && make -j%(kw:jobs)s VERBOSE=1 package", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], env={'CCACHE_DIR':'/mnt/ccache'}))
f_big_test.addStep(steps.MTR(command=
    ["sh", "-c", util.Interpolate("cd mysql-test && exec perl mysql-test-run.pl --verbose-restart --force --retry=3 --max-save-core=1 --max-save-datadir=1 --max-test-fail=20 --big --big --mem --parallel=$(expr %(kw:jobs)s \* 2) --skip-test=archive.archive-big", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], timeout=10800, parallel=mtrJobsMultiplier))
# create package and upload to master
f_big_test.addStep(steps.SetPropertyFromCommand(command="basename mariadb-*-linux-*.tar.gz", property="mariadb_binary"))
f_big_test.addStep(steps.FileUpload(workersrc=util.Interpolate("%(prop:mariadb_binary)s"), masterdest=util.Interpolate('/srv/buildbot/packages/' + '%(prop:tarbuildnum)s' + "/" + '%(prop:buildername)s' + "/" + "%(prop:mariadb_binary)s"), mode=0o755, url=util.Interpolate('https://ci.mariadb.org/' + "%(prop:tarbuildnum)s" + "/" + '%(prop:buildername)s' + "/"), urlText="Download", doStepIf=savePackage))
f_big_test.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))

## f_full_test
f_full_test = util.BuildFactory()
f_full_test.addStep(steps.SetProperty(property="dockerfile", value=util.Interpolate("%(kw:url)s", url=dockerfile), description="dockerfile"))
# get the source tarball and extract it
f_full_test.addStep(steps.FileDownload(mastersrc=util.Interpolate("/srv/buildbot/packages/" + "%(prop:tarbuildnum)s" + "/" + "%(prop:mariadb_version)s" + ".tar.gz"),
    workerdest=util.Interpolate("%(prop:mariadb_version)s" + ".tar.gz")))
f_full_test.addStep(steps.ShellCommand(command=util.Interpolate("tar -xvzf " + "%(prop:mariadb_version)s" + ".tar.gz --strip-components=1")))
# build steps
f_full_test.addStep(steps.Compile(command=
    ["sh", "-c", util.Interpolate("export PATH=/usr/lib/ccache:/usr/lib64/ccache:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DWITH_SSL=system -DWITH_JEMALLOC=auto -DWITH_EMBEDDED_SERVER=1 -DHAVE_EMBEDDED_PRIVILEGE_CONTROL=1 -DWITH_LIBARCHIVE=ON -Wno-dev && make -j%(kw:jobs)s VERBOSE=1 package", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], env={'CCACHE_DIR':'/mnt/ccache'}))
f_full_test.addStep(steps.MTR(name="test emb", command=
    ["sh", "-c", util.Interpolate("cd mysql-test && MTR_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl  --verbose-restart --force --retry=3 --max-save-core=0 --max-save-datadir=1 --mem --embedded-server --parallel=$(expr %(kw:jobs)s \* 2)", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], timeout=10800, parallel=mtrJobsMultiplier))
f_full_test.addStep(steps.MTR(name="test n", command=
    ["sh", "-c", util.Interpolate("cd mysql-test && MTR_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl  --verbose-restart --force --retry=3 --max-save-core=0 --max-save-datadir=1 --mem --parallel=$(expr %(kw:jobs)s \* 2)", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], timeout=10800, parallel=mtrJobsMultiplier))
f_full_test.addStep(steps.MTR(name="test p", command=
    ["sh", "-c", util.Interpolate("cd mysql-test && MTR_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl  --verbose-restart --force --retry=3 --max-save-core=0 --max-save-datadir=1 --mem --ps-protocol --parallel=$(expr %(kw:jobs)s \* 2)", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], timeout=10800, parallel=mtrJobsMultiplier))
f_full_test.addStep(steps.MTR(name="test ps-embedded", command=
    ["sh", "-c", util.Interpolate("cd mysql-test && MTR_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl  --verbose-restart --force --retry=3 --max-save-core=0 --max-save-datadir=1 --ps --embedded --mem --parallel=$(expr %(kw:jobs)s \* 2)", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], timeout=10800, parallel=mtrJobsMultiplier))
f_full_test.addStep(steps.MTR(name="test xtra", command=
    ["sh", "-c", util.Interpolate("cd mysql-test && MTR_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl  --verbose-restart --force --retry=3 --max-save-core=0 --max-save-datadir=1 --mem --suite=funcs_1,funcs_2,stress,jp --big --testcase-timeout=120 --mysqld=--open-files-limit=0 --mysqld=--log-warnings=1 --parallel=$(expr %(kw:jobs)s \* 2)", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], timeout=10800, parallel=mtrJobsMultiplier))
f_full_test.addStep(steps.MTR(name="test engines", command=
    ["sh", "-c", util.Interpolate("cd mysql-test && MTR_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl  --verbose-restart --force --retry=3 --max-save-core=0 --max-save-datadir=1 --mem --suite=spider,spider/bg,engines/funcs,engines/iuds --big --testcase-timeout=120 --mysqld=--open-files-limit=0 --mysqld=--log-warnings=1 --parallel=$(expr %(kw:jobs)s \* 2)", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], timeout=10800, parallel=mtrJobsMultiplier))
f_full_test.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))


## f_deb_autobake
f_deb_autobake= util.BuildFactory()
f_deb_autobake.addStep(steps.SetProperty(property="dockerfile", value=util.Interpolate("%(kw:url)s", url=dockerfile), description="dockerfile"))
f_deb_autobake.addStep(downloadSourceTarball())
f_deb_autobake.addStep(steps.ShellCommand(command=util.Interpolate("tar -xvzf /mnt/packages/%(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz --strip-components=1")))
# build steps
f_deb_autobake.addStep(steps.Compile(command=["debian/autobake-deb.sh"],
    env={'CCACHE_DIR':'/mnt/ccache', 'DEB_BUILD_OPTIONS':util.Interpolate('parallel=%(kw:jobs)s', jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))}, description="autobake-deb.sh"))
# upload binaries
f_deb_autobake.addStep(steps.SetPropertyFromCommand(command="ls -1 ../*.deb", extract_fn=ls2list))
f_deb_autobake.addStep(steps.ShellCommand(command="ls .."))
f_deb_autobake.addStep(steps.MultipleFileUpload(workersrcs=util.Property('packages'),
    masterdest=util.Interpolate('/srv/buildbot/packages/' + '%(prop:tarbuildnum)s' + '/' + '%(prop:buildername)s'), mode=0o755, url=util.Interpolate('https://ci.mariadb.org/' + "%(prop:tarbuildnum)s" + "/" + '%(prop:buildername)s' + "/"), doStepIf=lambda step: hasFiles(step) and savePackage(step)))
f_deb_autobake.addStep(steps.Trigger(schedulerNames=['s_install'], waitForFinish=False, updateSourceStamp=False,
    set_properties={"tarbuildnum" : Property("tarbuildnum"), "mariadb_version" : Property("mariadb_version"), "master_branch" : Property("master_branch"), "parentbuildername": Property("buildername")}, doStepIf=lambda step: hasInstalls(step) and savePackage(step) and hasFiles(step)))
f_deb_autobake.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))

## f_deb_install
f_deb_install = util.BuildFactory()
f_deb_install.addStep(downloadDebs())
f_deb_install.addStep(getDebInstallStep())
f_deb_install.addStep(steps.Trigger(schedulerNames=['s_upgrade'], waitForFinish=False, updateSourceStamp=False,
    set_properties={"tarbuildnum" : Property("tarbuildnum"), "mariadb_version" : Property("mariadb_version"), "master_branch" : Property("master_branch"), "parentbuildername": Property("parentbuildername")}, doStepIf=lambda step: hasUpgrades(step)))
f_deb_install.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))

## f_deb_upgrade
f_deb_upgrade = util.BuildFactory()
f_deb_upgrade.addStep(downloadDebs())
f_deb_upgrade.addStep(steps.SetPropertyFromCommand(name="major_version", property="major_version", command=util.Interpolate("sh -c \"echo '%(prop:branch)s' | sed -e \\\"s/.*\\\\(5\\\\.5\\\\|10\\\\.[0-9]\\\\).*/\\\\1/\\\"\"")))
f_deb_upgrade.addStep(getDebMinorUpgradeStep())
f_deb_upgrade.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))

## f_rpm_autobake
f_rpm_autobake= util.BuildFactory()
f_rpm_autobake.addStep(steps.SetProperty(property="dockerfile", value=util.Interpolate("%(kw:url)s", url=dockerfile), description="dockerfile"))
f_rpm_autobake.workdir=f_rpm_autobake.workdir + "/padding_for_CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX/"
f_rpm_autobake.addStep(downloadSourceTarball())
f_rpm_autobake.addStep(steps.ShellCommand(command=util.Interpolate("tar -xvzf /mnt/packages/%(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz --strip-components=1")))
# build steps
f_rpm_autobake.addStep(steps.Compile(command=
    ["sh", "-c", util.Interpolate("export PATH=/usr/lib/ccache:/usr/lib64/ccache:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DRPM=fedora28 -DWITH_JEMALLOC=auto -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache && make -j %(kw:jobs)s package", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], env={'CCACHE_DIR':'/mnt/ccache'}, description="make package"))
# list rpm contents
f_rpm_autobake.addStep(steps.ShellCommand(command=
    ['sh', '-c', 'for rpm in `ls -1`; do echo $rpm ; rpm -q --qf "[%{FILEMODES:perms} %{FILEUSERNAME} %{FILEGROUPNAME} .%-36{FILENAMES}\n]" $rpm; echo "------------------------------------------------"; done'], description="list rpm contents"))
# upload binaries
f_rpm_autobake.addStep(steps.SetPropertyFromCommand(command="ls -1 *.rpm", extract_fn=ls2list))
f_rpm_autobake.addStep(steps.MultipleFileUpload(workersrcs=util.Property('packages'),
    masterdest=util.Interpolate('/srv/buildbot/packages/' + '%(prop:tarbuildnum)s' + '/' + '%(prop:buildername)s'), mode=0o755, url=util.Interpolate('https://ci.mariadb.org/' + "%(prop:tarbuildnum)s" + "/" + '%(prop:buildername)s' + "/"), doStepIf=lambda step: hasFiles(step) and savePackage(step)))
f_rpm_autobake.addStep(steps.Trigger(schedulerNames=['s_install'], waitForFinish=False, updateSourceStamp=False,
    set_properties={"tarbuildnum" : Property("tarbuildnum"), "mariadb_version" : Property("mariadb_version"), "master_branch" : Property("master_branch"), "parentbuildername": Property("buildername")}, doStepIf=lambda step: hasInstalls(step) and savePackage(step) and hasFiles(step)))
f_rpm_autobake.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))

## f_rpm_install
f_rpm_install = util.BuildFactory()
f_rpm_install.addStep(downloadRpms())
f_rpm_install.addStep(getRpmInstallStep())
f_rpm_install.addStep(steps.Trigger(schedulerNames=['s_upgrade'], waitForFinish=False, updateSourceStamp=False,
    set_properties={"tarbuildnum" : Property("tarbuildnum"), "mariadb_version" : Property("mariadb_version"), "master_branch" : Property("master_branch"), "parentbuildername": Property("parentbuildername")}, doStepIf=lambda step: hasUpgrades(step)))
f_rpm_install.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))

## f_rpm_upgrade
f_rpm_upgrade = util.BuildFactory()
f_rpm_upgrade.addStep(steps.SetPropertyFromCommand(name="major_version", property="major_version", command=util.Interpolate("sh -c \"echo '%(prop:branch)s' | sed -e \\\"s/.*\\\\(5\\\\.5\\\\|10\\\\.[0-9]\\\\).*/\\\\1/\\\"\"")))
f_rpm_upgrade.addStep(downloadRpms())
f_rpm_upgrade.addStep(getRpmUpgradeStep())
f_rpm_upgrade.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))


## f_without_server
f_without_server = util.BuildFactory()
f_without_server.addStep(steps.SetProperty(property="dockerfile", value=util.Interpolate("%(kw:url)s", url=dockerfile), description="dockerfile"))
f_without_server.addStep(steps.ShellCommand(command="ls -la"))
f_without_server.addStep(downloadSourceTarball())
f_without_server.addStep(steps.ShellCommand(command="ls -la"))
f_without_server.addStep(steps.ShellCommand(command=util.Interpolate("tar -xvzf /mnt/packages/%(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz --strip-components=1")))
f_without_server.addStep(steps.ShellCommand(command="ls -la"))
# build steps
f_without_server.addStep(steps.Compile(command=
    ["sh", "-c", util.Interpolate("export PATH=/usr/lib/ccache:/usr/lib64/ccache:$PATH && mkdir -p ../builddir && cd ../builddir && cmake ${OLDPWD} -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=%(kw:c_compiler)s -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER=%(kw:cxx_compiler)s -DWITHOUT_SERVER=ON && cmake --build . --parrallel %(kw:jobs)s --target package", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'), c_compiler=util.Property('c_compiler', default='gcc'), cxx_compiler=util.Property('cxx_compiler', default='g++'))], env={'CCACHE_DIR':'/mnt/ccache'}, haltOnFailure="true"))
# create package and upload to master
f_without_server.addStep(steps.SetPropertyFromCommand(command="basename mariadb-*-linux-*.tar.gz", property="mariadb_binary"))
f_without_server.addStep(steps.FileUpload(workersrc=util.Interpolate("%(prop:mariadb_binary)s"), masterdest=util.Interpolate('/srv/buildbot/packages/' + '%(prop:tarbuildnum)s' + "/" + '%(prop:buildername)s' + "/" + "%(prop:mariadb_binary)s"), mode=0o755, url=util.Interpolate('https://ci.mariadb.org/' + "%(prop:tarbuildnum)s" + "/" + '%(prop:buildername)s' + "/"), urlText="Download", doStepIf=savePackage))
f_without_server.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))

## f_macos_10_13
'''
f_macos_10_13 = util.BuildFactory()
f_macos_10_13.addStep(steps.Git(repourl=util.Property('repository'), mode='incremental'))
f_macos_10_13.addStep(steps.Compile(command=
    ["sh", "-c", "cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_ASAN=ON -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl/ -DOPENSSL_LIBRARIES=/usr/local/opt/openssl/lib -DPLUGIN_TOKUDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_SPIDER=NO -DPLUGIN_OQGRAPH=NO -DPLUGIN_PERFSCHEMA=NO -DPLUGIN_SPHINX=NO && make -j$(getconf _NPROCESSORS_ONLN) VERBOSE=1"]))
f_macos_10_13.addStep(steps.MTR(command=
    ["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3  --max-save-core=1 --max-save-datadir=1 --parallel=$(getconf _NPROCESSORS_ONLN)"], timeout=7200))
'''

## f_windows
f_windows = util.BuildFactory()
f_windows.addStep(steps.SetProperty(property="dockerfile", value=util.Interpolate("%(kw:url)s", url=dockerfile), description="dockerfile"))
f_windows.addStep(steps.ShellCommand(command="dir"))
f_windows.addStep(steps.ShellCommand(
             name="fetch_tarball",
             description="fetching source tarball",
             descriptionDone="fetching source tarball...done",
             haltOnFailure=True,
             command=["powershell", "-command", "Start-BitsTransfer", "-Source", util.Interpolate("https://ci.mariadb.org/%(prop:tarbuildnum)s/%(prop:mariadb_version)s.tar.gz"), "-Destination", util.Interpolate("%(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz")]))
f_windows.addStep(steps.ShellCommand(name="unpack tarball", command=util.Interpolate("tar -xvzf %(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz --strip-components=1")))
f_windows.addStep(steps.Compile(name="cmake", command=util.Interpolate("C:\VCTools\Common7\Tools\VsDevCmd.bat -arch=%(kw:arch)s && cmake . -A %(kw:arch_cmake)s -DPLUGIN_ROCKSDB=NO -DMYSQL_MAINTAINER_MODE=ERR -Wno-dev", arch=util.Property('arch', default='x64'), arch_cmake=util.Property('arch_cmake', default='x64')))) 
f_windows.addStep(steps.Compile(name="compile", command=util.Interpolate("C:\VCTools\Common7\Tools\VsDevCmd.bat -arch=%(kw:arch)s && cmake --build . --config Debug", arch=util.Property('arch', default='x64')), timeout=7200))
f_windows.addStep(steps.MTR(name="test", command=util.Interpolate("C:\VCTools\Common7\Tools\VsDevCmd.bat -arch=%(kw:arch)s && cd mysql-test && perl mysql-test-run.pl  --verbose-restart --force  --testcase-timeout=100 --suite-timeout=100  --retry=3  --suite=main,innodb,plugins --parallel=4", timeout=7200, haltOnFailure="true", arch=util.Property('arch', default='x64')), parallel=mtrJobsMultiplier, dbpool=mtrDbPool, autoCreateTables=True))
f_windows.addStep(steps.ShellCommand(name="cleanup", command=["powershell", "-command", "Remove-Item", '"$pwd\*"', "-Recurse", "-Force"], alwaysRun=True))

## f_windows_msi
f_windows_msi = util.BuildFactory()
f_windows_msi.addStep(steps.SetProperty(property="dockerfile", value=util.Interpolate("%(kw:url)s", url=dockerfile), description="dockerfile"))
f_windows_msi.addStep(steps.ShellCommand(command="dir"))
f_windows_msi.addStep(steps.ShellCommand(
             name="fetch_tarball",
             description="fetching source tarball",
             descriptionDone="fetching source tarball...done",
             haltOnFailure=True,
             command=["powershell", "-command", "Start-BitsTransfer", "-Source", util.Interpolate("https://ci.mariadb.org/%(prop:tarbuildnum)s/%(prop:mariadb_version)s.tar.gz"), "-Destination", util.Interpolate("%(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz")]))
f_windows_msi.addStep(steps.ShellCommand(name="unpack tarball", command=util.Interpolate("tar -xvzf %(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz --strip-components=1")))
f_windows_msi.addStep(steps.Compile(name="cmake", command=util.Interpolate('C:\VCTools\Common7\Tools\VsDevCmd.bat -arch=%(kw:arch)s && cmake . -G "Visual Studio 16 2019" -A %(kw:arch_cmake)s  -DBUILD_CONFIG=mysql_release -DWITH_THIRD_PARTY=HeidiSQL -DWITH_EMBEDDED_SERVER=0 -DSIGNCODE=NO -DWITH_UNIT_TESTS=0 -DMYSQL_MAINTAINER_MODE=ERR', arch=util.Property('arch', default='x64'), arch_cmake=util.Property('arch_cmake', default='x64')))) 
f_windows_msi.addStep(steps.Compile(name="compile", command=util.Interpolate("C:\VCTools\Common7\Tools\VsDevCmd.bat -arch=%(kw:arch)s && cmake --build  .  --verbose --config RelWithDebInfo -- -m", arch=util.Property('arch', default='x64')), timeout=3600))
f_windows_msi.addStep(steps.Compile(name="package", command=util.Interpolate("C:\VCTools\Common7\Tools\VsDevCmd.bat -arch=%(kw:arch)s && cmake --build  .  --config RelWithDebInfo --target win_package && cmake --build  .  --config RelWithDebInfo --target MSI", arch=util.Property('arch', default='x64')), timeout=3600))
f_windows_msi.addStep(steps.MTR(name="test", command=util.Interpolate("C:\VCTools\Common7\Tools\VsDevCmd.bat -arch=%(kw:arch)s && cd mysql-test && perl mysql-test-run.pl  --verbose-restart --force  --testcase-timeout=100 --suite-timeout=100  --retry=3  --suite=main,innodb,plugins --parallel=4", arch=util.Property('arch', default='x64')), timeout=7200, haltOnFailure="true", parallel=mtrJobsMultiplier, dbpool=mtrDbPool, autoCreateTables=True))
# create package and upload to master
f_windows_msi.addStep(steps.SetPropertyFromCommand(command='dir /b | findstr /i "mariadb-.*.msi', property="mariadb_binary"))
f_windows_msi.addStep(steps.FileUpload(workersrc=util.Interpolate("%(prop:mariadb_binary)s"), masterdest=util.Interpolate('/srv/buildbot/packages/' + '%(prop:tarbuildnum)s' + "/" + '%(prop:buildername)s' + "/" + "%(prop:mariadb_binary)s"), mode=0o755, url=util.Interpolate('https://ci.mariadb.org/' + "%(prop:tarbuildnum)s" + "/" + '%(prop:buildername)s' + "/"), urlText="Download", doStepIf=savePackage))
f_windows_msi.addStep(steps.ShellCommand(name="cleanup", command=["powershell", "-command", "Remove-Item", '"$pwd\*"', "-Recurse", "-Force"], alwaysRun=True))


####### LOCKS

hz_bbw1_lock = util.MasterLock('hz_bbw1_lock', maxCount=5)
pc9_bbw1_lock = util.MasterLock('pc9_bbw1_lock', maxCount=1)
aarch_bbw1_lock = util.MasterLock('aarch_bbw1_lock', maxCount=1)
aarch_bbw2_lock = util.MasterLock('aarch_bbw2_lock', maxCount=1)
aarch_bbw3_lock = util.MasterLock('aarch_bbw3_lock', maxCount=1)
apexis_bbw1_lock = util.MasterLock('apexis_bbw1_lock', maxCount=1)
apexis_bbw2_lock = util.MasterLock('apexis_bbw2_lock', maxCount=1)
bg_bbw1_lock = util.MasterLock('bg_bbw1_lock', maxCount=3)
win_bbw1_lock = util.MasterLock('win_bbw1_lock', maxCount=1)
ubuntu_upgrade_bbw1_lock = util.MasterLock('ubuntu_upgrade_bbw1_lock', maxCount=1)
centos_upgrade_bbw1_lock = util.MasterLock('centos_upgrade_bbw1_lock', maxCount=1)

####### BUILDERS LIST
c['builders'] = []

'''
 c['builders'].append(
    util.BuilderConfig(name="macos-10-13",
      workernames=["shinnok-bbw1-macos"],
      factory=f_macos_10_13))
'''

c['builders'].append(
    util.BuilderConfig(name="tarball-docker",
      workernames=["hz-bbw1-docker-tarball-debian-9"],
      tags=["tar", "bake"],
      collapseRequests=True,
      nextBuild=nextBuild,
      factory=f_tarball))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1404",
      workernames=["hz-bbw1-docker-ubuntu-1404"],
      tags=["Ubuntu", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1404-deb-autobake",
      workernames=["hz-bbw1-docker-ubuntu-1404"],
      tags=["Ubuntu", "deb", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1604",
      workernames=["hz-bbw1-docker-ubuntu-1604"],
      tags=["Ubuntu", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1604-deb-autobake",
      workernames=["hz-bbw1-docker-ubuntu-1604"],
      tags=["Ubuntu", "deb", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1804",
      workernames=["hz-bbw1-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1804-deb-autobake",
      workernames=["hz-bbw1-docker-ubuntu-1804"],
      tags=["Ubuntu", "deb", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1804-deb-autobake-install",
      workernames=["buildbot-ubuntu1804"],
      tags=["Ubuntu", "deb", "install", "kvm"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting'), ubuntu_upgrade_bbw1_lock.access('counting')],
      properties={'systemdCapability': 'yes', 'needsGalera': 'yes'},
      factory=f_deb_install))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1804-deb-autobake-upgrade",
      workernames=["buildbot-ubuntu1804"],
      tags=["Ubuntu", "deb", "upgrade", "kvm"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting'), ubuntu_upgrade_bbw1_lock.access('counting')],
      properties={'systemdCapability': 'yes', 'needsGalera': 'yes', 'dist_name': 'ubuntu', 'version_name': 'bionic', 'arch': 'amd64', 'test_mode': 'server', "test_type": "major"},
      factory=f_deb_upgrade))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1804-deb-autobake-minor-upgrade",
      workernames=["buildbot-ubuntu1804"],
      tags=["Ubuntu", "deb", "upgrade", "kvm"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting'), ubuntu_upgrade_bbw1_lock.access('counting')],
      properties={'systemdCapability': 'yes', 'needsGalera': 'yes', 'dist_name': 'ubuntu', 'version_name': 'bionic', 'arch': 'amd64', 'test_mode': 'all', "test_type": "minor"},
      factory=f_deb_upgrade))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-2004",
      workernames=["bg-bbw1-docker-ubuntu-2004"],
      tags=["Ubuntu", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[bg_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-2004-deb-autobake",
      workernames=["bg-bbw1-docker-ubuntu-2004"],
      tags=["Ubuntu", "deb", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[bg_bbw1_lock.access('counting')],
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1804-bigtest",
      workernames=["bm-bbw1-docker-ubuntu-1804"],
      tags=["Ubuntu", "big", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      factory=f_big_test))

c['builders'].append(
    util.BuilderConfig(name="debian-9",
      workernames=["hz-bbw1-docker-debian-9"],
      tags=["Debian", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="debian-10",
      workernames=["bg-bbw1-docker-debian-10"],
      tags=["Debian", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[bg_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="rhel-8",
      workernames=["bg-bbw1-docker-rhel-8"],
      tags=["RHEL", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[bg_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="fedora-28",
      workernames=["hz-bbw1-docker-fedora-28"],
      tags=["Fedora", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="fedora-28-rpm-autobake",
      workernames=["hz-bbw1-docker-fedora-28"],
      tags=["Fedora", "rpm", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="fedora-29",
      workernames=["hz-bbw1-docker-fedora-29"],
      tags=["Fedora", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="fedora-29-rpm-autobake",
      workernames=["hz-bbw1-docker-fedora-29"],
      tags=["Fedora", "rpm", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="fedora-30",
      workernames=["hz-bbw1-docker-fedora-30"],
      tags=["Fedora", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="fedora-30-rpm-autobake",
      workernames=["hz-bbw1-docker-fedora-30"],
      tags=["Fedora", "rpm", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="fedora-31",
      workernames=["bg-bbw1-docker-fedora-31"],
      tags=["Fedora", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[bg_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="fedora-31-rpm-autobake",
      workernames=["bg-bbw1-docker-fedora-31"],
      tags=["Fedora", "rpm", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[bg_bbw1_lock.access('counting')],
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="fedora-32",
      workernames=["bg-bbw1-docker-fedora-32"],
      tags=["Fedora", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[bg_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="fedora-32-rpm-autobake",
      workernames=["bg-bbw1-docker-fedora-32"],
      tags=["Fedora", "rpm", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[bg_bbw1_lock.access('counting')],
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="centos-7",
      workernames=["hz-bbw1-docker-centos-7"],
      tags=["Centos", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="centos-7-rpm-autobake",
      workernames=["hz-bbw1-docker-centos-7"],
      tags=["Centos", "rpm", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="centos-7-rpm-autobake-install",
      workernames=["buildbot-centos7"],
      tags=["Centos", "rpm", "install"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      properties={'systemdCapability': 'no', 'needsGalera': 'yes', 'version_name': '7', 'arch': 'centos74-amd64'},
      factory=f_rpm_install))

c['builders'].append(
    util.BuilderConfig(name="centos-7-rpm-autobake-upgrade",
      workernames=["buildbot-centos7"],
      tags=["Centos", "rpm", "upgrade"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting'), centos_upgrade_bbw1_lock.access('counting')],
      properties={'systemdCapability': 'no', 'needsGalera': 'yes', 'version_name': 'centos7', 'arch': 'amd64', "test_type": "major", "test_mode": "server"},
      factory=f_rpm_upgrade))

c['builders'].append(
    util.BuilderConfig(name="centos-7-rpm-autobake-minor-upgrade",
      workernames=["buildbot-centos7"],
      tags=["Centos", "rpm", "upgrade"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting'), centos_upgrade_bbw1_lock.access('counting')],
      properties={'systemdCapability': 'no', 'needsGalera': 'yes', 'version_name': 'centos7', 'arch': 'amd64', "test_type": "minor", "test_mode": "server"},
      factory=f_rpm_upgrade))


c['builders'].append(
    util.BuilderConfig(name="centos-8",
      workernames=["bg-bbw1-docker-centos-8"],
      tags=["Centos", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[bg_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="centos-8-rpm-autobake",
      workernames=["bg-bbw1-docker-centos-8"],
      tags=["Centos", "rpm", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[bg_bbw1_lock.access('counting')],
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="opensuse-15",
      workernames=["hz-bbw1-docker-opensuse-15"],
      tags=["OpenSUSE", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="opensuse-42",
      workernames=["hz-bbw1-docker-opensuse-42"],
      tags=["OpenSUSE", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="fulltest-ubuntu-2004",
      workernames=["bg-bbw1-docker-ubuntu-2004"],
      tags=["Ubuntu", "full", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[bg_bbw1_lock.access('counting')],
      factory=f_full_test))

c['builders'].append(
    util.BuilderConfig(name="pc9-ubuntu-1804",
      workernames=["pc9-bbw1-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[pc9_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="pc9-ubuntu-1804-deb-autobake",
      workernames=["pc9-bbw1-docker-ubuntu-1804"],
      tags=["Ubuntu", "deb", "bake", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[pc9_bbw1_lock.access('counting')],
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="pc9-without-server-ubuntu-1804",
      workernames=["pc9-bbw1-docker-ubuntu-1804"],
      tags=["Ubuntu", "without-server", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[pc9_bbw1_lock.access('counting')],
      factory=f_without_server))

c['builders'].append(
    util.BuilderConfig(name="pc9-clang6-ubuntu-1804",
      workernames=["pc9-clang-bbw1-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "clang-6", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[pc9_bbw1_lock.access('counting')],
      properties={'c_compiler': 'clang-6.0', 'cxx_compiler': 'clang++-6.0', 'additional_args': '-DWITHOUT_ROCKSDB=True -DWITHOUT_CONNECT=True'},
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="pc9-clang10-ubuntu-1804",
      workernames=["pc9-clang-bbw1-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "clang-10", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[pc9_bbw1_lock.access('counting')],
      properties={'c_compiler': 'clang-10', 'cxx_compiler': 'clang++', 'additional_args': '-DWITHOUT_ROCKSDB=True -DWITHOUT_CONNECT=True'},
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1804-clang6",
      workernames=["fjord1-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "clang-6"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[apexis_bbw1_lock.access('counting')],
      properties={'c_compiler': 'clang-6.0', 'cxx_compiler': 'clang++-6.0'},
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="debug-ubuntu-1804",
      workernames=["fjord1-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "gcc", "debug"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[apexis_bbw1_lock.access('counting')],
      properties={'build_type': 'Debug'},
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1804-clang10",
      workernames=["fjord2-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "clang-10"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[apexis_bbw2_lock.access('counting')],
      properties={'c_compiler': 'clang-10', 'cxx_compiler': 'clang++'},
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="asan-ubuntu-1804-clang10",
      workernames=["fjord2-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "clang-10", "asan"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[apexis_bbw2_lock.access('counting')],
      factory=f_asan_build))

c['builders'].append(
    util.BuilderConfig(name="msan-ubuntu-1804-clang10",
      workernames=["bg-msan-clang-bbw1-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "clang-10", "msan"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[bg_bbw1_lock.access('counting')],
      factory=f_msan_build))

c['builders'].append(
    util.BuilderConfig(name="32bit-ubuntu-1804",
      workernames=["bg-32bit-bbw1-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "gcc", "32bit"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[bg_bbw1_lock.access('counting')],
      factory=f_32b_quick_build))

c['builders'].append(
    util.BuilderConfig(name="valgrind-ubuntu-1804",
      workernames=["bg-bbw1-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "gcc", "valgrind"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[bg_bbw1_lock.access('counting')],
      factory=f_valgrind_build))

c['builders'].append(
    util.BuilderConfig(name="aarch64-fedora-32",
      workernames=["aarch64-bbw2-docker-fedora-32"],
      tags=["Fedora", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[aarch_bbw2_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="aarch64-fedora-32-rpm-autobake",
      workernames=["aarch64-bbw2-docker-fedora-32"],
      tags=["Fedora", "rpm", "bake", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[aarch_bbw2_lock.access('counting')],
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="aarch64-centos-7",
      workernames=["aarch64-bbw2-docker-centos-7"],
      tags=["Centos", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[aarch_bbw2_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="aarch64-debian-10",
      workernames=["aarch64-bbw3-docker-debian-10"],
      tags=["Debian", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[aarch_bbw3_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="aarch64-debian-10-deb-autobake",
      workernames=["aarch64-bbw3-docker-debian-10"],
      tags=["Debian", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[aarch_bbw3_lock.access('counting')],
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="aarch64-rhel-7",
      workernames=["aarch64-bbw3-docker-rhel-7"],
      tags=["RHEL", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[aarch_bbw3_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="windows-1809",
      workernames=["bbw1-docker-windows-1809"],
      tags=["Windows", "quick"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=[win_bbw1_lock.access('counting')],
      factory=f_windows))

c['builders'].append(
    util.BuilderConfig(name="windows-packages-1809",
      workernames=["bbw1-docker-windows-1809"],
      tags=["Windows", "packages", "zip"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=[win_bbw1_lock.access('counting')],
      factory=f_windows_msi))

c['builders'].append(
    util.BuilderConfig(name="win32-1809",
      workernames=["bbw1-docker-windows-1809"],
      tags=["Windows", "quick"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=[win_bbw1_lock.access('counting')],
      properties={'arch': 'x86', 'arch_cmake': 'Win32'},
      factory=f_windows))

c['builders'].append(
    util.BuilderConfig(name="win32-packages-1809",
      workernames=["bbw1-docker-windows-1809"],
      tags=["Windows", "packages", "zip"],
      collapseRequests=True,
      nextBuild=nextBuild,
      locks=[win_bbw1_lock.access('counting')],
      properties={'arch': 'x86', 'arch_cmake': 'Win32'},
      factory=f_windows_msi))


# Add a Janitor configurator that removes old logs
c['configurators'] = [util.JanitorConfigurator(
    logHorizon=timedelta(weeks=4),
    hour=19,
    dayOfWeek=6
)]

c['www']['ui_default_config'] = { 
    'Grid.changeFetchLimit': 5,
    'Grid.buildFetchLimit': 50,
}
