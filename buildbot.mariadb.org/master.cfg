# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from buildbot.process.properties import Property, Properties
from buildbot.steps.shell import ShellCommand, Compile, Test, SetPropertyFromCommand
from buildbot.steps.mtrlogobserver import MTR, MtrLogObserver
from buildbot.steps.source.github import GitHub
from buildbot.process.remotecommand import RemoteCommand
from twisted.internet import defer
import sys
import docker
from datetime import timedelta

sys.setrecursionlimit(10000)

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Load the slave, database passwords and 3rd-party tokens from an external private file, so
# that the rest of the configuration can be public.
config = { "private": { } }
exec(open("master-private.cfg").read(), config, { })

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

builders_quick=["ubuntu-1404", "ubuntu-1604", "ubuntu-1804", "ubuntu-1804-clang6", "ubuntu-1804-clang10", "debian-9", "fedora-28", "fedora-29", "fedora-30", "centos-7", "opensuse-15", "opensuse-42", "pc9-ubuntu-1804", "pc9-clang6-ubuntu-1804", "pc9-clang10-ubuntu-1804", "aarch64-fedora-30", "aarch64-centos-7", "aarch64-debian-10", "aarch64-rhel-7", "windows-1809"]

builders_autobake=["centos-7-rpm-autobake", "fedora-28-rpm-autobake", "fedora-29-rpm-autobake", "fedora-30-rpm-autobake", "ubuntu-1404-deb-autobake", "ubuntu-1804-deb-autobake", "ubuntu-1604-deb-autobake"]

builders_big=["ubuntu-1804-bigtest"]

c['services'] = []
context = util.Interpolate("buildbot/%(prop:buildername)s")
gs = reporters.GitHubStatusPush(token=config["private"]["gh_mdbci"]["access_token"],
                                context=context,
                                startDescription='Build started.',
                                endDescription='Build done.',
                                verbose=True,
                                builders=["tarball-docker"] + builders_quick + builders_autobake)
c['services'].append(gs)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "MariaDB CI"
c['titleURL'] = "https://github.com/MariaDB/server"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "https://buildbot.mariadb.org/"

# minimalistic config to activate web UI
c['www'] = dict(port=8010, plugins=dict(waterfall_view={}, console_view={}, grid_view={}), custom_templates_dir='templates')

# Plain username auth
#c['www']['authz'] = util.Authz(allowRules=[util.AnyControlEndpointMatcher(role="admins")],
#                               roleMatchers=[util.RolesFromUsername(roles=["admins"], usernames=["admin"])])
#c['www']['auth'] = util.UserPasswordAuth({'admin': config["private"]["user_pass"]["admin"]})

# Github Auth, allow control for MariaDB affiliated accounts
c['www']['authz'] = util.Authz(
  allowRules=[
    util.AnyControlEndpointMatcher(role="MariaDB", defaultDeny=True)
  ],
  roleMatchers=[
    util.RolesFromGroups()
  ]
)
c['www']['auth'] = util.GitHubAuth(config["private"]["gh_mdbauth"]["client"], config["private"]["gh_mdbauth"]["secret"])

# Sponsor plugin
exec(open("sponsor.py").read())

# Custom plugin
exec(open("grid.py").read())

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    'db_url' : config["private"]["db_url"]
}

####### Disable net usage reports from being sent to buildbot.net
c['buildbotNetUsageData'] = None

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = []

# Normal workers

def mkWorker(name, **kwargs):
    return worker.Worker(name, config["private"]["worker_pass"][name], **kwargs)

hz_bbw1_worker = mkWorker("hz-bbw1-ubuntu1804")
c['workers'].append(hz_bbw1_worker)

# Docker workers

## hz-bbw1-docker
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-tarball-debian-9", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/debian-9.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'1G' },
                    properties={ 'jobs':4, 'save_packages':True }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-debian-9", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/debian-9.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':True }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-ubuntu-1404", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/ubuntu-1404.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':True }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-ubuntu-1604", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/ubuntu-1604.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':True }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-ubuntu-1804", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/ubuntu-1804.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':True }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-fedora-28", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/fedora-28.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':False }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-fedora-29", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/fedora-29.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':False }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-fedora-30", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/fedora-30.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':False }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-centos-7", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/centos-7.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':False }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-opensuse-15", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/opensuse-15.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':False }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-opensuse-42", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-hz-bbw1.pem', client_cert=('/srv/buildbot/tlscerts/cert-hz-bbw1.pem', '/srv/buildbot/tlscerts/key-hz-bbw1.pem')),
                    dockerfile=open("dockerfiles/opensuse-42.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':False }))

## apexis-bbw1-docker
c['workers'].append(worker.DockerLatentWorker("fjord1-docker-ubuntu-1804", None,
                    docker_host=config["private"]["docker_workers"]["apexis-bbw1-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-apexis1.pem', client_cert=('/srv/buildbot/tlscerts/cert-apexis1.pem', '/srv/buildbot/tlscerts/key-apexis1.pem')),
                    dockerfile=open("dockerfiles/clang-ubuntu-1804.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/opt/mariadb-buildbot/ccache:/mnt/ccache', '/opt/mariadb-buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':True }))

c['workers'].append(worker.DockerLatentWorker("fjord2-docker-ubuntu-1804", None,
                    docker_host=config["private"]["docker_workers"]["apexis-bbw2-docker"],
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-apexis2.pem', client_cert=('/srv/buildbot/tlscerts/cert-apexis2.pem', '/srv/buildbot/tlscerts/key-apexis2.pem')),
                    dockerfile=open("dockerfiles/clang-ubuntu-1804.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/opt/mariadb-buildbot/ccache:/mnt/ccache', '/opt/mariadb-buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':True }))

## pc9-bbw1-docker
c['workers'].append(worker.DockerLatentWorker("pc9-bbw1-docker-ubuntu-1804", None,
                    docker_host=config["private"]["docker_workers"]["pc9-bbw1-docker"],
                    dockerfile=open("dockerfiles/ppc-ubuntu-1804.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-pc9.pem', client_cert=('/srv/buildbot/tlscerts/cert-pc9.pem', '/srv/buildbot/tlscerts/key-pc9.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':False }))

c['workers'].append(worker.DockerLatentWorker("pc9-clang-bbw1-docker-ubuntu-1804", None,
                    docker_host=config["private"]["docker_workers"]["pc9-bbw1-docker"],
                    dockerfile=open("dockerfiles/ppc-clang-ubuntu-1804.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-pc9.pem', client_cert=('/srv/buildbot/tlscerts/cert-pc9.pem', '/srv/buildbot/tlscerts/key-pc9.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':7, 'save_packages':False }))

## aarch-bbw1-docker
c['workers'].append(worker.DockerLatentWorker("aarch64-bbw1-docker-fedora-30", None,
                    docker_host=config["private"]["docker_workers"]["aarch-bbw1-docker"],
                    dockerfile=open("dockerfiles/aarch-fedora-30.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-aarch64.pem', client_cert=('/srv/buildbot/tlscerts/cert-aarch64.pem', '/srv/buildbot/tlscerts/key-aarch64.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':8, 'save_packages':False }))

c['workers'].append(worker.DockerLatentWorker("aarch64-bbw1-docker-centos-7", None,
                    docker_host=config["private"]["docker_workers"]["aarch-bbw1-docker"],
                    dockerfile=open("dockerfiles/aarch64-centos-7.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-aarch64.pem', client_cert=('/srv/buildbot/tlscerts/cert-aarch64.pem', '/srv/buildbot/tlscerts/key-aarch64.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':8, 'save_packages':False }))

c['workers'].append(worker.DockerLatentWorker("aarch64-bbw1-docker-debian-10", None,
                    docker_host=config["private"]["docker_workers"]["aarch-bbw1-docker"],
                    dockerfile=open("dockerfiles/aarch64-debian-10.dockerfile").read(),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-aarch64.pem', client_cert=('/srv/buildbot/tlscerts/cert-aarch64.pem', '/srv/buildbot/tlscerts/key-aarch64.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':8, 'save_packages':False }))

c['workers'].append(worker.DockerLatentWorker("aarch64-bbw1-docker-rhel-7", None,
                    docker_host=config["private"]["docker_workers"]["aarch-bbw1-docker"],
                    dockerfile=open("dockerfiles/aarch64-rhel-7.dockerfile").read() % (config["private"]["rhel_sub"]["user"], config["private"]["rhel_sub"]["password"]),
                    tls=docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-aarch64.pem', client_cert=('/srv/buildbot/tlscerts/cert-aarch64.pem', '/srv/buildbot/tlscerts/key-aarch64.pem')),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages'],
                    properties={ 'jobs':8, 'save_packages':False }))



## windows-bbw1-docker
c['workers'].append(worker.DockerLatentWorker("bbw1-docker-windows-1809", None,
                    docker_host=config["private"]["docker_workers"]["windows-bbw1-docker"],
                    dockerfile=open("dockerfiles/windows.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    #volumes=['C:\packages:C:\packages'],
                    properties={ 'jobs':2, 'save_packages':False }))

## bm-bbw1-docker
c['workers'].append(worker.DockerLatentWorker("bm-bbw1-docker-ubuntu-1804", None,
                    docker_host=config["private"]["docker_workers"]["bm-bbw1-docker"],
                    dockerfile=open("dockerfiles/ubuntu-1804.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache'],
                    properties={ 'save_packages':False }))


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

####### GitHub hooks

# GitHub webhook receiver
c['www']['change_hook_dialects'] = {
        'github': {
                'secret': config["private"]["gh_secret"],
                'strict': True,
        }
}

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

branches_main=['5.5', '5.5-galera', '10.0', '10.0-galera', '10.1', '10.2', '10.3', '10.4', '10.5']
# The trees for which we save binary packages.
savedPackageBranches= ["5.5", "10.0", "10.1", "10.2", "10.3", "10.4",
                       "bb-*-release", "bb-10.2-compatibility", "st-*"]

# git branch filter using fnmatch
import fnmatch
def upstream_branch_fn(branch):
    return branch in branches_main or fnmatch.fnmatch(branch, 'bb-*') or fnmatch.fnmatch(branch, 'st-*') or fnmatch.fnmatch(branch, "refs/pull/*")
def staging_branch_fn(branch):
    return fnmatch.fnmatch(branch, 'st-*')
def fnmatch_any(s, list_of_patterns):
    return any(fnmatch.fnmatch(s, p) for p in list_of_patterns)

c['schedulers'] = []

# upstream scheduling
schedulerTarball = schedulers.SingleBranchScheduler(
    name="s_upstream_tarball",
    change_filter=util.ChangeFilter(repository="https://github.com/MariaDB/server", branch_fn=upstream_branch_fn),
    treeStableTimer=120,
    builderNames=["tarball-docker"])
c['schedulers'].append(schedulerTarball)

schedulerPlatforms = schedulers.Triggerable( name="s_upstream_all",
    builderNames=builders_quick)
c['schedulers'].append(schedulerPlatforms)

schedulerPackages = schedulers.Triggerable( name="s_packages",
    builderNames=builders_autobake)
c['schedulers'].append(schedulerPackages)

schedulerBigtests = schedulers.Triggerable( name="s_bigtest",
    builderNames=builders_big)
c['schedulers'].append(schedulerBigtests)

#--

# Other schedulers

# github.com/shinnok/server
c['schedulers'].append(schedulers.SingleBranchScheduler( name="s_shinnok_bb",
    change_filter=util.ChangeFilter(repository="https://github.com/shinnok/server", branch_re='bb-.*'),
    treeStableTimer=120,
    builderNames=["tarball-docker"]))

'''
c['schedulers'].append(schedulers.Triggerable( name="s_shinnok_all",
    builderNames=builders_quick))
'''
#--

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

# mariadb version supported platforms
supportedPlatforms = {}
supportedPlatforms["5.5"] =  ["centos-5","centos-6","centos-7","aarch64-centos-7","debian-7",                                                                                            "sles-11","sles-12","ubuntu-1404"]
supportedPlatforms["10.0"] = ["centos-5","centos-6","centos-7","aarch64-centos-7","debian-7","debian-8",                                                     "opensuse-42",              "sles-11","sles-12","ubuntu-1404","ubuntu-1604"]
supportedPlatforms["10.1"] = ["centos-5","centos-6","centos-7","aarch64-centos-7","debian-7","debian-8","debian-9","aarch64-debian-10","aarch64-rhel-7",                                          "opensuse-42",              "sles-11","sles-12","ubuntu-1404","ubuntu-1604","ubuntu-1804", "ubuntu-1804-clang6", "ubuntu-1804-clang10", "pc9-ubuntu-1804"]
supportedPlatforms["10.2"] = ["centos-5","centos-6","centos-7","aarch64-centos-7","debian-7","debian-8","debian-9","aarch64-debian-10","aarch64-rhel-7","fedora-27","fedora-28",                  "opensuse-42","opensuse-15","sles-11","sles-12","ubuntu-1404","ubuntu-1604","ubuntu-1804", "ubuntu-1804-clang6", "ubuntu-1804-clang10", "pc9-ubuntu-1804"]
supportedPlatforms["10.3"] = [           "centos-6","centos-7","aarch64-centos-7","debian-7","debian-8","debian-9","aarch64-debian-10","aarch64-rhel-7","fedora-27","fedora-28",                  "opensuse-42","opensuse-15","sles-11","sles-12","ubuntu-1404","ubuntu-1604","ubuntu-1804", "ubuntu-1804-clang6", "ubuntu-1804-clang10", "pc9-ubuntu-1804", "pc9-clang6-ubuntu-1804", "pc9-clang10-ubuntu-1804"]
supportedPlatforms["10.4"] = [           "centos-6","centos-7","aarch64-centos-7","debian-7","debian-8","debian-9","aarch64-debian-10","aarch64-rhel-7","fedora-28","fedora-29",                  "opensuse-42","opensuse-15","sles-11","sles-12","ubuntu-1404","ubuntu-1604","ubuntu-1804", "ubuntu-1804-clang6", "ubuntu-1804-clang10", "pc9-ubuntu-1804", "pc9-clang6-ubuntu-1804", "pc9-clang10-ubuntu-1804"]
supportedPlatforms["10.5"] = [           "centos-6","centos-7","aarch64-centos-7","debian-7","debian-8","debian-9","aarch64-debian-10","aarch64-rhel-7","fedora-29","fedora-30","aarch64-fedora-30","opensuse-42","opensuse-15","sles-11","sles-12","ubuntu-1604","ubuntu-1804", "ubuntu-1804-clang6", "ubuntu-1804-clang10", "pc9-ubuntu-1804", "pc9-clang6-ubuntu-1804", "pc9-clang10-ubuntu-1804", "windows-1809"]

# Check and set list of builders for branch
def hasBuilders(step):
    waitIfStaging(step)

    mBranch = step.getProperty("master_branch")
    if len(supportedPlatforms[mBranch]) < 1:
        return False

    platformBuilderNames = []
    for platform in supportedPlatforms[mBranch]:
        for builder in c['builders']:
            if builder.name == platform:
                platformBuilderNames.append(builder.name)
    if len(platformBuilderNames) < 1:
        return False
    platformBuilderNames.sort()
    schedulerPlatforms.builderNames = platformBuilderNames
    return True

# Check and set autobake builders for branch
def hasAutobakes(step):
    packagesBuilderNames = []
    for builder in c['builders']:
        if builder.name.startswith(str(step.getProperty("buildername"))) and builder.name.endswith("-autobake"):
            packagesBuilderNames.append(builder.name)
    if len(packagesBuilderNames) < 1:
        return False
    packagesBuilderNames.sort()
    schedulerPackages.builderNames = packagesBuilderNames
    return True

# Check and set bigtest builders for branch
def hasBigtest(step):
    bigtestBuilderNames = []
    for builder in c['builders']:
        if builder.name.startswith(str(step.getProperty("buildername"))) and builder.name.endswith("-bigtest"):
            bigtestBuilderNames.append(builder.name)
    if len(bigtestBuilderNames) < 1:
        return False
    bigtestBuilderNames.sort()
    schedulerBigtests.builderNames = bigtestBuilderNames
    return True

# Priority filter based on saved package branches
def nextBuild(bldr, requests):
    for r in requests:
        if hasattr(r, 'source') and fnmatch_any(r.source.branch, savedPackageBranches):
            return r
    return requests[0]

class FakeBuild(object):
    properties = Properties()

class FakeStep(object):
    build = FakeBuild()

@defer.inlineCallbacks
def shell(command, worker, builder):
    args = {
        'command': command,
        'logEnviron': False,
        'workdir': "/srv/buildbot/worker",
        'want_stdout': False,
        'want_stderr': False,
    }
    cmd = RemoteCommand('shell', args, stdioLogName=None)
    cmd.worker = worker
    yield cmd.run(FakeStep(), worker.conn, builder.name)
    return cmd.rc

@defer.inlineCallbacks
def canStartBuild(builder, wfb, request):
    worker=wfb.worker
    if worker.name != hz_bbw1_worker.name:
        return True
    # check worker load over the last 5 minutes
    rc = yield shell(
        'test "$(cut -d" " -f2 /proc/loadavg | cut -d. -f1)" -le "$(( $(nproc) / 2 ))"',
        worker, builder)
    if rc != 0:
        log.msg('loadavg is too high to take new builds',
                system=repr(worker))
        worker.putInQuarantine()
        return False

    worker.quarantine_timeout = 180
    worker.putInQuarantine()
    worker.resetQuarantine()
    return True

# Save packages for current branch?
def savePackage(step):
    return step.getProperty("save_packages") and fnmatch_any(step.getProperty("branch"), savedPackageBranches)

# ls2list gets the output of ls and returns a list with the files and directories
def ls2list(rc, stdout, stderr):
    lsFilenames = []

    for l in stdout.strip().split('\n'):
        if l != "":
            lsFilenames.append(l.strip())

    return { 'packages' : lsFilenames }

# checks if the list of files is empty
def hasFiles(step):
  if len(step.getProperty("packages")) < 1:
    return False
  else:
    return True

# check if branch is a staging branch
def isStagingBranch(step):
  if staging_branch_fn(step.getProperty("branch")):
    return True
  else:
    return False

# returns true if build is succeeding
def ifStagingSucceeding(step):
  if isStagingBranch(step):
    step.setProperty("build_results", step.build.results)
    return step.build.results in (SUCCESS, WARNINGS)
  else:
    return False

# set step's waitForFinish to True if staging branch
def waitIfStaging(step):
  if isStagingBranch(step):
    step.waitForFinish = True

def downloadSourceTarball():
    return ShellCommand(
             name="fetch_tarball",
             description="fetching source tarball",
             descriptionDone="fetching source tarball...done",
             haltOnFailure=True,
             command=["sh", "-xc", util.Interpolate("""
  d=/mnt/packages/
  f="%(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz"
  find $d -type f -mtime +2 | xargs -r rm -v
  flock "$d$f" wget -cO "$d$f" "https://ci.mariadb.org/%(prop:tarbuildnum)s/%(prop:mariadb_version)s.tar.gz"
""")])
# curl fails range-bytes download miserably due to https://github.com/curl/curl/issues/1163
# what I tried:
# flock "$d$f" curl --fail -C - -o "$d$f" "https://ci.mariadb.org/%(prop:tarbuildnum)s/%(prop:mariadb_version)s.tar.gz"
# ret=$? ; test $ret -eq 22 || test $ret -eq 0

@util.renderer
def mtrJobsMultiplier(props):
    jobs = props.getProperty('jobs', default=20)
    return jobs * 2

@util.renderer
def dockerfile(props):
    worker = props.getProperty('workername')
    return "https://github.com/MariaDB/mariadb.org-tools/tree/master/buildbot.mariadb.org/dockerfiles/" + "-".join(worker.split('-')[-2:]) + '.dockerfile'

####### FACTORY CODE

## f_tarball - create source tarball
f_tarball = util.BuildFactory()
f_tarball.addStep(steps.SetProperty(property="dockerfile", value=util.Interpolate("%(kw:url)s", url=dockerfile), description="dockerfile"))
f_tarball.addStep(steps.ShellCommand(command=["echo", " revision: ", util.Property('revision')]))
f_tarball.addStep(steps.GitHub(
  repourl=util.Property('repository'),
  mode='full',
  method='clobber',
  workdir='build/server',
  shallow=True,
  submodules=True
))
f_tarball.addStep(steps.Compile(command=["cmake","../server"], workdir='build/mkdist', description="cmake"))
f_tarball.addStep(steps.Compile(command=["make", "dist"], workdir='build/mkdist', description="make dist"))
f_tarball.addStep(steps.SetPropertyFromCommand(property="mariadb_version", command="basename mariadb-*.tar.gz .tar.gz", workdir="build/mkdist"))
f_tarball.addStep(steps.SetPropertyFromCommand(property="master_branch", command=util.Interpolate("echo " + "%(prop:mariadb_version)s" + " | cut -d'-' -f 2 | cut -d'.' -f 1,2")))
f_tarball.addStep(steps.ShellCommand(command=util.Interpolate("mkdir %(prop:buildnumber)s"), workdir="build/mkdist"))
f_tarball.addStep(steps.ShellCommand(command=util.Interpolate("mv %(prop:mariadb_version)s" +".tar.gz" + " %(prop:buildnumber)s"), workdir="build/mkdist"))
f_tarball.addStep(steps.SetPropertyFromCommand(command="ls -1 *", extract_fn=ls2list, workdir=util.Interpolate("build/mkdist/" + "%(prop:buildnumber)s")))
f_tarball.addStep(steps.DirectoryUpload(workersrc=util.Interpolate('%(prop:builddir)s' + '/build/mkdist/' + '%(prop:buildnumber)s'),
    masterdest=util.Interpolate('/srv/buildbot/packages/' + '%(prop:buildnumber)s'), url=util.Interpolate('https://ci.mariadb.org/' + "%(prop:buildnumber)s"), urlText="Download", doStepIf=hasFiles))
f_tarball.addStep(steps.Trigger(schedulerNames=['s_upstream_all'], waitForFinish=False, updateSourceStamp=False,
    set_properties={"tarbuildnum" : Property("buildnumber"), "mariadb_version" : Property("mariadb_version"), "master_branch" : Property("master_branch")},
    doStepIf=hasBuilders))
f_tarball.addStep(steps.SetPropertyFromCommand(command=util.Interpolate("echo " + "%(prop:master_branch)s" + "-staging"), property="staging_branch"))
f_tarball.addStep(steps.ShellSequence( commands=[
    util.ShellArg(command="git config --global user.email '" + config["private"]["gh_mdbci"]["email"] + "'"),
    util.ShellArg(command="git config --global user.name '" + config["private"]["gh_mdbci"]["name"] + "'"),
    util.ShellArg(command="git remote set-url origin https://" + config["private"]["gh_mdbci"]["access_token"] + ":x-oauth-basic@github.com/MariaDB/server"),
    util.ShellArg(command=util.Interpolate("git remote set-branches --add origin %(prop:staging_branch)s"), logfile="rebase"),
    util.ShellArg(command=util.Interpolate("git fetch origin %(prop:staging_branch)s && git checkout %(prop:staging_branch)s && git checkout %(prop:branch)s && git pull --unshallow"), logfile="rebase"),
    # check if there are new merges and if so do a merge, otherwise rebase
    util.ShellArg(command=util.Interpolate("if [[ $(git --no-pager log --merges %(prop:staging_branch)s..%(prop:branch)s) ]]; then git merge %(prop:staging_branch)s; else git rebase %(prop:staging_branch)s; fi"), logfile="rebase")],
    workdir="build/server", haltOnFailure="true", doStepIf=isStagingBranch))
f_tarball.addStep(steps.ShellSequence( commands=[
    util.ShellArg(command=util.Interpolate("git checkout " + "%(prop:staging_branch)s"), logfile="rebase"),
    util.ShellArg(command=util.Interpolate("git merge %(prop:branch)s"), logfile="rebase")], workdir="build/server", haltOnFailure="true", doStepIf=ifStagingSucceeding))
f_tarball.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))

## f_quick_build
f_quick_build = util.BuildFactory()
f_quick_build.addStep(steps.SetProperty(property="dockerfile", value=util.Interpolate("%(kw:url)s", url=dockerfile), description="dockerfile"))
f_quick_build.addStep(steps.ShellCommand(command="ls -la"))
f_quick_build.addStep(downloadSourceTarball())
f_quick_build.addStep(steps.ShellCommand(command="ls -la"))
f_quick_build.addStep(steps.ShellCommand(command=util.Interpolate("tar -xvzf /mnt/packages/%(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz --strip-components=1")))
f_quick_build.addStep(steps.ShellCommand(command="ls -la"))
# build steps
f_quick_build.addStep(steps.Compile(command=
    ["sh", "-c", util.Interpolate("export PATH=/usr/lib/ccache:/usr/lib64/ccache:$PATH && cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=%(kw:c_compiler)s -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER=%(kw:cxx_compiler)s -DPLUGIN_TOKUDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_SPIDER=NO -DPLUGIN_OQGRAPH=NO -DPLUGIN_PERFSCHEMA=NO -DPLUGIN_SPHINX=NO && make -j%(kw:jobs)s package", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'), c_compiler=util.Property('c_compiler', default='gcc'), cxx_compiler=util.Property('cxx_compiler', default='g++'))], env={'CCACHE_DIR':'/mnt/ccache'}, haltOnFailure="true"))

f_quick_build.addStep(steps.MTR(command=
    ["sh", "-c", util.Interpolate("cd mysql-test && exec perl mysql-test-run.pl --verbose-restart --force --retry=3 --max-save-core=1 --max-save-datadir=1 --max-test-fail=20 --mem --parallel=$(expr %(kw:jobs)s \* 2) --skip-test-list=unstable-tests", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], timeout=7200, haltOnFailure="true", parallel=mtrJobsMultiplier))
## trigger packages
f_quick_build.addStep(steps.Trigger(schedulerNames=['s_packages'], waitForFinish=False, updateSourceStamp=False,
    set_properties={"tarbuildnum" : Property("tarbuildnum"), "mariadb_version" : Property("mariadb_version"), "master_branch" : Property("master_branch")}, doStepIf=hasAutobakes))
## trigger bigtest
f_quick_build.addStep(steps.Trigger(schedulerNames=['s_bigtest'], waitForFinish=False, updateSourceStamp=False,
    set_properties={"tarbuildnum" : Property("tarbuildnum"), "mariadb_version" : Property("mariadb_version"), "master_branch" : Property("master_branch")}, doStepIf=hasBigtest))
# create package and upload to master
f_quick_build.addStep(steps.SetPropertyFromCommand(command="basename mariadb-*-linux-*.tar.gz", property="mariadb_binary"))
f_quick_build.addStep(steps.FileUpload(workersrc=util.Interpolate("%(prop:mariadb_binary)s"), masterdest=util.Interpolate('/srv/buildbot/packages/' + '%(prop:tarbuildnum)s' + "/" + '%(prop:buildername)s' + "/" + "%(prop:mariadb_binary)s"), mode=0o755, url=util.Interpolate('https://ci.mariadb.org/' + "%(prop:tarbuildnum)s" + "/" + '%(prop:buildername)s' + "/"), urlText="Download", doStepIf=savePackage))
f_quick_build.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))

## f_big_test
f_big_test = util.BuildFactory()
f_big_test.addStep(steps.SetProperty(property="dockerfile", value=util.Interpolate("%(kw:url)s", url=dockerfile), description="dockerfile"))
# get the source tarball and extract it
f_big_test.addStep(steps.FileDownload(mastersrc=util.Interpolate("/srv/buildbot/packages/" + "%(prop:tarbuildnum)s" + "/" + "%(prop:mariadb_version)s" + ".tar.gz"),
    workerdest=util.Interpolate("%(prop:mariadb_version)s" + ".tar.gz")))
f_big_test.addStep(steps.ShellCommand(command=util.Interpolate("tar -xvzf " + "%(prop:mariadb_version)s" + ".tar.gz --strip-components=1")))
# build steps
f_big_test.addStep(steps.Compile(command=
    ["sh", "-c", util.Interpolate("export PATH=/usr/lib/ccache:/usr/lib64/ccache:$PATH && cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo  -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DPLUGIN_ROCKSDB=NO -DPLUGIN_TOKUDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_SPIDER=NO -DPLUGIN_OQGRAPH=NO -DPLUGIN_PERFSCHEMA=NO -DPLUGIN_SPHINX=NO && make -j%(kw:jobs)s VERBOSE=1 package", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], env={'CCACHE_DIR':'/mnt/ccache'}))
f_big_test.addStep(steps.MTR(command=
    ["sh", "-c", util.Interpolate("cd mysql-test && exec perl mysql-test-run.pl --verbose-restart --force --retry=3 --max-save-core=1 --max-save-datadir=1 --max-test-fail=20 --big --big --mem --parallel=$(expr %(kw:jobs)s \* 2) --skip-test-list=unstable-tests --skip-test=archive.archive-big", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], timeout=10800, parallel=mtrJobsMultiplier))
# create package and upload to master
f_big_test.addStep(steps.SetPropertyFromCommand(command="basename mariadb-*-linux-*.tar.gz", property="mariadb_binary"))
f_big_test.addStep(steps.FileUpload(workersrc=util.Interpolate("%(prop:mariadb_binary)s"), masterdest=util.Interpolate('/srv/buildbot/packages/' + '%(prop:tarbuildnum)s' + "/" + '%(prop:buildername)s' + "/" + "%(prop:mariadb_binary)s"), mode=0o755, url=util.Interpolate('https://ci.mariadb.org/' + "%(prop:tarbuildnum)s" + "/" + '%(prop:buildername)s' + "/"), urlText="Download", doStepIf=savePackage))
f_big_test.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))

## f_deb_autobake
f_deb_autobake= util.BuildFactory()
f_deb_autobake.addStep(steps.SetProperty(property="dockerfile", value=util.Interpolate("%(kw:url)s", url=dockerfile), description="dockerfile"))
f_deb_autobake.addStep(downloadSourceTarball())
f_deb_autobake.addStep(steps.ShellCommand(command=util.Interpolate("tar -xvzf /mnt/packages/%(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz --strip-components=1")))
# build steps
f_deb_autobake.addStep(steps.Compile(command=["debian/autobake-deb.sh"],
    env={'CCACHE_DIR':'/mnt/ccache', 'DEB_BUILD_OPTIONS':util.Interpolate('parallel=%(kw:jobs)s', jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))}, description="autobake-deb.sh"))
# upload binaries
f_deb_autobake.addStep(steps.SetPropertyFromCommand(command="ls -1 ../*.deb", extract_fn=ls2list))
f_deb_autobake.addStep(steps.MultipleFileUpload(workersrcs=util.Property('packages'),
    masterdest=util.Interpolate('/srv/buildbot/packages/' + '%(prop:tarbuildnum)s' + '/' + '%(prop:buildername)s'), mode=0o755, url=util.Interpolate('https://ci.mariadb.org/' + "%(prop:tarbuildnum)s" + "/" + '%(prop:buildername)s' + "/"), doStepIf=lambda step: hasFiles(step) and savePackage(step)))
f_deb_autobake.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))

## f_rpm_autobake
f_rpm_autobake= util.BuildFactory()
f_rpm_autobake.addStep(steps.SetProperty(property="dockerfile", value=util.Interpolate("%(kw:url)s", url=dockerfile), description="dockerfile"))
f_rpm_autobake.workdir=f_rpm_autobake.workdir + "/padding_for_CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX/"
f_rpm_autobake.addStep(downloadSourceTarball())
f_rpm_autobake.addStep(steps.ShellCommand(command=util.Interpolate("tar -xvzf /mnt/packages/%(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz --strip-components=1")))
# build steps
f_rpm_autobake.addStep(steps.Compile(command=
    ["sh", "-c", util.Interpolate("export PATH=/usr/lib/ccache:/usr/lib64/ccache:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DRPM=fedora28 -DWITH_JEMALLOC=auto -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache && make -j %(kw:jobs)s package", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], env={'CCACHE_DIR':'/mnt/ccache'}, description="make package"))
# list rpm contents
f_rpm_autobake.addStep(steps.ShellCommand(command=
    ['sh', '-c', 'for rpm in `ls -1`; do echo $rpm ; rpm -q --qf "[%{FILEMODES:perms} %{FILEUSERNAME} %{FILEGROUPNAME} .%-36{FILENAMES}\n]" $rpm; echo "------------------------------------------------"; done'], description="list rpm contents"))
# upload binaries
f_rpm_autobake.addStep(steps.SetPropertyFromCommand(command="ls -1 *.rpm", extract_fn=ls2list))
f_rpm_autobake.addStep(steps.MultipleFileUpload(workersrcs=util.Property('packages'),
    masterdest=util.Interpolate('/srv/buildbot/packages/' + '%(prop:tarbuildnum)s' + '/' + '%(prop:buildername)s'), mode=0o755, url=util.Interpolate('https://ci.mariadb.org/' + "%(prop:tarbuildnum)s" + "/" + '%(prop:buildername)s' + "/"), doStepIf=lambda step: hasFiles(step) and savePackage(step)))
f_rpm_autobake.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))

## f_macos_10_13
'''
f_macos_10_13 = util.BuildFactory()
f_macos_10_13.addStep(steps.Git(repourl=util.Property('repository'), mode='incremental'))
f_macos_10_13.addStep(steps.Compile(command=
    ["sh", "-c", "cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_ASAN=ON -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl/ -DOPENSSL_LIBRARIES=/usr/local/opt/openssl/lib -DPLUGIN_TOKUDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_SPIDER=NO -DPLUGIN_OQGRAPH=NO -DPLUGIN_PERFSCHEMA=NO -DPLUGIN_SPHINX=NO && make -j$(getconf _NPROCESSORS_ONLN) VERBOSE=1"]))
f_macos_10_13.addStep(steps.MTR(command=
    ["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3  --max-save-core=1 --max-save-datadir=1 --parallel=$(getconf _NPROCESSORS_ONLN)"], timeout=7200))
'''

## f_windows
f_windows = util.BuildFactory()
f_windows.addStep(steps.SetProperty(property="dockerfile", value=util.Interpolate("%(kw:url)s", url=dockerfile), description="dockerfile"))
f_windows.addStep(steps.ShellCommand(command="dir"))
f_windows.addStep(steps.ShellCommand(
             name="fetch_tarball",
             description="fetching source tarball",
             descriptionDone="fetching source tarball...done",
             haltOnFailure=True,
             command=["powershell", "-command", "Start-BitsTransfer", "-Source", util.Interpolate("https://ci.mariadb.org/%(prop:tarbuildnum)s/%(prop:mariadb_version)s.tar.gz"), "-Destination", util.Interpolate("%(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz")]))
f_windows.addStep(steps.ShellCommand(command="dir"))
f_windows.addStep(steps.ShellCommand(command=util.Interpolate("tar -xvzf %(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz --strip-components=1")))
f_windows.addStep(steps.ShellCommand(command="dir"))
f_windows.addStep(steps.Compile(command="C:\Buildtools\Common7\Tools\VsDevCmd.bat -arch=amd64 && cmake . -A x64 -DPLUGIN_ROCKSDB=NO -DMYSQL_MAINTAINER_MODE=ERR -Wno-dev")) 
f_windows.addStep(steps.Compile(command="C:\Buildtools\Common7\Tools\VsDevCmd.bat -arch=amd64 && cmake --build . --config Debug", timeout=7200))
f_windows.addStep(steps.MTR(command="C:\Buildtools\Common7\Tools\VsDevCmd.bat -arch=amd64 && cd mysql-test && perl mysql-test-run.pl  --verbose-restart --force  --testcase-timeout=100 --suite-timeout=100  --retry=3  --suite=main,innodb,plugins --parallel=4", timeout=7200))
# TODO cleanup

####### LOCKS

hz_bbw1_lock = util.MasterLock('hz_bbw1_lock', maxCount=5)
aarch_bbw1_lock = util.MasterLock('aarch_bbw1_lock', maxCount=1)
apexis_bbw1_lock = util.MasterLock('apexis_bbw1_lock', maxCount=1)

####### BUILDERS LIST
c['builders'] = []

'''
 c['builders'].append(
    util.BuilderConfig(name="macos-10-13",
      workernames=["shinnok-bbw1-macos"],
      factory=f_macos_10_13))
'''

c['builders'].append(
    util.BuilderConfig(name="tarball-docker",
      workernames=["hz-bbw1-docker-tarball-debian-9"],
      tags=["tar", "bake"],
      collapseRequests=True,
      nextBuild=nextBuild,
      factory=f_tarball))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1404",
      workernames=["hz-bbw1-docker-ubuntu-1404"],
      tags=["Ubuntu", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1404-deb-autobake",
      workernames=["hz-bbw1-docker-ubuntu-1404"],
      tags=["Ubuntu", "deb", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1604",
      workernames=["hz-bbw1-docker-ubuntu-1604"],
      tags=["Ubuntu", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1604-deb-autobake",
      workernames=["hz-bbw1-docker-ubuntu-1604"],
      tags=["Ubuntu", "deb", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1804",
      workernames=["hz-bbw1-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1804-deb-autobake",
      workernames=["hz-bbw1-docker-ubuntu-1804"],
      tags=["Ubuntu", "deb", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1804-bigtest",
      workernames=["bm-bbw1-docker-ubuntu-1804"],
      tags=["Ubuntu", "big", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      factory=f_big_test))

c['builders'].append(
    util.BuilderConfig(name="debian-9",
      workernames=["hz-bbw1-docker-debian-9"],
      tags=["Debian", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="fedora-28",
      workernames=["hz-bbw1-docker-fedora-28"],
      tags=["Fedora", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="fedora-28-rpm-autobake",
      workernames=["hz-bbw1-docker-fedora-28"],
      tags=["Fedora", "rpm", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="fedora-29",
      workernames=["hz-bbw1-docker-fedora-29"],
      tags=["Fedora", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="fedora-29-rpm-autobake",
      workernames=["hz-bbw1-docker-fedora-29"],
      tags=["Fedora", "rpm", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="fedora-30",
      workernames=["hz-bbw1-docker-fedora-30"],
      tags=["Fedora", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="fedora-30-rpm-autobake",
      workernames=["hz-bbw1-docker-fedora-30"],
      tags=["Fedora", "rpm", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="centos-7",
      workernames=["hz-bbw1-docker-centos-7"],
      tags=["Centos", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="centos-7-rpm-autobake",
      workernames=["hz-bbw1-docker-centos-7"],
      tags=["Centos", "rpm", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="opensuse-15",
      workernames=["hz-bbw1-docker-opensuse-15"],
      tags=["OpenSUSE", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="opensuse-42",
      workernames=["hz-bbw1-docker-opensuse-42"],
      tags=["OpenSUSE", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[hz_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="pc9-ubuntu-1804",
      workernames=["pc9-bbw1-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1804-clang6",
      workernames=["fjord1-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "clang-6"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      properties={'c_compiler': 'clang-6.0', 'cxx_compiler': 'clang++-6.0'},
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1804-clang10",
      workernames=["fjord2-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "clang-10"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      properties={'c_compiler': 'clang-10', 'cxx_compiler': 'clang++'},
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="pc9-clang6-ubuntu-1804",
      workernames=["pc9-clang-bbw1-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "clang-6", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      properties={'c_compiler': 'clang-6.0', 'cxx_compiler': 'clang++-6.0'},
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="pc9-clang10-ubuntu-1804",
      workernames=["pc9-clang-bbw1-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "clang-10", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      properties={'c_compiler': 'clang-10', 'cxx_compiler': 'clang++'},
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="aarch64-fedora-30",
      workernames=["aarch64-bbw1-docker-fedora-30"],
      tags=["Fedora", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[aarch_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="aarch64-centos-7",
      workernames=["aarch64-bbw1-docker-centos-7"],
      tags=["Centos", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[aarch_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="aarch64-debian-10",
      workernames=["aarch64-bbw1-docker-debian-10"],
      tags=["Debian", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[aarch_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="aarch64-rhel-7",
      workernames=["aarch64-bbw1-docker-rhel-7"],
      tags=["RHEL", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=[aarch_bbw1_lock.access('counting')],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="windows-1809",
      workernames=["bbw1-docker-windows-1809"],
      tags=["Windows", "quick"],
      collapseRequests=True,
      nextBuild=nextBuild,
      factory=f_windows))

# Add a Janitor configurator that removes old logs
c['configurators'] = [util.JanitorConfigurator(
    logHorizon=timedelta(weeks=4),
    hour=19,
    dayOfWeek=6
)]
