#!/bin/bash
#===============================================================================
#
#          FILE: prep-galera
# 
#         USAGE: ./prep-galera <version>
# 
#   DESCRIPTION: This script exists so that I don't need to remember or look up
#                where things are when it is time to prepare new galera files.
#                It also ensures no steps are forgotten, and prevents many
#                errors. It's purpose is to prepare new galera library packages
#                so they are ready for inclusion in MariaDB releases.
# 
#        AUTHOR: Daniel Bartholomew (db), dbart@mariadb.org
#  ORGANIZATION: 
#       CREATED: 2016-01-28 15:08 EDT
#      REVISION:  ---
#===============================================================================

umask 002

#killall gpg-agent
set -eu
  # -e  Exit immediately if a simple command exits with a non-zero status,
  #     unless the command that fails is part of an until or  while loop, part
  #     of an if statement, part of a && or || list, or if the command's return
  #     status is being inverted using !.  -o errexit
  #
  # -u  Treat unset variables as an error when performing parameter expansion.
  #     An error message will be written to the standard error, and a
  #     non-interactive shell will exit.
  #
  # -x  Print a trace of simple commands and their arguments after they are
  #     expanded and before they are executed.

#------------------------------------------------------------------------------
# Options (set these before running the script)
#------------------------------------------------------------------------------

# defaults (to prevent errors)
    displayusage="no"
log_displayusage=""
            demo="no"
        log_demo=""
      run_script="no"
  log_run_script=""
          is_ent="no"
      log_is_ent=""
   create_source="no"
     perms_fixed="no"
     incl_galera="no"
      is_cluster="no"
  log_is_cluster=""
             log="no"
         log_log=""
         is_test="no"
galera_suffix=""
     treeflag=false
      revflag=false
      numflag=false
      tarflag=false
  remote_prep="no"

# mappings of dirs from the CI that we need
ci_mappings_4="
       gal-aarch64-rhel-7:kvm-rpm-centos74-aarch64-gal
       gal-aarch64-rhel-8:kvm-rpm-rhel8-aarch64-gal
         gal-s390x-rhel-8:kvm-rpm-rhel8-s390x-gal
    gal-aarch64-fedora-34:kvm-rpm-fedora34-aarch64-gal
    gal-aarch64-fedora-35:kvm-rpm-fedora35-aarch64-gal
    gal-aarch64-fedora-36:kvm-rpm-fedora36-aarch64-gal
     gal-aarch64-debian-9:kvm-deb-stretch-aarch64-gal
    gal-aarch64-debian-10:kvm-deb-buster-aarch64-gal
    gal-aarch64-debian-11:kvm-deb-bullseye-aarch64-gal
    gal-ppc64le-debian-11:kvm-deb-bullseye-ppc64le-gal
     gal-amd64-debian-sid:kvm-deb-sid-amd64-gal
   gal-aarch64-debian-sid:kvm-deb-sid-aarch64-gal
   gal-ppc64le-debian-sid:kvm-deb-sid-ppc64le-gal
  gal-aarch64-ubuntu-1804:kvm-deb-bionic-aarch64-gal
    gal-s390x-ubuntu-2004:kvm-deb-focal-s390x-gal
  gal-aarch64-ubuntu-2004:kvm-deb-focal-aarch64-gal
  gal-aarch64-ubuntu-2110:kvm-deb-impish-aarch64-gal
  gal-aarch64-ubuntu-2204:kvm-deb-jammy-aarch64-gal
  gal-ppc64le-ubuntu-2204:kvm-deb-jammy-ppc64le-gal
    gal-s390x-ubuntu-2204:kvm-deb-jammy-s390x-gal
        gal-s390x-sles-15:kvm-zyp-sles15-s390x-gal
"
    #gal-aarch64-fedora-36:kvm-rpm-fedora36-aarch64-gal
  #gal-ppc64le-ubuntu-2110:kvm-deb-impish-ppc64le-gal

ci_mappings_3="
       gal-aarch64-rhel-7:kvm-rpm-centos74-aarch64-gal
       gal-aarch64-rhel-8:kvm-rpm-rhel8-aarch64-gal
     gal-aarch64-debian-9:kvm-deb-stretch-aarch64-gal
    gal-aarch64-debian-10:kvm-deb-buster-aarch64-gal
  gal-aarch64-ubuntu-1804:kvm-deb-bionic-aarch64-gal
  gal-aarch64-ubuntu-2004:kvm-deb-focal-aarch64-gal
    gal-s390x-ubuntu-2004:kvm-deb-focal-s390x-gal
"


date=$(date +%F)

# The first thing we need to do is parse the command-line options
while getopts 'dhlr:t:v:y' OPTION
do
  case $OPTION in
    d)  # Not implemented yet
      demo="yes"
      log_demo="d"
      ;;
    h)  # Display a helpful usage message
      displayusage="yes"
      log_displayusage="h"
      ;;
    l)  # Log the release to ${dir_log}/prep.log
      log="yes"
      log_log="l"
      ;;
    r)  # The release revision
      rev="${OPTARG}"
      revflag=true
      ;;
    t)  # The release tree
      tree="${OPTARG}"
      treeflag=true
      ;;
    v)  # The version number of this release
      num="${OPTARG}"
      numflag=true
      ;;
    y)  # Actually run this script (helps prevent accidental runs)
      run_script="yes"
      log_run_script="y"
      ;;
    \?) # Display a helpful usage message
      displayusage="yes"
      ;;
    :)  # Error when an option is used that requires an argument
      displayusage="yes"
      echo "Option -$OPTARG requires an argument."
      ;;
  esac
done

shift $(($OPTIND - 1))

deb_dists_3="
  bionic
  buster
  focal
  stretch
  trusty
"

deb_dists_4="
  bionic
  bullseye
  buster
  focal
  impish
  jammy
  sid
  stretch
  trusty
"

deb_dists_full_3="
  bionic-aarch64
  bionic-amd64
  bionic-ppc64le

  buster-aarch64
  buster-amd64
  buster-ppc64le

  focal-aarch64
  focal-amd64
  focal-ppc64le
  focal-s390x

  stretch-aarch64
  stretch-amd64
  stretch-ppc64le
  stretch-x86

  trusty-amd64
  trusty-x86
"


deb_dists_full_4="
  bionic-aarch64
  bionic-amd64
  bionic-ppc64le

  bullseye-aarch64
  bullseye-amd64
  bullseye-ppc64le

  buster-aarch64
  buster-amd64
  buster-ppc64le

  focal-aarch64
  focal-amd64
  focal-ppc64le
  focal-s390x

  impish-amd64

  jammy-aarch64
  jammy-amd64
  jammy-ppc64le
  jammy-s390x

  sid-aarch64
  sid-amd64
  sid-ppc64le
  sid-x86
  
  stretch-aarch64
  stretch-amd64
  stretch-ppc64le
  stretch-x86

  trusty-amd64
  trusty-x86
"
  #impish-aarch64

rpm_dists_3="
  alma84-amd64

  centos73-ppc64
  centos73-ppc64le

  centos74-aarch64
  centos74-amd64
  centos8-amd64

  rhel8-amd64
  rhel8-aarch64
  rhel8-ppc64le

  opensuse150-amd64

  rocky84-amd64

  sles125-amd64
  sles150-amd64
"

rpm_dists_4="
  alma84-amd64

  centos73-ppc64
  centos73-ppc64le

  centos74-aarch64
  centos74-amd64
  centos8-amd64

  rhel8-amd64
  rhel8-aarch64
  rhel8-ppc64le
  rhel8-s390x

  fedora34-amd64
  fedora35-amd64
  fedora36-amd64

  fedora34-aarch64
  fedora35-aarch64
  fedora36-aarch64

  opensuse150-amd64

  rocky84-amd64

  sles125-amd64
  sles150-amd64
  sles15-s390x
"
  #fedora36-aarch64
  #fedora-rawhide-amd64

old_rpm_dists="
  sles12-ppc64le
"

#-------------------------------------------------------------------------------
# Options below this point you probably don't need to change
#-------------------------------------------------------------------------------

# Various miscellaneous options
rsync_opts="-a -L"

# set location of prep.conf and prep.log to XDG-compatible directories and then
# create them if they don't exist
dir_conf=${XDG_CONFIG_HOME:-~/.config}
dir_log=${XDG_DATA_HOME:-~/.local/share}


#-------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------

RC() {
  lowkey_message "${@}"
  sleep 1
  if ${@} ; then
    return 0
  else
    return 1
  fi
}

userResponse() {
  question="${@}"
  read -p "${question} " -n 1
  echo
  ANSWER=${REPLY}
  RESPONSE=${REPLY}
  return 0
}

userInput() {
  question="$@"
  echo
  read -p "${question} "
  echo
  INPUT=${REPLY}
  return 0
}

secureUserInput() {
  question="${@}"
  SECUREINPUT="false"
  REPLY="alsofalse"
  while [ "${SECUREINPUT}" != "${REPLY}" ]; do
    read -s -p "${question} "
    echo
    SECUREINPUT="${REPLY}"
    read -s -p "Please enter it again: "
    echo
    if [ "${SECUREINPUT}" != "${REPLY}" ]; then
      echo
      echo "The two entries do not match."
      echo
    else
      echo
      echo "The two entries match. Continuing."
      echo
      return 0
    fi
  done
}

delete_the_lib_dir() {
  RC rm -rfv lib
}

prepare_the_bintar_packages() {
  important_message "Preparing bintar packages..."
  if [ -d ${dir_release}/${dir_name}/bintar ] ; then
    message "Removing old bintar dirs..."
    RC rm -rf ${dir_release}/${dir_name}/bintar
    RC rm -rf ${dir_release}/${dir_name}-signed/bintar
    RC rm -rf ${dir_release}/${dir_name}-signed-ent/bintar
  fi

  RC mkdir -v ${dir_release}/${dir_name}/bintar
  RC mkdir -v ${dir_release}/${dir_name}-signed/bintar
  RC mkdir -v ${dir_release}/${dir_name}-signed-ent/bintar

  RC cd ${dir_release}/${dir_name}/bintar
  echo
  for dir_pair in ${build_dirs}; do
    dir_array=(${dir_pair//:/ })
    # create the directory
    if [ "${dir_array[1]}" = "src" ]; then
      if [ ! -d ${dir_release}/${dir_name}/${dir_array[1]} ]; then
        RC mkdir -v ${dir_release}/${dir_name}/${dir_array[1]}
      fi
    else 
      if [ -d ${dir_release}/${dir_name}/bintar/${dir_array[1]} ]; then
        RC rm -rf ${dir_release}/${dir_name}/bintar/${dir_array[1]}
      fi
      RC mkdir -v ${dir_release}/${dir_name}/bintar/${dir_array[1]}
    fi

    # This is where we actually extract the binary files
    cd ${dir_release}/${dir_name}/bintar/${dir_array[1]}
    case ${dir_array[1]} in
      #"galera-${num}-x86_64"|"galera-${num}-i686"|"galera-${num}-ppc64le"|"galera-${num}-ppc64"|"galera-${num}-aarch64")
      "galera-${num}-x86_64"|"galera-${num}-ppc64le"|"galera-${num}-ppc64"|"galera-${num}-aarch64")
          # we are dealing with an .rpm file
          lowkey_message "rpm2cpio ${dir_archive}/${tree}/${rev}/${dir_array[0]}/rpms/galera*.rpm | cpio -idmv"
                          rpm2cpio ${dir_archive}/${tree}/${rev}/${dir_array[0]}/rpms/galera*.rpm | cpio -idmv
          RC cd usr
          case ${dir_array[1]} in
            "galera-${num}-x86_64")
              RC tree
              shouldI delete_the_lib_dir
              ;;
          esac
          if [ -d lib64 ];then
            if [ -d lib ];then
              # what to do if we have BOTH lib and lib64 dirs
              RC cd lib
              # MDEV-23760 - 10.5.5 x86_64 build has incorrect galera library symlink
              if [ -d ../lib64/galera-4 ];then
                RC pushd ../lib64
                  RC ln -sv galera-4 galera
                RC popd
              fi
              RC ln -sv ../lib64/galera ./
              RC cd ../lib64
              RC ln -sv galera/libgalera_smm.so ./
              RC cd ../
            else
              # if we have a lib64 dir and no lib dir
              RC ln -sv lib64 lib
            fi
          fi
          RC cd lib
          # MDEV-23760 - 10.5.5 x86_64 build has incorrect galera library symlink
          if [ -d galera-4 ];then
            RC ln -sv galera-4 galera
          fi
          RC ln -sv galera/libgalera_smm.so ./
          ;;
      *)
          # we are dealing with .deb files
          case ${tree} in
            "mariadb-4.x")
              RC dpkg -X ${dir_archive}/${tree}/${rev}/${dir_array[0]}/debs/binary/galera-4_*.deb ./
              RC dpkg -X ${dir_archive}/${tree}/${rev}/${dir_array[0]}/debs/binary/galera-arbitrator-4_*.deb ./
              ;;
            *)
              RC dpkg -X ${dir_archive}/${tree}/${rev}/${dir_array[0]}/debs/binary/galera-3_*.deb ./
              RC dpkg -X ${dir_archive}/${tree}/${rev}/${dir_array[0]}/debs/binary/galera-arbitrator-3_*.deb ./
              ;;
          esac
          ;;
    esac

    # create a tarball
    cd ${dir_release}/${dir_name}/bintar/
    if [ -f ${dir_array[1]}.tar.gz ] ; then
      RC rm -v ${dir_array[1]}.tar.gz
    fi
    RC tar -czvf ${dir_array[1]}.tar.gz ${dir_array[1]}/
    for sum in md5 sha1 sha256 sha512;do echo ${sum}; ${sum}sum ./${dir_array[1]}.tar.gz >> ${sum}sums.txt; ${sum}sum -c ${sum}sums.txt;done

    # copy the tarball over to -signed and -signed-ent directories
    RC cp -avi ${dir_release}/${dir_name}/bintar/${dir_array[1]}.tar.gz ${dir_release}/${dir_name}-signed/bintar/
    RC cp -avi ${dir_release}/${dir_name}/bintar/${dir_array[1]}.tar.gz ${dir_release}/${dir_name}-signed-ent/bintar/

    #cp -avi ${dir_release}/${dir_name}/bintar/${dir_array[1]} ${dir_release}/${dir_name}-signed/bintar/
    #cp -avi ${dir_release}/${dir_name}/bintar/${dir_array[1]} ${dir_release}/${dir_name}-signed-ent/bintar/

    lowkey_message "transfer of ${dir_array[1]} done"
    echo;line;echo
  done



  # sign the bintars
  RC cd ${dir_release}/${dir_name}-signed/bintar/
  lowkey_message "About to sign the bintars..."
  pressAnyKeyToContinue
  for file in galera*.tar.gz ; do RC "gpg2 ${gpg_opts} ${file}";done
  # copy the sum files over and sign them
  for sum in md5 sha1 sha256 sha512;do echo ${sum}; RC cp -avi ${dir_release}/${dir_name}/bintar/${sum}sums.txt ./ ; RC ${sum}sum -c ${sum}sums.txt ; RC "gpg2 ${gpg_opts} ${sum}sums.txt";done

  # sign the ent-bintars
  cd ${dir_release}/${dir_name}-signed-ent/bintar/
  lowkey_message "About to sign the ent bintars..."
  pressAnyKeyToContinue
  for file in galera*.tar.gz ; do RC "gpg2 ${ent_gpg_opts} ${file}";done
  # copy the sum files over and sign them
  for sum in md5 sha1 sha256 sha512;do echo ${sum}; RC cp -avi ${dir_release}/${dir_name}/bintar/${sum}sums.txt ./ ; RC ${sum}sum -c ${sum}sums.txt ; RC "gpg2 ${ent_gpg_opts} ${sum}sums.txt";done

  message "Done preparing bintar packages"
  spacer
}

prepare_the_source_tarball() {
  important_message "Preparing source tarball..."
  if [ -d ${dir_release}/${dir_name}/src ]; then
    message "Removing old src dir..."
    RC rm -rf ${dir_release}/${dir_name}/src
    RC rm -rf ${dir_release}/${dir_name}-signed/src
    RC rm -rf ${dir_release}/${dir_name}-signed-ent/src
  fi

  RC mkdir -v ${dir_release}/${dir_name}/src

  # Copy over the src tarball
  rsync_wrapper "-av ${dir_archive}/${tree}/${rev}/kvm-src-centos8-amd64-gal/src/galera* ${dir_release}/${dir_name}/src/"

    cd ${dir_release}/${dir_name}/src
    for sum in md5 sha1 sha256 sha512;do echo ${sum}; lowkey_message "${sum}sum ./galera* >> ${sum}sums.txt" ; ${sum}sum ./galera* >> ${sum}sums.txt; RC ${sum}sum -c ${sum}sums.txt;done

    # before signing the files, copy them to the ent dir
    RC cp -avi ${dir_release}/${dir_name}/src ${dir_release}/${dir_name}-signed-ent/

    lowkey_message "signing source tarball and sum files..."
    RC cd ${dir_release}/${dir_name}/src/
    # remove any signature files before signing, if they exist
    for sig_file in $(ls ./*.asc); do
      RC rm -v "${sig_file}"
    done
    # sign the source tarball
    echo "About to sign the source tarball..."
    pressAnyKeyToContinue
    RC gpg2 ${gpg_opts} ${version}.tar.gz
    # sign the sum files as well
    for sum in md5 sha1 sha256 sha512;do RC "gpg2 ${gpg_opts} ${sum}sums.txt";done

    # Copy to the -signed folder
    RC cp -avi ${dir_release}/${dir_name}/src ${dir_release}/${dir_name}-signed/

    # Switch over to the -signed-ent folder and sign those
    lowkey_message "signing source tarball and sum files in the -signed-ent folder..."
    RC cd ${dir_release}/${dir_name}-signed-ent/src/
    # remove any signature files before signing, if they exist
    for sig_file in $(ls ./*.asc); do
      RC rm "${sig_file}"
    done
    # sign the source tarball
    echo "About to sign the ent source tarball..."
    pressAnyKeyToContinue
    RC gpg2 ${ent_gpg_opts} ${version}.tar.gz
    # sign the sum files as well
    for sum in md5 sha1 sha256 sha512;do RC "gpg2 ${ent_gpg_opts} ${sum}sums.txt";done
  #fi # removing src rsync if statement (db:2017-01-06)
  message "prep of src done"
  spacer
}

prepare_the_deb_packages() {
  important_message "Preparing deb packages..."
  # if the deb dir exists, delete it
  if [ -d ${dir_release}/${dir_name}/deb ]; then
    message "Removing old deb dir..."
    RC rm -rf "${dir_release}/${dir_name}/deb"
  fi
  if [ -d ${dir_release}/${dir_name}-signed/deb ]; then
    RC rm -rf "${dir_release}/${dir_name}-signed/deb"
  fi
  if [ -d ${dir_release}/${dir_name}-signed-ent/deb ]; then
    RC rm -rf "${dir_release}/${dir_name}-signed-ent/deb"
  fi
  RC mkdir -v ${dir_release}/${dir_name}/deb

  # Copy over the deb packages
  for dist in ${deb_dists_full}; do
    message "Copying ${dist}"
    find ${dir_archive}/${tree}/${rev}/kvm-deb-${dist}-gal/debs/ -name 'galera*' -exec cp -avi {} ${dir_release}/${dir_name}/deb/ \;
  done

  RC cd ${dir_release}/${dir_name}/deb/

  # sum the deb files prior to copying them to -signed and -signed-ent
  for sum in md5 sha1 sha256 sha512;do echo ${sum}; ${sum}sum ./galera* >> ${sum}sums.txt; ${sum}sum -c ${sum}sums.txt;done

  # copy deb dir to signed and signed-ent dirs
  RC cp -avi ${dir_release}/${dir_name}/deb ${dir_release}/${dir_name}-signed/
  RC cp -avi ${dir_release}/${dir_name}/deb ${dir_release}/${dir_name}-signed-ent/

  # sign the deb files for mariadb.org
  cd ${dir_release}/${dir_name}-signed/deb/
  # sign the deb files
  echo "About to sign the debs..."
  pressAnyKeyToContinue
  for file in galera* ; do RC "gpg2 ${gpg_opts} ${file}";done
  # sign the sum files as well
  for sum in md5 sha1 sha256 sha512;do RC "gpg2 ${gpg_opts} ${sum}sums.txt";done


  # sign the deb files for mariadb.com (aka MariaDB Enterprise)
  RC cd ${dir_release}/${dir_name}-signed-ent/deb/
  # sign the deb files
  echo "About to sign the ent debs..."
  pressAnyKeyToContinue
  for file in galera* ; do RC "gpg2 ${ent_gpg_opts} ${file}";done
  # sign the sum files as well
  for sum in md5 sha1 sha256 sha512;do RC "gpg2 ${ent_gpg_opts} ${sum}sums.txt";done

  RC tree "${dir_release}/${dir_name}/deb" "${dir_release}/${dir_name}-signed/deb" "${dir_release}/${dir_name}-signed-ent/deb"
  message "Done preparing deb packages"
  spacer
}

prepare_the_rpm_packages() {
  important_message "Preparing rpm packages..."
  if [ -d ${dir_release}/${dir_name}/rpm ]; then
    message "Removing old rpm dir..."
    RC rm -rf "${dir_release}/${dir_name}/rpm"
  fi
  if [ -d ${dir_release}/${dir_name}-signed/rpm ]; then
    RC rm -rf "${dir_release}/${dir_name}-signed/rpm"
  fi
  if [ -d ${dir_release}/${dir_name}-signed-ent/rpm ]; then
    RC rm -rf "${dir_release}/${dir_name}-signed-ent/rpm"
  fi
  RC mkdir -v ${dir_release}/${dir_name}/rpm
  RC cd ${dir_release}/${dir_name}/rpm/

  for dist in ${rpm_dists}; do
    message "Preparing ${dist}"
    RC mkdir -v ${dir_release}/${dir_name}/rpm/${dist}
    case ${dist} in
      'sles11-amd64'|'sles11-x86')
        if [ "${tree}" = "mariadb-3.x" ];then
          RC cp -avi ${dir_release}/galera-25.3.23/rpm/${dist}/galera*rpm ${dir_release}/${dir_name}/rpm/${dist}/
        else
          RC rmdir -v ${dir_release}/${dir_name}/rpm/${dist}
        fi
        ;;
      'sles12-ppc64le')
        if [ "${tree}" = "mariadb-3.x" ];then
          RC cp -avi ${dir_archive}/${tree}/${rev}/p8-suse12-rpm-gal/rpms/galera*.rpm ${dir_release}/${dir_name}/rpm/${dist}/
        else
          RC rmdir -v ${dir_release}/${dir_name}/rpm/${dist}
        fi
        ;;
      *)
        RC cp -avi ${dir_archive}/${tree}/${rev}/kvm-*-${dist}-gal/rpms/galera*.rpm ${dir_release}/${dir_name}/rpm/${dist}/
        ;;
    esac
  done

  #-------------------------------------------------------------------------------
  #  copy rpm dir to signed and signed-ent dirs
  #-------------------------------------------------------------------------------
  cp -avi ${dir_release}/${dir_name}/rpm ${dir_release}/${dir_name}-signed/
  cp -avi ${dir_release}/${dir_name}/rpm ${dir_release}/${dir_name}-signed-ent/

  cd ${dir_release}/${dir_name}/rpm/
  for sum in md5 sha1 sha256 sha512;do echo ${sum}; ${sum}sum ./*/*.rpm >> ${sum}sums.txt; ${sum}sum -c ${sum}sums.txt;done
  # sign the rpms
  echo "About to sign the rpms..."
  pressAnyKeyToContinue
  for file in ./*/*.rpm ; do RC "gpg2 ${gpg_opts} ${file}";done
  # sign the sum files as well
  for sum in md5 sha1 sha256 sha512;do RC "gpg2 ${gpg_opts} ${sum}sums.txt";done
  
  #-------------------------------------------------------------------------------
  #  sign and sum rpm files for mariadb.org
  #-------------------------------------------------------------------------------
  cd ${HOME}
  echo
  lowkey_message "Switching ~/.rpmmacros file to std version..."
  echo 
  RC rm -v .rpmmacros
  RC ln -sv .rpmmacros-std .rpmmacros
  RC cd ${dir_release}/${dir_name}-signed/rpm/
  RC rpmsign --addsign --key-id=${gpg_key} $(find . -name '*.rpm')
  for sum in md5 sha1 sha256 sha512;do echo ${sum}; ${sum}sum ./*/*.rpm >> ${sum}sums.txt; RC ${sum}sum -c ${sum}sums.txt;done
  # sign the rpms
  echo "About to sign the rpms..."
  pressAnyKeyToContinue
  for file in ./*/*.rpm ; do RC "gpg2 ${gpg_opts} ${file}";done
  # sign the sum files as well
  for sum in md5 sha1 sha256 sha512;do RC "gpg2 ${gpg_opts} ${sum}sums.txt";done


  #-------------------------------------------------------------------------------
  #  sign and sum rpm files for mariadb.com (aka MariaDB Enterprise)
  #-------------------------------------------------------------------------------
  cd ${HOME}
  lowkey_message "Switching ~/.rpmmacros file to ent version..."
  RC rm -v .rpmmacros
  RC ln -sv .rpmmacros-ent-v3 .rpmmacros

  cd ${dir_release}/${dir_name}-signed-ent/rpm/
  echo "About to sign the ent rpms..."
  pressAnyKeyToContinue
  RC rpmsign --addsign --key-id=${ent_gpg_key} $(find . -name '*.rpm')
  for sum in md5 sha1 sha256 sha512;do echo ${sum}; ${sum}sum ./*/*.rpm >> ${sum}sums.txt; RC ${sum}sum -c ${sum}sums.txt;done
  # sign the rpms
  for file in ./*/*.rpm ; do RC "gpg2 ${ent_gpg_opts} ${file}";done
  # sign the sum files as well
  for sum in md5 sha1 sha256 sha512;do RC "gpg2 ${ent_gpg_opts} ${sum}sums.txt";done
  
  cd ${HOME}
  lowkey_message "Switching ~/.rpmmacros file back to standard version..."
  RC rm -v .rpmmacros
  RC ln -sv .rpmmacros-std .rpmmacros
  RC cd ${dir_release}/${dir_name}-signed-ent/rpm/

  # Create symlinks
  for dir in ${dir_release}/${dir_name}-signed/rpm/ ${dir_release}/${dir_name}-signed-ent/rpm/ ; do
    pushd ${dir}
      ln -sv centos74-aarch64 centos7-aarch64
      ln -sv centos74-amd64 centos7-amd64
      ln -sv centos73-ppc64 centos7-ppc64
      ln -sv centos73-ppc64le centos7-ppc64le
      ln -sv opensuse150-amd64 opensuse15-amd64
      ln -sv sles125-amd64 sles12-amd64
      ln -sv sles150-amd64 sles15-amd64
    popd
  done

  RC tree "${dir_release}/${dir_name}/rpm" "${dir_release}/${dir_name}-signed/rpm" "${dir_release}/${dir_name}-signed-ent/rpm"
  message "Done preparing rpm packages"
  spacer
}

prepare_the_deb_repository() {
  important_message "Preparing deb repository..."
  # Delete the directory if it exists (we want to start from scratch)
  if [ -d ${dir_release}/${dir_name}/${repo}/deb ]; then
    message "Removing old deb repository..."
    RC rm -rf "${dir_release}/${dir_name}/${repo}/deb"
  fi

  architectures="amd64 arm64 i386 ppc64el source"
  gpg_key="0xcbcb082a1bb943db"
  gpg_key_2016="0xF1656F24C74CD1D8"
  RC mkdir -vp ${dir_release}/${dir_name}/${repo}/deb/conf
  RC cd ${dir_release}/${dir_name}/${repo}/deb/

  for dist in ${deb_dists}; do
    case ${dist} in
      'jessie') cat >>conf/distributions <<END
Origin: Galera
Label: Galera
Codename: ${dist}
Architectures: ${architectures}
Components: main
Description: Galera test repository
SignWith: ${gpg_key}

END
        ;;
      *) cat >>conf/distributions <<END
Origin: Galera
Label: Galera
Codename: ${dist}
Architectures: ${architectures}
Components: main
Description: Galera test repository
SignWith: ${gpg_key_2016}

END
        ;;
    esac
  done

  for dist in ${deb_dists_full};do

    # Set dist_name to appropriate value
    dist_name=${dist%-*}

    if [ "${dist_name}" = "" ]; then
      echo ${dist}
      echo 'We should not be here. Error with setting ${dist_name}'
      exit 1
    fi

    # Set dist_arch to appropriate value
    case ${dist} in
      *amd64) dist_arch='amd64' ;;
      *aarch64) dist_arch='arm64' ;;
      *ppc64le) dist_arch='ppc64el' ;;
      *x86) dist_arch='i386' ;;
      *)
        echo ${dist}
        echo 'We should not be here. Error with setting ${dist_arch}'
        exit 1
        ;;
    esac

    echo ${dist}
    case ${dist} in
      sid*)
        RC reprepro --ignore=wrongdistribution --basedir=. include ${dist_name} ${dir_release}/${dir_name}-${suffix}/deb/galera*${dist_name}*_${dist_arch}.changes
        ;;
      *)
    RC reprepro --basedir=. include ${dist_name} ${dir_release}/${dir_name}-${suffix}/deb/galera*${dist_name}*_${dist_arch}.changes
        ;;
    esac

  done
  message "Finished preparing the deb repository"
  spacer
}

prepare_the_yum_repository() {
  important_message "Preparing yum repository..."
  # Delete the directory if it exists (we want to start from scratch)
  if [ -d ${dir_release}/${dir_name}/${repo}/rpm ]; then
    message "Removing old rpm repository..."
    RC rm -rf "${dir_release}/${dir_name}/${repo}/rpm"
  fi
  RC mkdir -vp ${dir_release}/${dir_name}/${repo}/rpm
  RC cd ${dir_release}/${dir_name}/${repo}/rpm

  # Here we are going to iterate through the various distros and:
  #   1. create the needed directories
  #   2. copy the correct rpm packages into those directories
  for dist in ${rpm_dists};do
    mkdir -vp ${dir_release}/${dir_name}/${repo}/rpm/${dist}/rpms
    case ${dist} in
      'sles12-ppc64le'|'sles11-amd64'|'sles11-x86')
        if [[ "${tree}" = "mariadb-4.x" ]]; then
          lowkey_message "no galera4 packages for sles12-ppc64le, sles11-amd64, or sles11-x86"
        else
          RC rsync -avP --keep-dirlinks --exclude=*.asc ${dir_release}/${dir_name}-${suffix}/rpm/${dist}/ ${dir_release}/${dir_name}/${repo}/rpm/${dist}/rpms/
        fi
        ;;
      *)
        RC rsync -avP --keep-dirlinks --exclude=*.asc ${dir_release}/${dir_name}-${suffix}/rpm/${dist}/ ${dir_release}/${dir_name}/${repo}/rpm/${dist}/rpms/
        ;;
    esac
  done
  # At this point the files are in place
  # All that's left is to generate the repo metadata  and sign the repomd.xml file
  cd ${dir_release}/${dir_name}/${repo}/rpm/
  for dist in ${rpm_dists}; do
    case ${dist} in
      'sles114-amd64'|'sles114-x86')
        mv -vi ${dist} ~/ && cd ~/
        # SLES 11 doesn't support newer sha256 checksums
        RC createrepo -s sha --database --pretty ${dist}
        RC mv -vi ${dist} ${dir_release}/${dir_name}/${repo}/rpm/ && cd ${dir_release}/${dir_name}/${repo}/rpm/
        RC gpg2 --detach-sign --armor -u ${gpg_key} ${dist}/repodata/repomd.xml
        ;;
      *)
        RC mv -vi ${dist} ~/ && cd ~/
        RC createrepo --database --pretty ${dist}
        RC mv -vi ${dist} ${dir_release}/${dir_name}/${repo}/rpm/ && cd ${dir_release}/${dir_name}/${repo}/rpm/
        RC gpg2 --detach-sign --armor -u ${gpg_key} ${dist}/repodata/repomd.xml
        ;;
    esac
  done

  # one final thing: create symlinks so buildbot tests work
  RC ln -sv sles150-amd64 sles15-amd64
  RC ln -sv sles125-amd64 sles12-amd64
  RC ln -sv opensuse150-amd64 opensuse15-amd64
  RC ln -sv centos74-amd64 centos7-amd64
  RC ln -sv centos74-amd64 rhel7-amd64
  RC ln -sv centos73-ppc64 centos7-ppc64
  RC ln -sv centos73-ppc64 rhel7-ppc64
  RC ln -sv centos73-ppc64le centos7-ppc64le
  RC ln -sv centos73-ppc64le rhel7-ppc64le
  RC ln -sv centos73-ppc64le rhel71-ppc64le
  RC ln -sv centos74-aarch64 centos7-aarch64
  RC ln -sv centos74-aarch64 rhel7-aarch64
  RC ln -sv rhel8-aarch64 centos8-aarch64
  RC ln -sv rhel8-aarch64 rocky84-aarch64
  RC ln -sv rhel8-aarch64 alma84-aarch64
  message "Finished preparing the yum repository"
}

upload_the_test_repos() {
  important_message "Uploading the test repositories..."
  message "Uploading to ${yum_primary_mirror}..."
  rsync_wrapper "-av --delete-after ${dir_release}/${dir_name}/${repo} ${yum_primary_mirror}:${yum_mirror_path}/galera/${date}"
  message "Pointing ${repo} link at ${date}/${repo}..."
  echo "+ ssh ${yum_primary_mirror} \"hostname ; set -x ; cd ${yum_mirror_path}/galera/ ; rm -v ${repo} ; ln -sv ${date}/${repo} ./\""
  ssh ${yum_primary_mirror} "hostname ; set -x ; cd ${yum_mirror_path}/galera/ ; rm -v ${repo} ; ln -sv ${date}/${repo} ./"

  for yum_mirror in ${yum_mirrors} ; do
    message "Uploading to ${yum_mirror}..."
    rsync_wrapper "-av --delete-after ${dir_release}/${dir_name}/${repo} ${yum_mirror}:${yum_mirror_path}/galera/${date}"
    message "Pointing ${repo} link at ${date}/${repo}..."
    echo "+ ssh ${yum_mirror} \"hostname ; set -x ; cd ${yum_mirror_path}/galera/ ; rm -v ${repo} ; ln -sv ${date}/${repo} ./\""
    ssh ${yum_mirror} "hostname ; set -x ; cd ${yum_mirror_path}/galera/ ; rm -v ${repo} ; ln -sv ${date}/${repo} ./"
  done
  message "Done uploading the test repositories"
  spacer
}

logSettings() {
cat >> ${dir_log}/prep.log <<END

# Prepped $(date)
# Command:
#   prep-galera -${log_displayusage}${log_demo}${log_run_script}${log_log} -t ${tree} -r ${rev} -v ${num}
# tree="${tree}"
# rev="${rev}"
# num="${num}"
# version="${version}"
# dir_release/dir_name="${dir_release}/${dir_name}"
# dir_archive="${dir_archive}"
# dir_release="${dir_release}"
# gpg_opts="${gpg_opts}"
# ent_gpg_opts="${ent_gpg_opts}"
END
chown ${USER}: ${dir_log}/prep.log
}


pressAnyKeyToContinue() {
  echo
  read -p "Press any key to continue." -n 1
  echo
  return 0
}

shouldI() {
  local cont
  cont=""
   while [ -z ${cont} ]; do
     userResponse "Should I ${@//_/ }? [y/n]"
     case ${ANSWER} in
      "y")
        ${@}
        cont="yes"
        return 0
        ;;
      "n")
        echo "Skipping . . . "
        cont="yes"
        return 0
        ;;
      *)
        echo "Please answer [y]es or [n]o."
        echo
        cont=""
        ;;
    esac
  done
}

treat_this_as_a_test() {
  is_test="yes"
}

loadDefaults() {
  # Load the paths (if they exist)
  if [ -f ${dir_conf}/prep.conf ]; then
      . ${dir_conf}/prep.conf
  else
    echo
    echo "The file ${dir_conf}/prep.conf does not exist in your home."
    echo "The prep script creates a default template of this file when run."
    echo "Exiting..."
    exit 1
  fi
}

usage() {
  set +x
  echo
  echo
  echo "usage: $0 -y[deghl] -t <tree> -r <revision> -v <version>"
  echo "  -y : actually run the script"
  echo "  -d : run the script in demo mode"
  echo "  -h : display this usage message"
  echo "  -l : log the <tree>, <revision>, & etc... to ${dir_log}/prep.log"
  echo "  -t <tree> : the Galera source code tree"
  echo "  -r <revision> : the Galera source code tree revision"
  echo "  -v <version> : the Galera version number"
  echo
  echo
  set -x
}

spacer() {
  echo;echo;echo;
}

thickline() {
  echo "==============================================================================="
}

line() {
  echo "-------------------------------------------------------------------------------"
}

important_message() {
  message="${@}"
  echo;echo;thickline;echo "+ ${message}";thickline;
}

message() {
  message="${@}"
  line;echo "+ ${message}";line;
}

lowkey_message() {
  message="${@}"
  echo "+ ${message}"
}

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  rsync_wrapper
#   DESCRIPTION:  This function provides a safety net for using rsync. It takes
#                 the options part of the rsync (everything that would come
#                 after the rsync command itself on the command-line) and first
#                 runs it with the --dry-run flag. It then asks if everything
#                 is OK. Assuming things are OK, it runs the rsync for real.
#-------------------------------------------------------------------------------
rsync_wrapper() {
  local upload
  upload=""
  rsync_body="${@}"
  lowkey_message "Doing a dry run..."
  set -x
  rsync --dry-run ${rsync_body}
  set +x
  echo
  while [ -z ${upload} ]; do
    userResponse "Does the above look OK? [y/n]"
    case ${ANSWER} in
      "y")
        lowkey_message "Transferring for real..."
        set -x
        rsync ${rsync_body}
        set +x
        echo
        upload="yes"
        ANSWER=""
        return 0
        ;;
      "n")
        lowkey_message "Something went wrong..."
        ANSWER=""
        exit 1
        ;;
      *)
        lowkey_message "Please answer [y]es or [n]o."
        echo
        upload=""
        ;;
    esac
  done
}

update_galera_version_in_conf_file() {
  message "Updating Galera version in prep.conf..."
  RC cp -avi ${dir_conf}/prep.conf ${dir_conf}/prep.conf.bak
  case ${tree} in
    mariadb-3.x)
      RC sed -i "s/ver_galera=\"${ver_galera}\"/ver_galera=\"${num}\"/" ${dir_conf}/prep.conf
      RC sed -i "s/ver_galera_preferred=\"${ver_galera}\"/ver_galera_preferred=\"${num}\"/" ${dir_conf}/prep.conf
      ;;
    mariadb-4.x)
      RC sed -i "s/ver_galera4=\"${ver_galera4}\"/ver_galera4=\"${num}\"/" ${dir_conf}/prep.conf
      RC sed -i "s/ver_galera4_preferred=\"${ver_galera4}\"/ver_galera4_preferred=\"${num}\"/" ${dir_conf}/prep.conf
      ;;
  esac
  set +e  # Turn off exiting on non-zero status because diff will do that
  RC diff -u ${dir_conf}/prep.conf.bak ${dir_conf}/prep.conf
  set -e  # Restore exiting on non-zero status
  local cont
  cont=""
  while [ -z ${cont} ]; do
    userResponse "Does the above look OK? [y/n]"
    case ${ANSWER} in
      "y")
        lowkey_message "Cleaning up and continuing..."
        RC rm -v ${dir_conf}/prep.conf.bak
        cont="yes"
        ANSWER=""
        return 0
        ;;
      "n")
        lowkey_message "Something went wrong, restoring prep.conf file..."
        RC mv -v ${dir_conf}/prep.conf.bak ${dir_conf}/prep.conf
        ANSWER=""
        lowkey_message "Exiting..."
        exit 1
        ;;
      *)
        lowkey_message "Please answer [y]es or [n]o."
        echo
        cont=""
        ;;
    esac
  done
  return 0
}

#===  FUNCTION  ================================================================
#          NAME:  upload_this_release_to_the_buildmaster
#   DESCRIPTION:  Transfer files from the local host to the buildmaster
#===============================================================================
upload_this_release_to_the_buildmaster() {
  important_message "Transferring files from here to ${buildmaster}..."
  message "Uploading ${dir_release}/${dir_name} to ${buildmaster}..."
  rsync_wrapper "-av --delete-after ${dir_release}/${dir_name}* ${buildmaster}:${dir_release}/"

  message "Done transferring files from here to ${buildmaster}"
}

#===  FUNCTION  ================================================================
#          NAME:  pull_this_release_from_the_buildmaster
#   DESCRIPTION:  Transfer/Download/Fetch files over from the buildmaster
#                 before prepping
#===============================================================================
pull_this_release_from_the_buildmaster() {
  # This function enables prepping a release remotely. To be able to do this we
  # need to:
  # - Fix permissions on the buildmaster
  # - rsync the needed dirs from the buildmaster such that they can all be
  #   found at the same paths on the local machine
  # - Possibly not upload to the staging mirror (because we might be doing this
  #   on the staging mirror)

  # First set the remote_prep variable to yes so that other parts of the script
  # know what is going on
  remote_prep="yes"

  important_message "Pulling this release from ${buildmaster} to here..."

  # Fix permissions on the buildmaster
  maybe_fix_permissions

  # Create the local directories if they don't exist
  lowkey_message "Making sure local directories exist..."
  if [ ! -d ${dir_archive}/${tree}/${rev} ]; then
    mkdir -vp ${dir_archive}/${tree}/${rev}
  fi

  # We can now rsync the builds from the buildmaster
  message "Transferring builds from ${buildmaster}..."
  rsync_wrapper "-av --delete-after ${buildmaster}:${dir_archive}/${tree}/${rev}/ ${dir_archive}/${tree}/${rev}/"

  # We should be done now
  RC tree ${dir_archive}/${tree}/${rev}/
  message "Done pulling ${tree}/${rev}/ from ${buildmaster}"

}

pull_this_release_from_the_ci() {
  important_message "Pulling this release from ${ci} to here..."

  lowkey_message "Making sure local directories exist..."

  if [ ! -d ${dir_archive}/ci/galera/${tree}/${rev} ]; then
    mkdir -vp ${dir_archive}/ci/galera/${tree}/${rev}
  fi

  RC pushd ${dir_archive}/ci/galera/
    message "Transferring builds from ${ci}..."
    set +e
    #RC wget --no-parent -r -N --no-host-directories --exclude-directories=logs ${ci}/galera/${tree}/${rev}/
    RC wget --no-parent -r -N --no-host-directories --exclude-directories=logs ${ci}/${tree}/${rev}/
    set -e
    RC find ${dir_archive}/ci/galera/${tree}/${rev}/ -name "index.html" -exec rm -v {} \;
  RC popd

  RC tree ${dir_archive}/ci/galera/${tree}/${rev}
  message "Done downloading release to ${dir_archive}/ci/galera/${tree}/${rev}"
}

verify_the_ci_download() {
  message "Verifying files downloaded from ${ci}..."
  for shafile in $(find ${dir_archive}/ci/galera/${tree}/${rev} -name sha256sums.txt) ; do
    RC pushd $(dirname ${shafile})
    case $shafile in
      *windows*)
        dos2unix sha256sums.txt
        sed -i 's/[ \t]*$//' sha256sums.txt
        sed -i '/^$/d' sha256sums.txt
        ;;
    esac
    RC sha256sum --quiet -c sha256sums.txt
    RC popd
  done
}

verify_all_needed_ci_dirs_are_present() {
  message "Checking for presence of all needed ci builds..."
  should_I_quit=0
  for ci_pair in ${ci_mappings}; do
    ci_array=(${ci_pair//:/ })
    dir_source=${dir_archive}/ci/galera/${tree}/${rev}/${ci_array[0]}
    if [ -d ${dir_source} ]; then
      lowkey_message "✔  ${ci_array[0]}"
    else
      lowkey_message "⚠  ${ci_array[0]}"
      should_I_quit=1
    fi
  done
  if ((${should_I_quit})) ; then
    important_message "Some needed builds are missing, quitting..."
    exit 8
  fi
}

copy_ci_downloads_to_buildmaster_dir() {
  verify_all_needed_ci_dirs_are_present
  message "Copying needed builds from ${dir_archive}/ci/galera/${tree}/${rev} to ${dir_archive}/${tree}/${rev}/"

  for ci_pair in ${ci_mappings}; do
    ci_array=(${ci_pair//:/ })
    dir_source=${dir_archive}/ci/galera/${tree}/${rev}/${ci_array[0]}
    dir_dest=${dir_archive}/${tree}/${rev}/${ci_array[1]}
    if [ -d ${dir_dest} ]; then
      message "${dir_dest} already exists, moving..."
      RC mv -vi ${dir_dest} ${dir_dest}_orig
    fi
    if [ -d ${dir_source} ]; then
      RC cp -ai ${dir_source} ${dir_dest}
    else
      important_message "${dir_source} does not exist"
      exit 1
    fi
  done
}


#===  FUNCTION  ================================================================
#          NAME:  maybe_fix_permissions
#   DESCRIPTION:  Fix permissions on the buildbot dirs, if they haven't been
#                 fixed already during this run of the script
#===============================================================================
maybe_fix_permissions() {
  if [ "${perms_fixed}" = "no" ]; then
     message "fixing permissions..."

    dirs_to_chmod="${dir_archive}/${tree} ${dir_archive}/${tree}/${rev}"

    if [ "${remote_prep}" = "yes" ]; then

      # If we're fixing remote permissions, we want to to it with one ssh
      # connection, so everything goes on one line

      ssh -t -t ${buildmaster} "set -x ; sudo chmod -c 755 ${dirs_to_chmod}; sudo find ${dir_archive}/${tree}/${rev} -type d -exec sudo chmod -c 755 {} \; ; find ${dir_archive}/${tree}/${rev} -type f -exec sudo chmod -c 644 {} \;"

    else
      # If we're here we are not fixing remote permissions, so we can do things
      # on separate lines, which makes everything more readable

      # Make sure parent dirs are OK first
      sudo chmod -c 755 ${dirs_to_chmod}

      # scan and adjust perms of subdirs
      sudo find ${dir_archive}/${tree}/${rev} -type d -exec sudo chmod -c 755 {} \;

      sudo find ${dir_archive}/${tree}/${rev} -type f -exec sudo chmod -c 644 {} \;

    fi

    perms_fixed="yes" # set perms_fixed to 'yes' so this doesn't run again

    lowkey_message "done fixing permissions"
    echo
  fi
}

maybe_create_release_dir() {
if [ ! -d ${dir_release}/${dir_name} ]; then
  message "Creating release dir..."
  RC mkdir -v ${dir_release}/${dir_name}
  if [ ! -d ${dir_release}/${dir_name}-signed ]; then
    RC mkdir -v ${dir_release}/${dir_name}-signed
  fi
  if [ ! -d ${dir_release}/${dir_name}-signed-ent ]; then
    RC mkdir -v ${dir_release}/${dir_name}-signed-ent
  fi
fi
}



#-------------------------------------------------------------------------------
# Main Script
#-------------------------------------------------------------------------------

if ! ${revflag} || ! ${numflag} || ! ${treeflag} ; then
  #if [[ -d $1 ]]; then
    echo
    line
    echo "-r -t and -v, along with their appropriate arguments, are mandatory" >&2
    line
    usage
    exit 4
  #fi
fi

#if (( `id -u` != 0 )); then { echo "Sorry, ${0} must be run using sudo. Exiting..."; exit; } fi

# Display usage message and quit if necessary
if [ "${displayusage}" = "yes" ] || [ "${run_script}" != "yes" ]; then
  usage
  exit 0
fi

loadDefaults                                    # Load Default paths and vars

# Customizations because we are not prepping a MariaDB release
version="galera-${num}"
suffix_ent="signed-ent"
suffix="signed"

shouldI treat_this_as_a_test

if [ "${is_test}" = "yes" ]; then
  dir_release="${dir_galera}-test"
else
  dir_release="${dir_galera}"
fi

dir_name="${version}"
dir_archive="${dir_archive_galera}"

case ${tree} in
  "mariadb-3.x")
    build_dirs_x86="kvm-deb-trusty-x86-gal:galera-${num}-i686 kvm-deb-trusty-x86-gal:galera-${num}-glibc_214-i686 kvm-deb-trusty-x86-gal:galera-${num}-systemd-i686"
    repo="repo3"
    ci_mappings=${ci_mappings_3}
    deb_dists=${deb_dists_3}
    deb_dists_full=${deb_dists_full_3}
    rpm_dists=${rpm_dists_3}
    ;;
  "mariadb-4.x")
    build_dirs_x86="kvm-deb-trusty-x86-gal:galera-${num}-i686 kvm-deb-trusty-x86-gal:galera-${num}-glibc_214-i686 kvm-deb-trusty-x86-gal:galera-${num}-systemd-i686"
    repo="repo4"
    ci_mappings=${ci_mappings_4}
    deb_dists=${deb_dists_4}
    deb_dists_full=${deb_dists_full_4}
    rpm_dists=${rpm_dists_4}
    ;;
esac

build_dirs_x86_64="kvm-rpm-centos74-amd64-gal:galera-${num}-x86_64 kvm-deb-trusty-amd64-gal:galera-${num}-glibc_214-x86_64 kvm-deb-trusty-amd64-gal:galera-${num}-systemd-x86_64"
build_dirs_p8="kvm-rpm-centos73-ppc64le-gal:galera-${num}-ppc64le kvm-rpm-centos73-ppc64-gal:galera-${num}-ppc64 kvm-rpm-centos74-aarch64-gal:galera-${num}-aarch64"

build_dirs="${build_dirs_x86} ${build_dirs_x86_64} ${build_dirs_p8}"

shouldI pull_this_release_from_the_buildmaster
shouldI pull_this_release_from_the_ci
shouldI verify_the_ci_download
shouldI copy_ci_downloads_to_buildmaster_dir
maybe_fix_permissions
maybe_create_release_dir
shouldI prepare_the_source_tarball
shouldI prepare_the_bintar_packages
shouldI prepare_the_deb_packages
shouldI prepare_the_rpm_packages
shouldI prepare_the_deb_repository
shouldI prepare_the_yum_repository
shouldI upload_the_test_repos
shouldI upload_this_release_to_the_buildmaster
shouldI update_galera_version_in_conf_file

if [ ${log} = "yes" ]; then
  logSettings
fi

#-------------------------------------------------------------------------------
#  All done
#-------------------------------------------------------------------------------
important_message "Done creating the Galera ${version} release!"


# vim: filetype=sh
