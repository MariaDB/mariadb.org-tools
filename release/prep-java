#!/bin/bash - 
#===============================================================================
#
#          FILE:  prep-java
# 
#         USAGE:  ./prep-java <version>
# 
#   DESCRIPTION:  This script is used to prepare files for a MariaDB
#                 Connector/Java release
# 
#        AUTHOR: Daniel Bartholomew
#       CREATED: 15/02/17 04:30:32 EET
#===============================================================================


#-------------------------------------------------------------------------------
#  Variables
#-------------------------------------------------------------------------------
version=${1}
commit=${2}
orgmariadbjdbc=${3}
maven="https://oss.sonatype.org/content/repositories/orgmariadbjdbc-${orgmariadbjdbc}/org/mariadb/jdbc/mariadb-java-client"

url_staging="https://github.com/mariadb-corporation/mariadb-connector-j/archive"
url="https://github.com/MariaDB/mariadb-connector-j/archive"
dir_name="connector-java-${version}"
tarballs="mariadb-connector-j-${version}.tar.gz mariadb-connector-j-${version}.zip"

# set location of prep.conf and prep.log to XDG-compatible directories and then
# create them if they don't exist
dir_conf=${XDG_CONFIG_HOME:-~/.config}
dir_log=${XDG_DATA_HOME:-~/.local/share}


#-------------------------------------------------------------------------------
#  Functions
#-------------------------------------------------------------------------------

DIV() { echo;echo;LINE;echo;echo;}
LINE() { echo -n '#';for i in {1..77} ; do echo -n '-';done;echo '-';}
THICKLINE() { echo -n '#';for i in {1..77} ; do echo -n '=';done;echo '=';}
RC() { echo "+ ${@}";if ${@};then return 0;else return 1;fi;}
PAUSE() { echo;read -p "Press any key to continue." -n 1;echo;return 0;}

MSG() { LINE;echo "# ${@}";LINE;}
MSG_I() { echo;echo;THICKLINE;echo "# ${@}";THICKLINE;}
MSG_L() { echo "# ${@}";}

sumgen() {
  for sum in md5 sha1 sha256 sha512;do
	${sum}sum ./mar* >> ${sum}sums.txt
	${sum}sum -c ${sum}sums.txt
  done
  DIV
}

userInput() {
  question="$@"
  echo
  read -p "${question} "
  echo
  INPUT=${REPLY}
  return 0
}

userResponse() {
  question="${@}"
  read -p "${question} " -n 1
  echo
  ANSWER=${REPLY}
  RESPONSE=${REPLY}
  return 0
}

loadDefaults() {
  # Load the paths (if they exist)
  if [ -f ${dir_conf}/prep.conf ]; then
      . ${dir_conf}/prep.conf
  else
    echo
    echo "The file ${dir_conf}/prep.conf does not exist in your home."
    echo "The prep script creates a default template of this file when run."
    echo "Exiting..."
    exit 1
  fi
}

usage() {
  set +x
  echo
  echo "usage: $0 <version>"
  echo " e.g.: $0 2.0.2"
  echo
  set -x
  exit 1
}

shouldI() {
  local cont
  cont=""
   while [ -z ${cont} ]; do
     userResponse "Should I ${@//_/ }? [y/n]"
     case ${ANSWER} in
      "y")
        ${@}
        cont="yes"
        return 0
        ;;
      "n")
        echo "Skipping . . . "
        cont="yes"
        return 0
        ;;
      *)
        echo "Please answer [y]es or [n]o."
        echo
        cont=""
        ;;
    esac
  done
}

prep_files_for_staging() {
  MSG "Prepping staging files..."
  RC pushd ${cj_home}
    if [ -d ${dir_name} ]; then
      RC rm -rf ${dir_name}
    fi
    RC mkdir ${dir_name}
    RC pushd ${dir_name}
      RC wget -N ${maven}/${version}/mariadb-java-client-${version}-javadoc.jar
      RC wget -N ${maven}/${version}/mariadb-java-client-${version}-sources.jar
      RC wget -N ${maven}/${version}/mariadb-java-client-${version}.jar
      RC wget -N ${url_staging}/${commit}.tar.gz
      RC mv -vi ${commit}.tar.gz mariadb-connector-j-${version}.tar.gz
      RC wget -N ${url_staging}/${commit}.zip
      RC mv -vi ${commit}.zip mariadb-connector-j-${version}.zip
    RC popd
  RC popd
  echo;echo;echo
}

prep_files_for_prod() {
  # Unzip and Stage files
  MSG "Prepping files for prod..."
  RC pushd ${cj_home}
    if [ -d ${dir_name} ]; then
      RC rm -rf ${dir_name}
    fi
    RC mkdir ${dir_name}
    RC pushd ${dir_name}
      RC wget -N ${maven}/${version}/mariadb-java-client-${version}-javadoc.jar
      RC wget -N ${maven}/${version}/mariadb-java-client-${version}-sources.jar
      RC wget -N ${maven}/${version}/mariadb-java-client-${version}.jar
      RC wget -N ${url}/${version}.tar.gz
      RC mv -vi ${version}.tar.gz mariadb-connector-j-${version}.tar.gz
      RC wget -N ${url}/${version}.zip
      RC mv -vi ${version}.zip mariadb-connector-j-${version}.zip
    RC popd
  RC popd
  echo;echo;echo
}

prep_org_files() {
  # Prep .org files
  MSG "Prepping org files..."
  RC mkdir ${cj_home_org}/${dir_name}
  for tarball in ${tarballs} ; do
    RC cp -avi ${cj_home}/${dir_name}/${tarball} ${cj_home_org}/${dir_name}/
  done
  RC pushd ${cj_home_org}/${dir_name}
  sumgen
  for file in *;do
    RC gpg ${gpg_opts} ${file}
  done
  popd
  echo;echo;echo
}

update_org_current_to_this_release() {
  if [[ -d ${cj_home_org}/connector-java-current ]]; then
    RC rm -rf ${cj_home_org}/connector-java-current
  fi
  MSG "Updating current org release to this one..."
  RC mkdir ${cj_home_org}/connector-java-current
  for tarball in ${tarballs} ; do
    case ${tarball} in
      *zip)
        RC cp -avi ${cj_home}/${dir_name}/${tarball} ${cj_home_org}/connector-java-current/mariadb-connector-j-current.zip
        ;;
      *tar.gz)
        RC cp -avi ${cj_home}/${dir_name}/${tarball} ${cj_home_org}/connector-java-current/mariadb-connector-j-current.tar.gz
        ;;
    esac
  done
  RC pushd ${cj_home_org}/connector-java-current/
  sumgen
  for file in *;do
    RC gpg ${gpg_opts} ${file}
  done
  popd
  echo;echo;echo
}

prep_com_files() {
  # Prep .com files
  MSG "Prepping com files..."
  RC pushd ${cj_home}/${dir_name}
  sumgen
  for file in *;do
    RC gpg ${ent_gpg_opts} ${file}
  done
  popd
  echo;echo;echo
}

upload_to_staging() {
  local upload
  upload=""
  MSG "Doing a dry-run..."
  RC rsync --dry-run -av --delete-after ${cj_home}/${dir_name} ${cj_home_corp_staging}/
  echo;echo;echo
  while [ -z ${upload} ]; do
    userResponse "Does the above look OK? [y/n]"
    case ${ANSWER} in
      "y")
        MSG "Uploading for real..."
        RC rsync -av --delete-after ${cj_home}/${dir_name} ${cj_home_corp_staging}/
        echo;echo;echo
        upload="yes"
        return 0
        ;;
      "n")
        echo "Something went wrong..."
        exit 1
        ;;
      *)
        echo "Please answer [y]es or [n]o."
        echo
        upload=""
        ;;
    esac
  done
}

upload_to_prod() {
  local upload
  upload=""
  MSG "Doing a dry-run..."
  RC rsync --dry-run -av --delete-after ${cj_home}/${dir_name} ${cj_home_corp}/
  echo;echo;echo
  while [ -z ${upload} ]; do
    userResponse "Does the above look OK? [y/n]"
    case ${ANSWER} in
      "y")
        MSG "Uploading for real..."
        RC rsync -av --delete-after ${cj_home}/${dir_name} ${cj_home_corp}/
        echo;echo;echo
        upload="yes"
        return 0
        ;;
      "n")
        echo "Something went wrong..."
        exit 1
        ;;
      *)
        echo "Please answer [y]es or [n]o."
        echo
        upload=""
        ;;
    esac
  done
}

#===  FUNCTION  ================================================================
#          NAME:  generate_the_file_list_pickle_for_org_downloads
#   DESCRIPTION:  This function logs in to the primary mirror and runs the
#                 command to generate the pickle that is then imported into the
#                 mariadb.org downloads system.
#===============================================================================
generate_the_file_list_pickle_for_org_downloads() {
  ssh -t -t ${primary_mirror} "python generate_file_list.py data/ --release=${dir_name}";
}

#===  FUNCTION  ================================================================
#          NAME:  update_the_STATUS_file
#   DESCRIPTION:  Simple function to update a STATUS file with a UNIX timestamp
#===============================================================================
update_the_STATUS_file() {
  echo "+ date +%s > ${cj_home_org}/STATUS"
          date +%s > ${cj_home_org}/STATUS
  MSG "STATUS file updated"
}

#===  FUNCTION  ================================================================
#          NAME:  uploader
#   DESCRIPTION:  Upload a release
#===============================================================================
uploader() {
  local dest
  local dests
  local rsync_uploader_opts
  dests="$@"
  rsync_uploader_opts="-av --delete-before --exclude=TIME --exclude=exclude --exclude=*orig"
  for dest in ${dests} ; do
    local cont
    cont=""
    while [ -z ${cont} ]; do
      userResponse "Should I upload to ${dest}? [y/n]"
      case ${ANSWER} in
        y)
          MSG "Uploading to ${dest}..."
          case ${dest} in
            *hz-archive*)
              rsync_uploader_opts="${rsync_uploader_opts} --no-group --no-owner --no-perms"
              ;;
          esac
          rsync_wrapper "${rsync_uploader_opts} ${cj_home_org}/${dir_name} ${dest}/"
          rsync_wrapper "${rsync_uploader_opts} ${cj_home_org}/connector-java-current ${dest}/"
          cont="yes"
          ANSWER=""
          ;;
        n)
          MSG "Skipping uploading to ${dest}..."
          cont="yes"
          ANSWER=""
          ;;
        *)
          MSG_L "Please answer [y]es or [n]o."
          cont=""
          ANSWER=""
          ;;
      esac
    done
  done
}

# Wrapper functions for uploader
upload_to_the_mirrors() {
  uploader "${mirrors}"
}

upload_to_the_archives() {
  uploader "${archives}"
}

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  rsync_wrapper
#   DESCRIPTION:  This function provides a safety net for using rsync. It takes
#                 the options part of the rsync (everything that would come
#                 after the rsync command itself on the command-line) and first
#                 runs it with the --dry-run flag. It then asks if everything
#                 is OK. Assuming things are OK, it runs the rsync for real.
#-------------------------------------------------------------------------------
rsync_wrapper() {
  local upload
  upload=""
  rsync_body="${@}"
  MSG_L "Doing a dry run..."
  RC rsync --dry-run ${rsync_body} | less
  echo
  while [ -z ${upload} ]; do
    userResponse "Did the dry run look OK? [y/n]"
    case ${ANSWER} in
      "y")
        MSG_L "Transferring for real..."
        RC rsync ${rsync_body}
        echo
        upload="yes"
        ANSWER=""
        return 0
        ;;
      "n")
        MSG_L "Something went wrong..."
        ANSWER=""
        exit 1
        ;;
      *)
        echo "Please answer [y]es or [n]o."
        echo
        upload=""
        ;;
    esac
  done
}

#===  FUNCTION  ================================================================
#          NAME:  remove_a_dir_from_the_local_mirror_dir
#   DESCRIPTION:  This function displays the dirs in the ${dir_local_mirror}
#                 directory and prompts for a dir to release, repeating until
#                 you answer 'n'.
#===============================================================================
remove_a_dir_from_the_local_mirror_dir() {
  local done_removing
  done_removing=""
  while [ -z ${done_removing} ];do
    MSG "Releases currently in ${dir_local_mirror}"
    tree -L 1 ${dir_local_mirror}
    line
    userInput "What release should I remove? (e.g. mariadb-10.6.7, s to stop)"
    release_to_remove="${INPUT}"
    if [ -z ${release_to_remove} ] ; then
      MSG "Please enter a release or 's' to stop."
    else
      case ${release_to_remove} in
        s)
          MSG_L "Stopping..."
          done_removing='yes'
          ;;
        *)
          if [ -d ${dir_local_mirror}/${release_to_remove} ] ; then
            userResponse "Ok to remove ${release_to_remove}? [y/n]"
            case ${ANSWER} in
              y)
                MSG_L "Removing ${release_to_remove}..."
                RC rm -rf ${dir_local_mirror}/${release_to_remove}
                ;;
              n)
                MSG_L "Not removing ${release_to_remove}"
                ;;
              *)
                MSG_L "Please answer [y]es or [n]o."
                ;;
            esac
          else
            MSG_L "${release_to_remove} doesn't appear to exist, please try again."
            pressAnyKeyToContinue
          fi
          done_removing=""
          ;;
      esac
    fi
  done
}

#===  FUNCTION  ================================================================
#          NAME:  copy_the_release_to_the_local_mirror_dir
#   DESCRIPTION:  Copy the release to the local mirror prep directory
#===============================================================================
copy_the_release_to_the_local_mirror_dir() {
  if [[ -d ${dir_local_mirror}/${dir_name} ]] ; then
    MSG_L "Found existing ${dir_name} under ${dir_local_mirror}/, not copying..."
  else
    RC cp -ail ${cj_home_org}/${dir_name} ${dir_local_mirror}/
  fi
  RC rsync -av ${cj_home_org}/connector-java-current ${dir_local_mirror}/
  verify_local_mirror_copy_is_good
}

verify_local_mirror_copy_is_good() {
  local dry_run_status
  dry_run_status=""
  MSG "Doing an rsync dry-run to verify the local mirror copy is good"
  MSG_L "If rsync doesn't find anything to sync then the copy is good."
  for dir in ${dir_name} connector-java-current ; do
    RC rsync --dry-run -avP ${cj_home_org}/${dir} ${dir_local_mirror}/
    LINE
  done
  while [ -z ${dry_run_status} ]; do
    userResponse "Did the dry run look OK? [y/n]"
    case ${ANSWER} in
      "y")
        MSG_L "Local mirror copy is good..."
        dry_run_status="yes"
        ANSWER=""
        return 0
        ;;
      "n")
        MSG_L "Local mirror copy is not good. Something went wrong..."
        MSG_L "You might want to delete the local mirror copy and re-run this step"
        ANSWER=""
        exit 1
        ;;
      *)
        echo "Please answer [y]es or [n]o."
        echo
        dry_run_status=""
        ;;
    esac
  done
}


#-------------------------------------------------------------------------------
# Main Script
#-------------------------------------------------------------------------------

loadDefaults

if [ "${version}" = "" ]; then
  usage
fi

set -eu
  # -e  Exit immediately if a simple command exits with a non-zero status,
  #     unless the command that fails is part of an until or  while loop, part
  #     of an if statement, part of a && or || list, or if the command's return
  #     status is being inverted using !.  -o errexit
  #
  # -u  Treat unset variables as an error when performing parameter expansion.
  #     An error message will be written to the standard error, and a
  #     non-interactive shell will exit.
  #
  # -x  Print a trace of simple commands and their arguments after they are
  #     expanded and before they are executed.

shouldI prep_files_for_staging

shouldI prep_files_for_prod

shouldI prep_org_files

shouldI update_org_current_to_this_release

shouldI prep_com_files

shouldI upload_to_staging

shouldI upload_to_prod

MSG_I "Mirrors"
for mirror in ${mirrors} ; do echo "- ${mirror}";done;echo
shouldI upload_to_the_mirrors
echo;echo
MSG_I "Archives"
for archive in ${archives} ; do echo "- ${archive}";done;echo
shouldI upload_to_the_archives

#shouldI generate_the_file_list_pickle_for_org_downloads

#shouldI update_the_STATUS_file

shouldI copy_the_release_to_the_local_mirror_dir
shouldI remove_a_dir_from_the_local_mirror_dir

MSG "All done!"
echo;echo;echo
